
microwave1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b3c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08003cdc  08003cdc  00013cdc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003d58  08003d58  00013d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003d5c  08003d5c  00013d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  08003d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
  7 .bss          000001e0  20000074  20000074  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000254  20000254  00020074  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017267  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002bb6  00000000  00000000  0003730b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007eea  00000000  00000000  00039ec1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000aa0  00000000  00000000  00041db0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000f18  00000000  00000000  00042850  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000062bb  00000000  00000000  00043768  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000427c  00000000  00000000  00049a23  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004dc9f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002340  00000000  00000000  0004dd1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003cc4 	.word	0x08003cc4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08003cc4 	.word	0x08003cc4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__aeabi_d2iz>:
 8000a14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a1c:	d215      	bcs.n	8000a4a <__aeabi_d2iz+0x36>
 8000a1e:	d511      	bpl.n	8000a44 <__aeabi_d2iz+0x30>
 8000a20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a28:	d912      	bls.n	8000a50 <__aeabi_d2iz+0x3c>
 8000a2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a3e:	bf18      	it	ne
 8000a40:	4240      	negne	r0, r0
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d105      	bne.n	8000a5c <__aeabi_d2iz+0x48>
 8000a50:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a54:	bf08      	it	eq
 8000a56:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop

08000a64 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a64:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a66:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <HAL_InitTick+0x3c>)
 8000a68:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <HAL_InitTick+0x40>)
{
 8000a6a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a6c:	7818      	ldrb	r0, [r3, #0]
 8000a6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a72:	fbb3 f3f0 	udiv	r3, r3, r0
 8000a76:	6810      	ldr	r0, [r2, #0]
 8000a78:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a7c:	f000 f88c 	bl	8000b98 <HAL_SYSTICK_Config>
 8000a80:	4604      	mov	r4, r0
 8000a82:	b958      	cbnz	r0, 8000a9c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a84:	2d0f      	cmp	r5, #15
 8000a86:	d809      	bhi.n	8000a9c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a88:	4602      	mov	r2, r0
 8000a8a:	4629      	mov	r1, r5
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	f000 f842 	bl	8000b18 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a94:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <HAL_InitTick+0x44>)
 8000a96:	4620      	mov	r0, r4
 8000a98:	601d      	str	r5, [r3, #0]
 8000a9a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000a9c:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000a9e:	bd38      	pop	{r3, r4, r5, pc}
 8000aa0:	2000000c 	.word	0x2000000c
 8000aa4:	20000000 	.word	0x20000000
 8000aa8:	20000004 	.word	0x20000004

08000aac <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aac:	4a07      	ldr	r2, [pc, #28]	; (8000acc <HAL_Init+0x20>)
{
 8000aae:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab0:	6813      	ldr	r3, [r2, #0]
 8000ab2:	f043 0310 	orr.w	r3, r3, #16
 8000ab6:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab8:	2003      	movs	r0, #3
 8000aba:	f000 f81b 	bl	8000af4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f7ff ffd0 	bl	8000a64 <HAL_InitTick>
  HAL_MspInit();
 8000ac4:	f002 fac0 	bl	8003048 <HAL_MspInit>
}
 8000ac8:	2000      	movs	r0, #0
 8000aca:	bd08      	pop	{r3, pc}
 8000acc:	40022000 	.word	0x40022000

08000ad0 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ad0:	4a03      	ldr	r2, [pc, #12]	; (8000ae0 <HAL_IncTick+0x10>)
 8000ad2:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <HAL_IncTick+0x14>)
 8000ad4:	6811      	ldr	r1, [r2, #0]
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	440b      	add	r3, r1
 8000ada:	6013      	str	r3, [r2, #0]
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	2000009c 	.word	0x2000009c
 8000ae4:	20000000 	.word	0x20000000

08000ae8 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000ae8:	4b01      	ldr	r3, [pc, #4]	; (8000af0 <HAL_GetTick+0x8>)
 8000aea:	6818      	ldr	r0, [r3, #0]
}
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	2000009c 	.word	0x2000009c

08000af4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af4:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000af6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000afc:	041b      	lsls	r3, r3, #16
 8000afe:	0c1b      	lsrs	r3, r3, #16
 8000b00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b04:	0200      	lsls	r0, r0, #8
 8000b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b0a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000b0e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000b10:	60d3      	str	r3, [r2, #12]
 8000b12:	4770      	bx	lr
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b1a:	b530      	push	{r4, r5, lr}
 8000b1c:	68dc      	ldr	r4, [r3, #12]
 8000b1e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b22:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b26:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b28:	2b04      	cmp	r3, #4
 8000b2a:	bf28      	it	cs
 8000b2c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b2e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b30:	f04f 0501 	mov.w	r5, #1
 8000b34:	fa05 f303 	lsl.w	r3, r5, r3
 8000b38:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b3c:	bf8c      	ite	hi
 8000b3e:	3c03      	subhi	r4, #3
 8000b40:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b42:	4019      	ands	r1, r3
 8000b44:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b46:	fa05 f404 	lsl.w	r4, r5, r4
 8000b4a:	3c01      	subs	r4, #1
 8000b4c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000b4e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b50:	ea42 0201 	orr.w	r2, r2, r1
 8000b54:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b58:	bfaf      	iteee	ge
 8000b5a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5e:	f000 000f 	andlt.w	r0, r0, #15
 8000b62:	4b06      	ldrlt	r3, [pc, #24]	; (8000b7c <HAL_NVIC_SetPriority+0x64>)
 8000b64:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b66:	bfa5      	ittet	ge
 8000b68:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000b6c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b70:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000b74:	bd30      	pop	{r4, r5, pc}
 8000b76:	bf00      	nop
 8000b78:	e000ed00 	.word	0xe000ed00
 8000b7c:	e000ed14 	.word	0xe000ed14

08000b80 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000b80:	0942      	lsrs	r2, r0, #5
 8000b82:	2301      	movs	r3, #1
 8000b84:	f000 001f 	and.w	r0, r0, #31
 8000b88:	fa03 f000 	lsl.w	r0, r3, r0
 8000b8c:	4b01      	ldr	r3, [pc, #4]	; (8000b94 <HAL_NVIC_EnableIRQ+0x14>)
 8000b8e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000b92:	4770      	bx	lr
 8000b94:	e000e100 	.word	0xe000e100

08000b98 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b98:	3801      	subs	r0, #1
 8000b9a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b9e:	d20a      	bcs.n	8000bb6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba2:	4a07      	ldr	r2, [pc, #28]	; (8000bc0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ba4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba6:	21f0      	movs	r1, #240	; 0xf0
 8000ba8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bac:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bae:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bb0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000bb6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000e010 	.word	0xe000e010
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bc4:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8000bc8:	2a02      	cmp	r2, #2
{  
 8000bca:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bcc:	d003      	beq.n	8000bd6 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bce:	2204      	movs	r2, #4
 8000bd0:	6382      	str	r2, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	bd10      	pop	{r4, pc}
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bd6:	6802      	ldr	r2, [r0, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000bd8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bda:	6811      	ldr	r1, [r2, #0]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000bdc:	6b43      	ldr	r3, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bde:	f021 010e 	bic.w	r1, r1, #14
 8000be2:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000be4:	6811      	ldr	r1, [r2, #0]
 8000be6:	f021 0101 	bic.w	r1, r1, #1
 8000bea:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000bec:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000bee:	2101      	movs	r1, #1
 8000bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf4:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8000bf6:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8000bf8:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000bfc:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000c00:	b113      	cbz	r3, 8000c08 <HAL_DMA_Abort_IT+0x44>
    {
      hdma->XferAbortCallback(hdma);
 8000c02:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000c04:	4620      	mov	r0, r4
 8000c06:	bd10      	pop	{r4, pc}
 8000c08:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 8000c0a:	bd10      	pop	{r4, pc}

08000c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000c10:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c14:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8000da8 <HAL_GPIO_Init+0x19c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c18:	4a61      	ldr	r2, [pc, #388]	; (8000da0 <HAL_GPIO_Init+0x194>)
  uint32_t position = 0x00U;
 8000c1a:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000c1c:	fa38 f403 	lsrs.w	r4, r8, r3
 8000c20:	d102      	bne.n	8000c28 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 8000c22:	b003      	add	sp, #12
 8000c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c28:	f04f 0e01 	mov.w	lr, #1
 8000c2c:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 8000c30:	ea18 060e 	ands.w	r6, r8, lr
 8000c34:	f000 80a6 	beq.w	8000d84 <HAL_GPIO_Init+0x178>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c38:	684c      	ldr	r4, [r1, #4]
 8000c3a:	f024 0710 	bic.w	r7, r4, #16
 8000c3e:	2f02      	cmp	r7, #2
 8000c40:	d116      	bne.n	8000c70 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 8000c42:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000c46:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c4a:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000c4e:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c52:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000c56:	f04f 0c0f 	mov.w	ip, #15
 8000c5a:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000c5e:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c62:	690d      	ldr	r5, [r1, #16]
 8000c64:	fa05 f50b 	lsl.w	r5, r5, fp
 8000c68:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000c6c:	f8ca 5020 	str.w	r5, [sl, #32]
 8000c70:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c74:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000c76:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c7a:	fa05 f50a 	lsl.w	r5, r5, sl
 8000c7e:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c80:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c84:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c88:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c8c:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c8e:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c92:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000c94:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c98:	d811      	bhi.n	8000cbe <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8000c9a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c9c:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ca0:	68cf      	ldr	r7, [r1, #12]
 8000ca2:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000ca6:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000caa:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000cac:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cae:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cb2:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000cb6:	409f      	lsls	r7, r3
 8000cb8:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000cbc:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000cbe:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cc0:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cc2:	688f      	ldr	r7, [r1, #8]
 8000cc4:	fa07 f70a 	lsl.w	r7, r7, sl
 8000cc8:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000cca:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ccc:	00e5      	lsls	r5, r4, #3
 8000cce:	d559      	bpl.n	8000d84 <HAL_GPIO_Init+0x178>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd0:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000cd4:	f045 0501 	orr.w	r5, r5, #1
 8000cd8:	f8c9 5018 	str.w	r5, [r9, #24]
 8000cdc:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000ce0:	f023 0703 	bic.w	r7, r3, #3
 8000ce4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000ce8:	f005 0501 	and.w	r5, r5, #1
 8000cec:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000cf0:	9501      	str	r5, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000cf2:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf6:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000cf8:	68bd      	ldr	r5, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000cfa:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000cfe:	f04f 0e0f 	mov.w	lr, #15
 8000d02:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d06:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000d0a:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d0e:	d03b      	beq.n	8000d88 <HAL_GPIO_Init+0x17c>
 8000d10:	4d24      	ldr	r5, [pc, #144]	; (8000da4 <HAL_GPIO_Init+0x198>)
 8000d12:	42a8      	cmp	r0, r5
 8000d14:	d03a      	beq.n	8000d8c <HAL_GPIO_Init+0x180>
 8000d16:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d1a:	42a8      	cmp	r0, r5
 8000d1c:	d038      	beq.n	8000d90 <HAL_GPIO_Init+0x184>
 8000d1e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d22:	42a8      	cmp	r0, r5
 8000d24:	d036      	beq.n	8000d94 <HAL_GPIO_Init+0x188>
 8000d26:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d2a:	42a8      	cmp	r0, r5
 8000d2c:	d034      	beq.n	8000d98 <HAL_GPIO_Init+0x18c>
 8000d2e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d32:	42a8      	cmp	r0, r5
 8000d34:	d032      	beq.n	8000d9c <HAL_GPIO_Init+0x190>
 8000d36:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d3a:	42a8      	cmp	r0, r5
 8000d3c:	bf14      	ite	ne
 8000d3e:	2507      	movne	r5, #7
 8000d40:	2506      	moveq	r5, #6
 8000d42:	fa05 f50c 	lsl.w	r5, r5, ip
 8000d46:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d4a:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000d4c:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000d4e:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d50:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000d54:	bf0c      	ite	eq
 8000d56:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000d58:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 8000d5a:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000d5c:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d5e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000d62:	bf0c      	ite	eq
 8000d64:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000d66:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8000d68:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000d6a:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d6c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000d70:	bf0c      	ite	eq
 8000d72:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000d74:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 8000d76:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000d78:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d7a:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000d7c:	bf54      	ite	pl
 8000d7e:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8000d80:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 8000d82:	60d5      	str	r5, [r2, #12]
    position++;
 8000d84:	3301      	adds	r3, #1
 8000d86:	e749      	b.n	8000c1c <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d88:	2500      	movs	r5, #0
 8000d8a:	e7da      	b.n	8000d42 <HAL_GPIO_Init+0x136>
 8000d8c:	2501      	movs	r5, #1
 8000d8e:	e7d8      	b.n	8000d42 <HAL_GPIO_Init+0x136>
 8000d90:	2502      	movs	r5, #2
 8000d92:	e7d6      	b.n	8000d42 <HAL_GPIO_Init+0x136>
 8000d94:	2503      	movs	r5, #3
 8000d96:	e7d4      	b.n	8000d42 <HAL_GPIO_Init+0x136>
 8000d98:	2504      	movs	r5, #4
 8000d9a:	e7d2      	b.n	8000d42 <HAL_GPIO_Init+0x136>
 8000d9c:	2505      	movs	r5, #5
 8000d9e:	e7d0      	b.n	8000d42 <HAL_GPIO_Init+0x136>
 8000da0:	40010400 	.word	0x40010400
 8000da4:	48000400 	.word	0x48000400
 8000da8:	40021000 	.word	0x40021000

08000dac <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000dac:	6903      	ldr	r3, [r0, #16]
 8000dae:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000db0:	bf14      	ite	ne
 8000db2:	2001      	movne	r0, #1
 8000db4:	2000      	moveq	r0, #0
 8000db6:	4770      	bx	lr

08000db8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000db8:	b10a      	cbz	r2, 8000dbe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dba:	6181      	str	r1, [r0, #24]
 8000dbc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dbe:	6281      	str	r1, [r0, #40]	; 0x28
 8000dc0:	4770      	bx	lr
	...

08000dc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dc4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dc8:	4605      	mov	r5, r0
 8000dca:	b918      	cbnz	r0, 8000dd4 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000dcc:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000dce:	b002      	add	sp, #8
 8000dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dd4:	6803      	ldr	r3, [r0, #0]
 8000dd6:	07df      	lsls	r7, r3, #31
 8000dd8:	d411      	bmi.n	8000dfe <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dda:	682b      	ldr	r3, [r5, #0]
 8000ddc:	079e      	lsls	r6, r3, #30
 8000dde:	f100 8088 	bmi.w	8000ef2 <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000de2:	682b      	ldr	r3, [r5, #0]
 8000de4:	071c      	lsls	r4, r3, #28
 8000de6:	f100 80fc 	bmi.w	8000fe2 <HAL_RCC_OscConfig+0x21e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dea:	682b      	ldr	r3, [r5, #0]
 8000dec:	0758      	lsls	r0, r3, #29
 8000dee:	f100 8145 	bmi.w	800107c <HAL_RCC_OscConfig+0x2b8>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000df2:	69aa      	ldr	r2, [r5, #24]
 8000df4:	2a00      	cmp	r2, #0
 8000df6:	f040 81dc 	bne.w	80011b2 <HAL_RCC_OscConfig+0x3ee>
  return HAL_OK;
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	e7e7      	b.n	8000dce <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dfe:	4cbd      	ldr	r4, [pc, #756]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000e00:	6863      	ldr	r3, [r4, #4]
 8000e02:	f003 030c 	and.w	r3, r3, #12
 8000e06:	2b04      	cmp	r3, #4
 8000e08:	d00a      	beq.n	8000e20 <HAL_RCC_OscConfig+0x5c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e0a:	6863      	ldr	r3, [r4, #4]
 8000e0c:	f003 030c 	and.w	r3, r3, #12
 8000e10:	2b08      	cmp	r3, #8
 8000e12:	d119      	bne.n	8000e48 <HAL_RCC_OscConfig+0x84>
 8000e14:	6863      	ldr	r3, [r4, #4]
 8000e16:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e1e:	d113      	bne.n	8000e48 <HAL_RCC_OscConfig+0x84>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e24:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e28:	6821      	ldr	r1, [r4, #0]
 8000e2a:	fa93 f3a3 	rbit	r3, r3
 8000e2e:	fab3 f383 	clz	r3, r3
 8000e32:	f003 031f 	and.w	r3, r3, #31
 8000e36:	2201      	movs	r2, #1
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	420b      	tst	r3, r1
 8000e3e:	d0cc      	beq.n	8000dda <HAL_RCC_OscConfig+0x16>
 8000e40:	686b      	ldr	r3, [r5, #4]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d1c9      	bne.n	8000dda <HAL_RCC_OscConfig+0x16>
 8000e46:	e7c1      	b.n	8000dcc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e48:	686b      	ldr	r3, [r5, #4]
 8000e4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e4e:	d11e      	bne.n	8000e8e <HAL_RCC_OscConfig+0xca>
 8000e50:	6823      	ldr	r3, [r4, #0]
 8000e52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e56:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000e58:	f7ff fe46 	bl	8000ae8 <HAL_GetTick>
 8000e5c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000e60:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e62:	2701      	movs	r7, #1
 8000e64:	fa96 f3a6 	rbit	r3, r6
 8000e68:	6822      	ldr	r2, [r4, #0]
 8000e6a:	fa96 f3a6 	rbit	r3, r6
 8000e6e:	fab3 f383 	clz	r3, r3
 8000e72:	f003 031f 	and.w	r3, r3, #31
 8000e76:	fa07 f303 	lsl.w	r3, r7, r3
 8000e7a:	4213      	tst	r3, r2
 8000e7c:	d1ad      	bne.n	8000dda <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e7e:	f7ff fe33 	bl	8000ae8 <HAL_GetTick>
 8000e82:	eba0 0008 	sub.w	r0, r0, r8
 8000e86:	2864      	cmp	r0, #100	; 0x64
 8000e88:	d9ec      	bls.n	8000e64 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8000e8a:	2003      	movs	r0, #3
 8000e8c:	e79f      	b.n	8000dce <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e8e:	bb0b      	cbnz	r3, 8000ed4 <HAL_RCC_OscConfig+0x110>
 8000e90:	6823      	ldr	r3, [r4, #0]
 8000e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e96:	6023      	str	r3, [r4, #0]
 8000e98:	6823      	ldr	r3, [r4, #0]
 8000e9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e9e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ea0:	f7ff fe22 	bl	8000ae8 <HAL_GetTick>
 8000ea4:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000ea8:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eaa:	2701      	movs	r7, #1
 8000eac:	fa96 f3a6 	rbit	r3, r6
 8000eb0:	6822      	ldr	r2, [r4, #0]
 8000eb2:	fa96 f3a6 	rbit	r3, r6
 8000eb6:	fab3 f383 	clz	r3, r3
 8000eba:	f003 031f 	and.w	r3, r3, #31
 8000ebe:	fa07 f303 	lsl.w	r3, r7, r3
 8000ec2:	4213      	tst	r3, r2
 8000ec4:	d089      	beq.n	8000dda <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ec6:	f7ff fe0f 	bl	8000ae8 <HAL_GetTick>
 8000eca:	eba0 0008 	sub.w	r0, r0, r8
 8000ece:	2864      	cmp	r0, #100	; 0x64
 8000ed0:	d9ec      	bls.n	8000eac <HAL_RCC_OscConfig+0xe8>
 8000ed2:	e7da      	b.n	8000e8a <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ed4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ed8:	6823      	ldr	r3, [r4, #0]
 8000eda:	d103      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x120>
 8000edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ee0:	6023      	str	r3, [r4, #0]
 8000ee2:	e7b5      	b.n	8000e50 <HAL_RCC_OscConfig+0x8c>
 8000ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ee8:	6023      	str	r3, [r4, #0]
 8000eea:	6823      	ldr	r3, [r4, #0]
 8000eec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ef0:	e7b1      	b.n	8000e56 <HAL_RCC_OscConfig+0x92>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ef2:	4c80      	ldr	r4, [pc, #512]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000ef4:	6863      	ldr	r3, [r4, #4]
 8000ef6:	f013 0f0c 	tst.w	r3, #12
 8000efa:	d00a      	beq.n	8000f12 <HAL_RCC_OscConfig+0x14e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000efc:	6863      	ldr	r3, [r4, #4]
 8000efe:	f003 030c 	and.w	r3, r3, #12
 8000f02:	2b08      	cmp	r3, #8
 8000f04:	d125      	bne.n	8000f52 <HAL_RCC_OscConfig+0x18e>
 8000f06:	6863      	ldr	r3, [r4, #4]
 8000f08:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000f0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f10:	d11f      	bne.n	8000f52 <HAL_RCC_OscConfig+0x18e>
 8000f12:	2302      	movs	r3, #2
 8000f14:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f18:	6821      	ldr	r1, [r4, #0]
 8000f1a:	fa93 f3a3 	rbit	r3, r3
 8000f1e:	fab3 f383 	clz	r3, r3
 8000f22:	f003 031f 	and.w	r3, r3, #31
 8000f26:	2201      	movs	r2, #1
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	420b      	tst	r3, r1
 8000f2e:	d003      	beq.n	8000f38 <HAL_RCC_OscConfig+0x174>
 8000f30:	68eb      	ldr	r3, [r5, #12]
 8000f32:	4293      	cmp	r3, r2
 8000f34:	f47f af4a 	bne.w	8000dcc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f38:	6821      	ldr	r1, [r4, #0]
 8000f3a:	23f8      	movs	r3, #248	; 0xf8
 8000f3c:	fa93 f3a3 	rbit	r3, r3
 8000f40:	fab3 f283 	clz	r2, r3
 8000f44:	692b      	ldr	r3, [r5, #16]
 8000f46:	4093      	lsls	r3, r2
 8000f48:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	6023      	str	r3, [r4, #0]
 8000f50:	e747      	b.n	8000de2 <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f52:	68ea      	ldr	r2, [r5, #12]
 8000f54:	2601      	movs	r6, #1
 8000f56:	b30a      	cbz	r2, 8000f9c <HAL_RCC_OscConfig+0x1d8>
 8000f58:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000f5c:	fab3 f383 	clz	r3, r3
 8000f60:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f64:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	2702      	movs	r7, #2
 8000f6c:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000f6e:	f7ff fdbb 	bl	8000ae8 <HAL_GetTick>
 8000f72:	4680      	mov	r8, r0
 8000f74:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f78:	6822      	ldr	r2, [r4, #0]
 8000f7a:	fa97 f3a7 	rbit	r3, r7
 8000f7e:	fab3 f383 	clz	r3, r3
 8000f82:	f003 031f 	and.w	r3, r3, #31
 8000f86:	fa06 f303 	lsl.w	r3, r6, r3
 8000f8a:	4213      	tst	r3, r2
 8000f8c:	d1d4      	bne.n	8000f38 <HAL_RCC_OscConfig+0x174>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f8e:	f7ff fdab 	bl	8000ae8 <HAL_GetTick>
 8000f92:	eba0 0008 	sub.w	r0, r0, r8
 8000f96:	2802      	cmp	r0, #2
 8000f98:	d9ec      	bls.n	8000f74 <HAL_RCC_OscConfig+0x1b0>
 8000f9a:	e776      	b.n	8000e8a <HAL_RCC_OscConfig+0xc6>
 8000f9c:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8000fa0:	fab3 f383 	clz	r3, r3
 8000fa4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fa8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	2702      	movs	r7, #2
 8000fb0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fb2:	f7ff fd99 	bl	8000ae8 <HAL_GetTick>
 8000fb6:	4680      	mov	r8, r0
 8000fb8:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fbc:	6822      	ldr	r2, [r4, #0]
 8000fbe:	fa97 f3a7 	rbit	r3, r7
 8000fc2:	fab3 f383 	clz	r3, r3
 8000fc6:	f003 031f 	and.w	r3, r3, #31
 8000fca:	fa06 f303 	lsl.w	r3, r6, r3
 8000fce:	4213      	tst	r3, r2
 8000fd0:	f43f af07 	beq.w	8000de2 <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fd4:	f7ff fd88 	bl	8000ae8 <HAL_GetTick>
 8000fd8:	eba0 0008 	sub.w	r0, r0, r8
 8000fdc:	2802      	cmp	r0, #2
 8000fde:	d9eb      	bls.n	8000fb8 <HAL_RCC_OscConfig+0x1f4>
 8000fe0:	e753      	b.n	8000e8a <HAL_RCC_OscConfig+0xc6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fe2:	696a      	ldr	r2, [r5, #20]
 8000fe4:	4e43      	ldr	r6, [pc, #268]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000fe6:	4944      	ldr	r1, [pc, #272]	; (80010f8 <HAL_RCC_OscConfig+0x334>)
 8000fe8:	2401      	movs	r4, #1
 8000fea:	b31a      	cbz	r2, 8001034 <HAL_RCC_OscConfig+0x270>
 8000fec:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8000ff0:	fab3 f383 	clz	r3, r3
 8000ff4:	440b      	add	r3, r1
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	2702      	movs	r7, #2
 8000ffa:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8000ffc:	f7ff fd74 	bl	8000ae8 <HAL_GetTick>
 8001000:	4680      	mov	r8, r0
 8001002:	fa97 f3a7 	rbit	r3, r7
 8001006:	fa97 f3a7 	rbit	r3, r7
 800100a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800100e:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001010:	fa97 f3a7 	rbit	r3, r7
 8001014:	fab3 f383 	clz	r3, r3
 8001018:	f003 031f 	and.w	r3, r3, #31
 800101c:	fa04 f303 	lsl.w	r3, r4, r3
 8001020:	4213      	tst	r3, r2
 8001022:	f47f aee2 	bne.w	8000dea <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001026:	f7ff fd5f 	bl	8000ae8 <HAL_GetTick>
 800102a:	eba0 0008 	sub.w	r0, r0, r8
 800102e:	2802      	cmp	r0, #2
 8001030:	d9e7      	bls.n	8001002 <HAL_RCC_OscConfig+0x23e>
 8001032:	e72a      	b.n	8000e8a <HAL_RCC_OscConfig+0xc6>
 8001034:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8001038:	fab3 f383 	clz	r3, r3
 800103c:	440b      	add	r3, r1
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	2702      	movs	r7, #2
 8001042:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001044:	f7ff fd50 	bl	8000ae8 <HAL_GetTick>
 8001048:	4680      	mov	r8, r0
 800104a:	fa97 f3a7 	rbit	r3, r7
 800104e:	fa97 f3a7 	rbit	r3, r7
 8001052:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001056:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001058:	fa97 f3a7 	rbit	r3, r7
 800105c:	fab3 f383 	clz	r3, r3
 8001060:	f003 031f 	and.w	r3, r3, #31
 8001064:	fa04 f303 	lsl.w	r3, r4, r3
 8001068:	4213      	tst	r3, r2
 800106a:	f43f aebe 	beq.w	8000dea <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800106e:	f7ff fd3b 	bl	8000ae8 <HAL_GetTick>
 8001072:	eba0 0008 	sub.w	r0, r0, r8
 8001076:	2802      	cmp	r0, #2
 8001078:	d9e7      	bls.n	800104a <HAL_RCC_OscConfig+0x286>
 800107a:	e706      	b.n	8000e8a <HAL_RCC_OscConfig+0xc6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800107c:	4c1d      	ldr	r4, [pc, #116]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 800107e:	69e3      	ldr	r3, [r4, #28]
 8001080:	00d9      	lsls	r1, r3, #3
 8001082:	d434      	bmi.n	80010ee <HAL_RCC_OscConfig+0x32a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001084:	69e3      	ldr	r3, [r4, #28]
 8001086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108a:	61e3      	str	r3, [r4, #28]
 800108c:	69e3      	ldr	r3, [r4, #28]
 800108e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001092:	9301      	str	r3, [sp, #4]
 8001094:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001096:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001098:	4f18      	ldr	r7, [pc, #96]	; (80010fc <HAL_RCC_OscConfig+0x338>)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	05da      	lsls	r2, r3, #23
 800109e:	d52f      	bpl.n	8001100 <HAL_RCC_OscConfig+0x33c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010a0:	68ab      	ldr	r3, [r5, #8]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d13d      	bne.n	8001122 <HAL_RCC_OscConfig+0x35e>
 80010a6:	6a23      	ldr	r3, [r4, #32]
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80010ae:	f7ff fd1b 	bl	8000ae8 <HAL_GetTick>
 80010b2:	2702      	movs	r7, #2
 80010b4:	4682      	mov	sl, r0
 80010b6:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010b8:	f04f 0801 	mov.w	r8, #1
 80010bc:	fa97 f3a7 	rbit	r3, r7
 80010c0:	fa97 f3a7 	rbit	r3, r7
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d06c      	beq.n	80011a2 <HAL_RCC_OscConfig+0x3de>
 80010c8:	6a22      	ldr	r2, [r4, #32]
 80010ca:	fa99 f3a9 	rbit	r3, r9
 80010ce:	fab3 f383 	clz	r3, r3
 80010d2:	f003 031f 	and.w	r3, r3, #31
 80010d6:	fa08 f303 	lsl.w	r3, r8, r3
 80010da:	4213      	tst	r3, r2
 80010dc:	d058      	beq.n	8001190 <HAL_RCC_OscConfig+0x3cc>
    if(pwrclkchanged == SET)
 80010de:	2e00      	cmp	r6, #0
 80010e0:	f43f ae87 	beq.w	8000df2 <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80010e4:	69e3      	ldr	r3, [r4, #28]
 80010e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010ea:	61e3      	str	r3, [r4, #28]
 80010ec:	e681      	b.n	8000df2 <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 80010ee:	2600      	movs	r6, #0
 80010f0:	e7d2      	b.n	8001098 <HAL_RCC_OscConfig+0x2d4>
 80010f2:	bf00      	nop
 80010f4:	40021000 	.word	0x40021000
 80010f8:	10908120 	.word	0x10908120
 80010fc:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001106:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001108:	f7ff fcee 	bl	8000ae8 <HAL_GetTick>
 800110c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	05db      	lsls	r3, r3, #23
 8001112:	d4c5      	bmi.n	80010a0 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001114:	f7ff fce8 	bl	8000ae8 <HAL_GetTick>
 8001118:	eba0 0008 	sub.w	r0, r0, r8
 800111c:	2864      	cmp	r0, #100	; 0x64
 800111e:	d9f6      	bls.n	800110e <HAL_RCC_OscConfig+0x34a>
 8001120:	e6b3      	b.n	8000e8a <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001122:	bb3b      	cbnz	r3, 8001174 <HAL_RCC_OscConfig+0x3b0>
 8001124:	6a23      	ldr	r3, [r4, #32]
 8001126:	f023 0301 	bic.w	r3, r3, #1
 800112a:	6223      	str	r3, [r4, #32]
 800112c:	6a23      	ldr	r3, [r4, #32]
 800112e:	f023 0304 	bic.w	r3, r3, #4
 8001132:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001134:	f7ff fcd8 	bl	8000ae8 <HAL_GetTick>
 8001138:	2702      	movs	r7, #2
 800113a:	4682      	mov	sl, r0
 800113c:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800113e:	f04f 0801 	mov.w	r8, #1
 8001142:	fa97 f3a7 	rbit	r3, r7
 8001146:	fa97 f3a7 	rbit	r3, r7
 800114a:	b373      	cbz	r3, 80011aa <HAL_RCC_OscConfig+0x3e6>
 800114c:	6a22      	ldr	r2, [r4, #32]
 800114e:	fa99 f3a9 	rbit	r3, r9
 8001152:	fab3 f383 	clz	r3, r3
 8001156:	f003 031f 	and.w	r3, r3, #31
 800115a:	fa08 f303 	lsl.w	r3, r8, r3
 800115e:	4213      	tst	r3, r2
 8001160:	d0bd      	beq.n	80010de <HAL_RCC_OscConfig+0x31a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001162:	f7ff fcc1 	bl	8000ae8 <HAL_GetTick>
 8001166:	f241 3388 	movw	r3, #5000	; 0x1388
 800116a:	eba0 000a 	sub.w	r0, r0, sl
 800116e:	4298      	cmp	r0, r3
 8001170:	d9e7      	bls.n	8001142 <HAL_RCC_OscConfig+0x37e>
 8001172:	e68a      	b.n	8000e8a <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001174:	2b05      	cmp	r3, #5
 8001176:	6a23      	ldr	r3, [r4, #32]
 8001178:	d103      	bne.n	8001182 <HAL_RCC_OscConfig+0x3be>
 800117a:	f043 0304 	orr.w	r3, r3, #4
 800117e:	6223      	str	r3, [r4, #32]
 8001180:	e791      	b.n	80010a6 <HAL_RCC_OscConfig+0x2e2>
 8001182:	f023 0301 	bic.w	r3, r3, #1
 8001186:	6223      	str	r3, [r4, #32]
 8001188:	6a23      	ldr	r3, [r4, #32]
 800118a:	f023 0304 	bic.w	r3, r3, #4
 800118e:	e78d      	b.n	80010ac <HAL_RCC_OscConfig+0x2e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001190:	f7ff fcaa 	bl	8000ae8 <HAL_GetTick>
 8001194:	f241 3388 	movw	r3, #5000	; 0x1388
 8001198:	eba0 000a 	sub.w	r0, r0, sl
 800119c:	4298      	cmp	r0, r3
 800119e:	d98d      	bls.n	80010bc <HAL_RCC_OscConfig+0x2f8>
 80011a0:	e673      	b.n	8000e8a <HAL_RCC_OscConfig+0xc6>
 80011a2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80011a8:	e78f      	b.n	80010ca <HAL_RCC_OscConfig+0x306>
 80011aa:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80011b0:	e7cd      	b.n	800114e <HAL_RCC_OscConfig+0x38a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011b2:	4c44      	ldr	r4, [pc, #272]	; (80012c4 <HAL_RCC_OscConfig+0x500>)
 80011b4:	6863      	ldr	r3, [r4, #4]
 80011b6:	f003 030c 	and.w	r3, r3, #12
 80011ba:	2b08      	cmp	r3, #8
 80011bc:	f43f ae06 	beq.w	8000dcc <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011c0:	2a02      	cmp	r2, #2
 80011c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011c6:	d158      	bne.n	800127a <HAL_RCC_OscConfig+0x4b6>
 80011c8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80011cc:	fab3 f383 	clz	r3, r3
 80011d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011de:	f7ff fc83 	bl	8000ae8 <HAL_GetTick>
 80011e2:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80011e6:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011e8:	2601      	movs	r6, #1
 80011ea:	fa97 f3a7 	rbit	r3, r7
 80011ee:	6822      	ldr	r2, [r4, #0]
 80011f0:	fa97 f3a7 	rbit	r3, r7
 80011f4:	fab3 f383 	clz	r3, r3
 80011f8:	f003 031f 	and.w	r3, r3, #31
 80011fc:	fa06 f303 	lsl.w	r3, r6, r3
 8001200:	4213      	tst	r3, r2
 8001202:	d133      	bne.n	800126c <HAL_RCC_OscConfig+0x4a8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001204:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001206:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001208:	f023 030f 	bic.w	r3, r3, #15
 800120c:	4313      	orrs	r3, r2
 800120e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001210:	6862      	ldr	r2, [r4, #4]
 8001212:	6a2b      	ldr	r3, [r5, #32]
 8001214:	69e9      	ldr	r1, [r5, #28]
 8001216:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 800121a:	430b      	orrs	r3, r1
 800121c:	4313      	orrs	r3, r2
 800121e:	6063      	str	r3, [r4, #4]
 8001220:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001224:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001228:	fab3 f383 	clz	r3, r3
 800122c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001230:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800123a:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800123c:	f7ff fc54 	bl	8000ae8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001240:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8001242:	4607      	mov	r7, r0
 8001244:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001248:	6822      	ldr	r2, [r4, #0]
 800124a:	fa95 f3a5 	rbit	r3, r5
 800124e:	fab3 f383 	clz	r3, r3
 8001252:	f003 031f 	and.w	r3, r3, #31
 8001256:	fa06 f303 	lsl.w	r3, r6, r3
 800125a:	4213      	tst	r3, r2
 800125c:	f47f adcd 	bne.w	8000dfa <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001260:	f7ff fc42 	bl	8000ae8 <HAL_GetTick>
 8001264:	1bc0      	subs	r0, r0, r7
 8001266:	2802      	cmp	r0, #2
 8001268:	d9ec      	bls.n	8001244 <HAL_RCC_OscConfig+0x480>
 800126a:	e60e      	b.n	8000e8a <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800126c:	f7ff fc3c 	bl	8000ae8 <HAL_GetTick>
 8001270:	eba0 0008 	sub.w	r0, r0, r8
 8001274:	2802      	cmp	r0, #2
 8001276:	d9b8      	bls.n	80011ea <HAL_RCC_OscConfig+0x426>
 8001278:	e607      	b.n	8000e8a <HAL_RCC_OscConfig+0xc6>
 800127a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800127e:	fab3 f383 	clz	r3, r3
 8001282:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001286:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001290:	f7ff fc2a 	bl	8000ae8 <HAL_GetTick>
 8001294:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001298:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800129a:	2601      	movs	r6, #1
 800129c:	fa95 f3a5 	rbit	r3, r5
 80012a0:	6822      	ldr	r2, [r4, #0]
 80012a2:	fa95 f3a5 	rbit	r3, r5
 80012a6:	fab3 f383 	clz	r3, r3
 80012aa:	f003 031f 	and.w	r3, r3, #31
 80012ae:	fa06 f303 	lsl.w	r3, r6, r3
 80012b2:	4213      	tst	r3, r2
 80012b4:	f43f ada1 	beq.w	8000dfa <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012b8:	f7ff fc16 	bl	8000ae8 <HAL_GetTick>
 80012bc:	1bc0      	subs	r0, r0, r7
 80012be:	2802      	cmp	r0, #2
 80012c0:	d9ec      	bls.n	800129c <HAL_RCC_OscConfig+0x4d8>
 80012c2:	e5e2      	b.n	8000e8a <HAL_RCC_OscConfig+0xc6>
 80012c4:	40021000 	.word	0x40021000

080012c8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80012c8:	4911      	ldr	r1, [pc, #68]	; (8001310 <HAL_RCC_GetSysClockFreq+0x48>)
 80012ca:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012cc:	f003 020c 	and.w	r2, r3, #12
 80012d0:	2a08      	cmp	r2, #8
 80012d2:	d11a      	bne.n	800130a <HAL_RCC_GetSysClockFreq+0x42>
 80012d4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80012d8:	fa92 f2a2 	rbit	r2, r2
 80012dc:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80012de:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80012e2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80012e4:	fa90 f0a0 	rbit	r0, r0
 80012e8:	fab0 f080 	clz	r0, r0
 80012ec:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80012f0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80012f4:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80012f6:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80012f8:	4a06      	ldr	r2, [pc, #24]	; (8001314 <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80012fa:	4807      	ldr	r0, [pc, #28]	; (8001318 <HAL_RCC_GetSysClockFreq+0x50>)
 80012fc:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80012fe:	4807      	ldr	r0, [pc, #28]	; (800131c <HAL_RCC_GetSysClockFreq+0x54>)
 8001300:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001304:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8001306:	4348      	muls	r0, r1
 8001308:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800130a:	4804      	ldr	r0, [pc, #16]	; (800131c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40021000 	.word	0x40021000
 8001314:	08003cdc 	.word	0x08003cdc
 8001318:	08003cec 	.word	0x08003cec
 800131c:	007a1200 	.word	0x007a1200

08001320 <HAL_RCC_ClockConfig>:
{
 8001320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001324:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001326:	4604      	mov	r4, r0
 8001328:	b910      	cbnz	r0, 8001330 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800132a:	2001      	movs	r0, #1
 800132c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001330:	4a4c      	ldr	r2, [pc, #304]	; (8001464 <HAL_RCC_ClockConfig+0x144>)
 8001332:	6813      	ldr	r3, [r2, #0]
 8001334:	f003 0307 	and.w	r3, r3, #7
 8001338:	428b      	cmp	r3, r1
 800133a:	d32e      	bcc.n	800139a <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800133c:	6822      	ldr	r2, [r4, #0]
 800133e:	0791      	lsls	r1, r2, #30
 8001340:	d436      	bmi.n	80013b0 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001342:	07d2      	lsls	r2, r2, #31
 8001344:	d43c      	bmi.n	80013c0 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001346:	4a47      	ldr	r2, [pc, #284]	; (8001464 <HAL_RCC_ClockConfig+0x144>)
 8001348:	6813      	ldr	r3, [r2, #0]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	429d      	cmp	r5, r3
 8001350:	d375      	bcc.n	800143e <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001352:	6822      	ldr	r2, [r4, #0]
 8001354:	4d44      	ldr	r5, [pc, #272]	; (8001468 <HAL_RCC_ClockConfig+0x148>)
 8001356:	f012 0f04 	tst.w	r2, #4
 800135a:	d17c      	bne.n	8001456 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800135c:	0713      	lsls	r3, r2, #28
 800135e:	d506      	bpl.n	800136e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001360:	686b      	ldr	r3, [r5, #4]
 8001362:	6922      	ldr	r2, [r4, #16]
 8001364:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001368:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800136c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800136e:	f7ff ffab 	bl	80012c8 <HAL_RCC_GetSysClockFreq>
 8001372:	686b      	ldr	r3, [r5, #4]
 8001374:	22f0      	movs	r2, #240	; 0xf0
 8001376:	fa92 f2a2 	rbit	r2, r2
 800137a:	fab2 f282 	clz	r2, r2
 800137e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001382:	40d3      	lsrs	r3, r2
 8001384:	4a39      	ldr	r2, [pc, #228]	; (800146c <HAL_RCC_ClockConfig+0x14c>)
 8001386:	5cd3      	ldrb	r3, [r2, r3]
 8001388:	40d8      	lsrs	r0, r3
 800138a:	4b39      	ldr	r3, [pc, #228]	; (8001470 <HAL_RCC_ClockConfig+0x150>)
 800138c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800138e:	2000      	movs	r0, #0
 8001390:	f7ff fb68 	bl	8000a64 <HAL_InitTick>
  return HAL_OK;
 8001394:	2000      	movs	r0, #0
 8001396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800139a:	6813      	ldr	r3, [r2, #0]
 800139c:	f023 0307 	bic.w	r3, r3, #7
 80013a0:	430b      	orrs	r3, r1
 80013a2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013a4:	6813      	ldr	r3, [r2, #0]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	4299      	cmp	r1, r3
 80013ac:	d1bd      	bne.n	800132a <HAL_RCC_ClockConfig+0xa>
 80013ae:	e7c5      	b.n	800133c <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013b0:	492d      	ldr	r1, [pc, #180]	; (8001468 <HAL_RCC_ClockConfig+0x148>)
 80013b2:	68a0      	ldr	r0, [r4, #8]
 80013b4:	684b      	ldr	r3, [r1, #4]
 80013b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013ba:	4303      	orrs	r3, r0
 80013bc:	604b      	str	r3, [r1, #4]
 80013be:	e7c0      	b.n	8001342 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013c0:	6862      	ldr	r2, [r4, #4]
 80013c2:	4e29      	ldr	r6, [pc, #164]	; (8001468 <HAL_RCC_ClockConfig+0x148>)
 80013c4:	2a01      	cmp	r2, #1
 80013c6:	d127      	bne.n	8001418 <HAL_RCC_ClockConfig+0xf8>
 80013c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013cc:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d0:	6831      	ldr	r1, [r6, #0]
 80013d2:	fa93 f3a3 	rbit	r3, r3
 80013d6:	fab3 f383 	clz	r3, r3
 80013da:	f003 031f 	and.w	r3, r3, #31
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e4:	d0a1      	beq.n	800132a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013e6:	6873      	ldr	r3, [r6, #4]
 80013e8:	f023 0303 	bic.w	r3, r3, #3
 80013ec:	431a      	orrs	r2, r3
 80013ee:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 80013f0:	f7ff fb7a 	bl	8000ae8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013f4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80013f8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013fa:	6873      	ldr	r3, [r6, #4]
 80013fc:	6862      	ldr	r2, [r4, #4]
 80013fe:	f003 030c 	and.w	r3, r3, #12
 8001402:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001406:	d09e      	beq.n	8001346 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001408:	f7ff fb6e 	bl	8000ae8 <HAL_GetTick>
 800140c:	1bc0      	subs	r0, r0, r7
 800140e:	4540      	cmp	r0, r8
 8001410:	d9f3      	bls.n	80013fa <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8001412:	2003      	movs	r0, #3
}
 8001414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001418:	2a02      	cmp	r2, #2
 800141a:	bf0c      	ite	eq
 800141c:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001420:	2302      	movne	r3, #2
 8001422:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001426:	6830      	ldr	r0, [r6, #0]
 8001428:	fa93 f3a3 	rbit	r3, r3
 800142c:	fab3 f383 	clz	r3, r3
 8001430:	f003 031f 	and.w	r3, r3, #31
 8001434:	2101      	movs	r1, #1
 8001436:	fa01 f303 	lsl.w	r3, r1, r3
 800143a:	4203      	tst	r3, r0
 800143c:	e7d2      	b.n	80013e4 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800143e:	6813      	ldr	r3, [r2, #0]
 8001440:	f023 0307 	bic.w	r3, r3, #7
 8001444:	432b      	orrs	r3, r5
 8001446:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001448:	6813      	ldr	r3, [r2, #0]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	429d      	cmp	r5, r3
 8001450:	f47f af6b 	bne.w	800132a <HAL_RCC_ClockConfig+0xa>
 8001454:	e77d      	b.n	8001352 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001456:	686b      	ldr	r3, [r5, #4]
 8001458:	68e1      	ldr	r1, [r4, #12]
 800145a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800145e:	430b      	orrs	r3, r1
 8001460:	606b      	str	r3, [r5, #4]
 8001462:	e77b      	b.n	800135c <HAL_RCC_ClockConfig+0x3c>
 8001464:	40022000 	.word	0x40022000
 8001468:	40021000 	.word	0x40021000
 800146c:	08003d0a 	.word	0x08003d0a
 8001470:	2000000c 	.word	0x2000000c

08001474 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001474:	4b08      	ldr	r3, [pc, #32]	; (8001498 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001476:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	fa92 f2a2 	rbit	r2, r2
 8001480:	fab2 f282 	clz	r2, r2
 8001484:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001488:	40d3      	lsrs	r3, r2
 800148a:	4a04      	ldr	r2, [pc, #16]	; (800149c <HAL_RCC_GetPCLK1Freq+0x28>)
 800148c:	5cd3      	ldrb	r3, [r2, r3]
 800148e:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001490:	6810      	ldr	r0, [r2, #0]
}    
 8001492:	40d8      	lsrs	r0, r3
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	40021000 	.word	0x40021000
 800149c:	08003d1a 	.word	0x08003d1a
 80014a0:	2000000c 	.word	0x2000000c

080014a4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80014a4:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014a6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	fa92 f2a2 	rbit	r2, r2
 80014b0:	fab2 f282 	clz	r2, r2
 80014b4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80014b8:	40d3      	lsrs	r3, r2
 80014ba:	4a04      	ldr	r2, [pc, #16]	; (80014cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80014bc:	5cd3      	ldrb	r3, [r2, r3]
 80014be:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <HAL_RCC_GetPCLK2Freq+0x2c>)
 80014c0:	6810      	ldr	r0, [r2, #0]
} 
 80014c2:	40d8      	lsrs	r0, r3
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	40021000 	.word	0x40021000
 80014cc:	08003d1a 	.word	0x08003d1a
 80014d0:	2000000c 	.word	0x2000000c

080014d4 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80014d4:	6803      	ldr	r3, [r0, #0]
{
 80014d6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80014da:	03df      	lsls	r7, r3, #15
{
 80014dc:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80014de:	d523      	bpl.n	8001528 <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014e0:	4d9b      	ldr	r5, [pc, #620]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80014e2:	69eb      	ldr	r3, [r5, #28]
 80014e4:	00de      	lsls	r6, r3, #3
 80014e6:	f100 80d7 	bmi.w	8001698 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ea:	69eb      	ldr	r3, [r5, #28]
 80014ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f0:	61eb      	str	r3, [r5, #28]
 80014f2:	69eb      	ldr	r3, [r5, #28]
 80014f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f8:	9301      	str	r3, [sp, #4]
 80014fa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80014fc:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fe:	4f95      	ldr	r7, [pc, #596]	; (8001754 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	05d8      	lsls	r0, r3, #23
 8001504:	f140 80ca 	bpl.w	800169c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001508:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800150a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800150e:	f040 80da 	bne.w	80016c6 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001512:	6a2b      	ldr	r3, [r5, #32]
 8001514:	6862      	ldr	r2, [r4, #4]
 8001516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800151a:	4313      	orrs	r3, r2
 800151c:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800151e:	b11e      	cbz	r6, 8001528 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001520:	69eb      	ldr	r3, [r5, #28]
 8001522:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001526:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001528:	6820      	ldr	r0, [r4, #0]
 800152a:	07c3      	lsls	r3, r0, #31
 800152c:	d506      	bpl.n	800153c <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800152e:	4a88      	ldr	r2, [pc, #544]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001530:	68a1      	ldr	r1, [r4, #8]
 8001532:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001534:	f023 0303 	bic.w	r3, r3, #3
 8001538:	430b      	orrs	r3, r1
 800153a:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800153c:	0787      	lsls	r7, r0, #30
 800153e:	d506      	bpl.n	800154e <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001540:	4a83      	ldr	r2, [pc, #524]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001542:	68e1      	ldr	r1, [r4, #12]
 8001544:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001546:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800154a:	430b      	orrs	r3, r1
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800154e:	0746      	lsls	r6, r0, #29
 8001550:	d506      	bpl.n	8001560 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001552:	4a7f      	ldr	r2, [pc, #508]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001554:	6921      	ldr	r1, [r4, #16]
 8001556:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001558:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800155c:	430b      	orrs	r3, r1
 800155e:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001560:	0685      	lsls	r5, r0, #26
 8001562:	d506      	bpl.n	8001572 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001564:	4a7a      	ldr	r2, [pc, #488]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001566:	69e1      	ldr	r1, [r4, #28]
 8001568:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800156a:	f023 0310 	bic.w	r3, r3, #16
 800156e:	430b      	orrs	r3, r1
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001572:	0381      	lsls	r1, r0, #14
 8001574:	d506      	bpl.n	8001584 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8001576:	4a76      	ldr	r2, [pc, #472]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001578:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800157a:	6853      	ldr	r3, [r2, #4]
 800157c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001580:	430b      	orrs	r3, r1
 8001582:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001584:	0642      	lsls	r2, r0, #25
 8001586:	d506      	bpl.n	8001596 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001588:	4a71      	ldr	r2, [pc, #452]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800158a:	6a21      	ldr	r1, [r4, #32]
 800158c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800158e:	f023 0320 	bic.w	r3, r3, #32
 8001592:	430b      	orrs	r3, r1
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001596:	0343      	lsls	r3, r0, #13
 8001598:	d506      	bpl.n	80015a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800159a:	4a6d      	ldr	r2, [pc, #436]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800159c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800159e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80015a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015a4:	430b      	orrs	r3, r1
 80015a6:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80015a8:	0707      	lsls	r7, r0, #28
 80015aa:	d506      	bpl.n	80015ba <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80015ac:	4a68      	ldr	r2, [pc, #416]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80015ae:	6961      	ldr	r1, [r4, #20]
 80015b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80015b2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80015b6:	430b      	orrs	r3, r1
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80015ba:	06c6      	lsls	r6, r0, #27
 80015bc:	d506      	bpl.n	80015cc <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80015be:	4a64      	ldr	r2, [pc, #400]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80015c0:	69a1      	ldr	r1, [r4, #24]
 80015c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80015c4:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80015c8:	430b      	orrs	r3, r1
 80015ca:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80015cc:	0585      	lsls	r5, r0, #22
 80015ce:	d506      	bpl.n	80015de <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80015d0:	4a5f      	ldr	r2, [pc, #380]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80015d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80015d4:	6853      	ldr	r3, [r2, #4]
 80015d6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80015da:	430b      	orrs	r3, r1
 80015dc:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80015de:	0601      	lsls	r1, r0, #24
 80015e0:	d506      	bpl.n	80015f0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80015e2:	4a5b      	ldr	r2, [pc, #364]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80015e4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80015e6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80015e8:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80015ec:	430b      	orrs	r3, r1
 80015ee:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80015f0:	05c2      	lsls	r2, r0, #23
 80015f2:	d506      	bpl.n	8001602 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80015f4:	4a56      	ldr	r2, [pc, #344]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80015f6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80015f8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80015fa:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 80015fe:	430b      	orrs	r3, r1
 8001600:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001602:	04c3      	lsls	r3, r0, #19
 8001604:	d506      	bpl.n	8001614 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001606:	4a52      	ldr	r2, [pc, #328]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001608:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800160a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800160c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001610:	430b      	orrs	r3, r1
 8001612:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8001614:	0487      	lsls	r7, r0, #18
 8001616:	d506      	bpl.n	8001626 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8001618:	4a4d      	ldr	r2, [pc, #308]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800161a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800161c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800161e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001622:	430b      	orrs	r3, r1
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8001626:	02c6      	lsls	r6, r0, #11
 8001628:	d506      	bpl.n	8001638 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800162a:	4a49      	ldr	r2, [pc, #292]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800162c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800162e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001630:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001634:	430b      	orrs	r3, r1
 8001636:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8001638:	0285      	lsls	r5, r0, #10
 800163a:	d506      	bpl.n	800164a <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800163c:	4a44      	ldr	r2, [pc, #272]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800163e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001640:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001642:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001646:	430b      	orrs	r3, r1
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800164a:	0241      	lsls	r1, r0, #9
 800164c:	d506      	bpl.n	800165c <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800164e:	4a40      	ldr	r2, [pc, #256]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001650:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001652:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001654:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001658:	430b      	orrs	r3, r1
 800165a:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800165c:	0202      	lsls	r2, r0, #8
 800165e:	d506      	bpl.n	800166e <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8001660:	4a3b      	ldr	r2, [pc, #236]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001662:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001664:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001666:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800166a:	430b      	orrs	r3, r1
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800166e:	01c3      	lsls	r3, r0, #7
 8001670:	d506      	bpl.n	8001680 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8001672:	4a37      	ldr	r2, [pc, #220]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001674:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001676:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001678:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800167c:	430b      	orrs	r3, r1
 800167e:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8001680:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8001684:	d01c      	beq.n	80016c0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8001686:	4a32      	ldr	r2, [pc, #200]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001688:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800168a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800168c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001690:	430b      	orrs	r3, r1
 8001692:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001694:	2000      	movs	r0, #0
 8001696:	e013      	b.n	80016c0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    FlagStatus       pwrclkchanged = RESET;
 8001698:	2600      	movs	r6, #0
 800169a:	e730      	b.n	80014fe <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80016a4:	f7ff fa20 	bl	8000ae8 <HAL_GetTick>
 80016a8:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	05d9      	lsls	r1, r3, #23
 80016ae:	f53f af2b 	bmi.w	8001508 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016b2:	f7ff fa19 	bl	8000ae8 <HAL_GetTick>
 80016b6:	eba0 0008 	sub.w	r0, r0, r8
 80016ba:	2864      	cmp	r0, #100	; 0x64
 80016bc:	d9f5      	bls.n	80016aa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 80016be:	2003      	movs	r0, #3
}
 80016c0:	b002      	add	sp, #8
 80016c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80016c6:	6862      	ldr	r2, [r4, #4]
 80016c8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80016cc:	4293      	cmp	r3, r2
 80016ce:	f43f af20 	beq.w	8001512 <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80016d2:	6a29      	ldr	r1, [r5, #32]
 80016d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016d8:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 80016dc:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 80016e0:	f8df e074 	ldr.w	lr, [pc, #116]	; 8001758 <HAL_RCCEx_PeriphCLKConfig+0x284>
 80016e4:	fab2 f282 	clz	r2, r2
 80016e8:	4472      	add	r2, lr
 80016ea:	0092      	lsls	r2, r2, #2
 80016ec:	2701      	movs	r7, #1
 80016ee:	6017      	str	r7, [r2, #0]
 80016f0:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80016f4:	fab3 f383 	clz	r3, r3
 80016f8:	4473      	add	r3, lr
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001700:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 8001702:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001704:	f57f af05 	bpl.w	8001512 <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 8001708:	f7ff f9ee 	bl	8000ae8 <HAL_GetTick>
 800170c:	f04f 0802 	mov.w	r8, #2
 8001710:	4682      	mov	sl, r0
 8001712:	46c1      	mov	r9, r8
 8001714:	fa98 f3a8 	rbit	r3, r8
 8001718:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800171c:	b1a3      	cbz	r3, 8001748 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800171e:	6a2a      	ldr	r2, [r5, #32]
 8001720:	fa99 f3a9 	rbit	r3, r9
 8001724:	fab3 f383 	clz	r3, r3
 8001728:	f003 031f 	and.w	r3, r3, #31
 800172c:	fa07 f303 	lsl.w	r3, r7, r3
 8001730:	4213      	tst	r3, r2
 8001732:	f47f aeee 	bne.w	8001512 <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001736:	f7ff f9d7 	bl	8000ae8 <HAL_GetTick>
 800173a:	f241 3388 	movw	r3, #5000	; 0x1388
 800173e:	eba0 000a 	sub.w	r0, r0, sl
 8001742:	4298      	cmp	r0, r3
 8001744:	d9e6      	bls.n	8001714 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8001746:	e7ba      	b.n	80016be <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8001748:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800174c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800174e:	e7e7      	b.n	8001720 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8001750:	40021000 	.word	0x40021000
 8001754:	40007000 	.word	0x40007000
 8001758:	10908100 	.word	0x10908100

0800175c <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800175c:	6803      	ldr	r3, [r0, #0]
 800175e:	68da      	ldr	r2, [r3, #12]
 8001760:	f042 0201 	orr.w	r2, r2, #1
 8001764:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	f042 0201 	orr.w	r2, r2, #1
 800176c:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 800176e:	2000      	movs	r0, #0
 8001770:	4770      	bx	lr

08001772 <HAL_TIM_Base_Stop_IT>:
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001772:	6803      	ldr	r3, [r0, #0]
 8001774:	68da      	ldr	r2, [r3, #12]
 8001776:	f022 0201 	bic.w	r2, r2, #1
 800177a:	60da      	str	r2, [r3, #12]
      
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800177c:	6a19      	ldr	r1, [r3, #32]
 800177e:	f241 1211 	movw	r2, #4369	; 0x1111
 8001782:	4211      	tst	r1, r2
 8001784:	d108      	bne.n	8001798 <HAL_TIM_Base_Stop_IT+0x26>
 8001786:	6a19      	ldr	r1, [r3, #32]
 8001788:	f240 4244 	movw	r2, #1092	; 0x444
 800178c:	4211      	tst	r1, r2
 800178e:	bf02      	ittt	eq
 8001790:	681a      	ldreq	r2, [r3, #0]
 8001792:	f022 0201 	biceq.w	r2, r2, #1
 8001796:	601a      	streq	r2, [r3, #0]
    
  /* Return function status */
  return HAL_OK;
}
 8001798:	2000      	movs	r0, #0
 800179a:	4770      	bx	lr

0800179c <HAL_TIM_OC_DelayElapsedCallback>:
 800179c:	4770      	bx	lr

0800179e <HAL_TIM_PWM_PulseFinishedCallback>:
 800179e:	4770      	bx	lr

080017a0 <HAL_TIM_TriggerCallback>:
 80017a0:	4770      	bx	lr

080017a2 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017a2:	6803      	ldr	r3, [r0, #0]
 80017a4:	691a      	ldr	r2, [r3, #16]
 80017a6:	0791      	lsls	r1, r2, #30
{
 80017a8:	b510      	push	{r4, lr}
 80017aa:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017ac:	d50f      	bpl.n	80017ce <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80017ae:	68da      	ldr	r2, [r3, #12]
 80017b0:	0792      	lsls	r2, r2, #30
 80017b2:	d50c      	bpl.n	80017ce <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80017b4:	f06f 0202 	mvn.w	r2, #2
 80017b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017ba:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017bc:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017be:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017c0:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017c2:	f000 8085 	beq.w	80018d0 <HAL_TIM_IRQHandler+0x12e>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80017c6:	f001 f935 	bl	8002a34 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017ca:	2300      	movs	r3, #0
 80017cc:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80017ce:	6823      	ldr	r3, [r4, #0]
 80017d0:	691a      	ldr	r2, [r3, #16]
 80017d2:	0752      	lsls	r2, r2, #29
 80017d4:	d510      	bpl.n	80017f8 <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80017d6:	68da      	ldr	r2, [r3, #12]
 80017d8:	0750      	lsls	r0, r2, #29
 80017da:	d50d      	bpl.n	80017f8 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80017dc:	f06f 0204 	mvn.w	r2, #4
 80017e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017e2:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017e4:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017e6:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017ea:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80017ec:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017ee:	d075      	beq.n	80018dc <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80017f0:	f001 f920 	bl	8002a34 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017f4:	2300      	movs	r3, #0
 80017f6:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80017f8:	6823      	ldr	r3, [r4, #0]
 80017fa:	691a      	ldr	r2, [r3, #16]
 80017fc:	0711      	lsls	r1, r2, #28
 80017fe:	d50f      	bpl.n	8001820 <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001800:	68da      	ldr	r2, [r3, #12]
 8001802:	0712      	lsls	r2, r2, #28
 8001804:	d50c      	bpl.n	8001820 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001806:	f06f 0208 	mvn.w	r2, #8
 800180a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800180c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800180e:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001810:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001812:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001814:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001816:	d067      	beq.n	80018e8 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001818:	f001 f90c 	bl	8002a34 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800181c:	2300      	movs	r3, #0
 800181e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001820:	6823      	ldr	r3, [r4, #0]
 8001822:	691a      	ldr	r2, [r3, #16]
 8001824:	06d0      	lsls	r0, r2, #27
 8001826:	d510      	bpl.n	800184a <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001828:	68da      	ldr	r2, [r3, #12]
 800182a:	06d1      	lsls	r1, r2, #27
 800182c:	d50d      	bpl.n	800184a <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800182e:	f06f 0210 	mvn.w	r2, #16
 8001832:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001834:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001836:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001838:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800183c:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800183e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001840:	d058      	beq.n	80018f4 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8001842:	f001 f8f7 	bl	8002a34 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001846:	2300      	movs	r3, #0
 8001848:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800184a:	6823      	ldr	r3, [r4, #0]
 800184c:	691a      	ldr	r2, [r3, #16]
 800184e:	07d2      	lsls	r2, r2, #31
 8001850:	d508      	bpl.n	8001864 <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001852:	68da      	ldr	r2, [r3, #12]
 8001854:	07d0      	lsls	r0, r2, #31
 8001856:	d505      	bpl.n	8001864 <HAL_TIM_IRQHandler+0xc2>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001858:	f06f 0201 	mvn.w	r2, #1
 800185c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800185e:	4620      	mov	r0, r4
 8001860:	f001 f9c6 	bl	8002bf0 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001864:	6823      	ldr	r3, [r4, #0]
 8001866:	691a      	ldr	r2, [r3, #16]
 8001868:	0611      	lsls	r1, r2, #24
 800186a:	d508      	bpl.n	800187e <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800186c:	68da      	ldr	r2, [r3, #12]
 800186e:	0612      	lsls	r2, r2, #24
 8001870:	d505      	bpl.n	800187e <HAL_TIM_IRQHandler+0xdc>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001872:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001876:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001878:	4620      	mov	r0, r4
 800187a:	f000 fd6a 	bl	8002352 <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800187e:	6823      	ldr	r3, [r4, #0]
 8001880:	691a      	ldr	r2, [r3, #16]
 8001882:	05d0      	lsls	r0, r2, #23
 8001884:	d508      	bpl.n	8001898 <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001886:	68da      	ldr	r2, [r3, #12]
 8001888:	0611      	lsls	r1, r2, #24
 800188a:	d505      	bpl.n	8001898 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800188c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001890:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8001892:	4620      	mov	r0, r4
 8001894:	f000 fd5e 	bl	8002354 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001898:	6823      	ldr	r3, [r4, #0]
 800189a:	691a      	ldr	r2, [r3, #16]
 800189c:	0652      	lsls	r2, r2, #25
 800189e:	d508      	bpl.n	80018b2 <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80018a0:	68da      	ldr	r2, [r3, #12]
 80018a2:	0650      	lsls	r0, r2, #25
 80018a4:	d505      	bpl.n	80018b2 <HAL_TIM_IRQHandler+0x110>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80018a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80018aa:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80018ac:	4620      	mov	r0, r4
 80018ae:	f7ff ff77 	bl	80017a0 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018b2:	6823      	ldr	r3, [r4, #0]
 80018b4:	691a      	ldr	r2, [r3, #16]
 80018b6:	0691      	lsls	r1, r2, #26
 80018b8:	d522      	bpl.n	8001900 <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80018ba:	68da      	ldr	r2, [r3, #12]
 80018bc:	0692      	lsls	r2, r2, #26
 80018be:	d51f      	bpl.n	8001900 <HAL_TIM_IRQHandler+0x15e>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80018c0:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80018c4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80018c6:	611a      	str	r2, [r3, #16]
    }
  }
}
 80018c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80018cc:	f000 bd40 	b.w	8002350 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018d0:	f7ff ff64 	bl	800179c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018d4:	4620      	mov	r0, r4
 80018d6:	f7ff ff62 	bl	800179e <HAL_TIM_PWM_PulseFinishedCallback>
 80018da:	e776      	b.n	80017ca <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018dc:	f7ff ff5e 	bl	800179c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018e0:	4620      	mov	r0, r4
 80018e2:	f7ff ff5c 	bl	800179e <HAL_TIM_PWM_PulseFinishedCallback>
 80018e6:	e785      	b.n	80017f4 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018e8:	f7ff ff58 	bl	800179c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80018ec:	4620      	mov	r0, r4
 80018ee:	f7ff ff56 	bl	800179e <HAL_TIM_PWM_PulseFinishedCallback>
 80018f2:	e793      	b.n	800181c <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018f4:	f7ff ff52 	bl	800179c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018f8:	4620      	mov	r0, r4
 80018fa:	f7ff ff50 	bl	800179e <HAL_TIM_PWM_PulseFinishedCallback>
 80018fe:	e7a2      	b.n	8001846 <HAL_TIM_IRQHandler+0xa4>
 8001900:	bd10      	pop	{r4, pc}
	...

08001904 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001904:	4a32      	ldr	r2, [pc, #200]	; (80019d0 <TIM_Base_SetConfig+0xcc>)
  tmpcr1 = TIMx->CR1;
 8001906:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001908:	4290      	cmp	r0, r2
 800190a:	d012      	beq.n	8001932 <TIM_Base_SetConfig+0x2e>
 800190c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001910:	d00f      	beq.n	8001932 <TIM_Base_SetConfig+0x2e>
 8001912:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001916:	4290      	cmp	r0, r2
 8001918:	d00b      	beq.n	8001932 <TIM_Base_SetConfig+0x2e>
 800191a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800191e:	4290      	cmp	r0, r2
 8001920:	d007      	beq.n	8001932 <TIM_Base_SetConfig+0x2e>
 8001922:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8001926:	4290      	cmp	r0, r2
 8001928:	d003      	beq.n	8001932 <TIM_Base_SetConfig+0x2e>
 800192a:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800192e:	4290      	cmp	r0, r2
 8001930:	d115      	bne.n	800195e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001932:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001938:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800193a:	4a25      	ldr	r2, [pc, #148]	; (80019d0 <TIM_Base_SetConfig+0xcc>)
 800193c:	4290      	cmp	r0, r2
 800193e:	d01d      	beq.n	800197c <TIM_Base_SetConfig+0x78>
 8001940:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001944:	d01a      	beq.n	800197c <TIM_Base_SetConfig+0x78>
 8001946:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800194a:	4290      	cmp	r0, r2
 800194c:	d016      	beq.n	800197c <TIM_Base_SetConfig+0x78>
 800194e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001952:	4290      	cmp	r0, r2
 8001954:	d012      	beq.n	800197c <TIM_Base_SetConfig+0x78>
 8001956:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800195a:	4290      	cmp	r0, r2
 800195c:	d00e      	beq.n	800197c <TIM_Base_SetConfig+0x78>
 800195e:	4a1d      	ldr	r2, [pc, #116]	; (80019d4 <TIM_Base_SetConfig+0xd0>)
 8001960:	4290      	cmp	r0, r2
 8001962:	d00b      	beq.n	800197c <TIM_Base_SetConfig+0x78>
 8001964:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001968:	4290      	cmp	r0, r2
 800196a:	d007      	beq.n	800197c <TIM_Base_SetConfig+0x78>
 800196c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001970:	4290      	cmp	r0, r2
 8001972:	d003      	beq.n	800197c <TIM_Base_SetConfig+0x78>
 8001974:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001978:	4290      	cmp	r0, r2
 800197a:	d103      	bne.n	8001984 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800197c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800197e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001982:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001984:	694a      	ldr	r2, [r1, #20]
 8001986:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800198a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800198c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800198e:	688b      	ldr	r3, [r1, #8]
 8001990:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001992:	680b      	ldr	r3, [r1, #0]
 8001994:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <TIM_Base_SetConfig+0xcc>)
 8001998:	4298      	cmp	r0, r3
 800199a:	d013      	beq.n	80019c4 <TIM_Base_SetConfig+0xc0>
 800199c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019a0:	4298      	cmp	r0, r3
 80019a2:	d00f      	beq.n	80019c4 <TIM_Base_SetConfig+0xc0>
 80019a4:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80019a8:	4298      	cmp	r0, r3
 80019aa:	d00b      	beq.n	80019c4 <TIM_Base_SetConfig+0xc0>
 80019ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019b0:	4298      	cmp	r0, r3
 80019b2:	d007      	beq.n	80019c4 <TIM_Base_SetConfig+0xc0>
 80019b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019b8:	4298      	cmp	r0, r3
 80019ba:	d003      	beq.n	80019c4 <TIM_Base_SetConfig+0xc0>
 80019bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019c0:	4298      	cmp	r0, r3
 80019c2:	d101      	bne.n	80019c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019c4:	690b      	ldr	r3, [r1, #16]
 80019c6:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80019c8:	2301      	movs	r3, #1
 80019ca:	6143      	str	r3, [r0, #20]
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40012c00 	.word	0x40012c00
 80019d4:	40014000 	.word	0x40014000

080019d8 <HAL_TIM_Base_Init>:
{ 
 80019d8:	b510      	push	{r4, lr}
  if(htim == NULL)
 80019da:	4604      	mov	r4, r0
 80019dc:	b1a0      	cbz	r0, 8001a08 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80019de:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80019e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019e6:	b91b      	cbnz	r3, 80019f0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80019e8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80019ec:	f001 fb48 	bl	8003080 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80019f0:	2302      	movs	r3, #2
 80019f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80019f6:	6820      	ldr	r0, [r4, #0]
 80019f8:	1d21      	adds	r1, r4, #4
 80019fa:	f7ff ff83 	bl	8001904 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80019fe:	2301      	movs	r3, #1
 8001a00:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001a04:	2000      	movs	r0, #0
 8001a06:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001a08:	2001      	movs	r0, #1
}
 8001a0a:	bd10      	pop	{r4, pc}

08001a0c <HAL_TIM_PWM_Init>:
{
 8001a0c:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001a0e:	4604      	mov	r4, r0
 8001a10:	b1a0      	cbz	r0, 8001a3c <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001a12:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001a16:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a1a:	b91b      	cbnz	r3, 8001a24 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001a1c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001a20:	f001 fbd6 	bl	80031d0 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001a24:	2302      	movs	r3, #2
 8001a26:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001a2a:	6820      	ldr	r0, [r4, #0]
 8001a2c:	1d21      	adds	r1, r4, #4
 8001a2e:	f7ff ff69 	bl	8001904 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001a32:	2301      	movs	r3, #1
 8001a34:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001a38:	2000      	movs	r0, #0
 8001a3a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001a3c:	2001      	movs	r0, #1
}
 8001a3e:	bd10      	pop	{r4, pc}

08001a40 <HAL_TIM_IC_Init>:
{
 8001a40:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001a42:	4604      	mov	r4, r0
 8001a44:	b1a0      	cbz	r0, 8001a70 <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001a46:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001a4a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a4e:	b91b      	cbnz	r3, 8001a58 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001a50:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8001a54:	f001 fb32 	bl	80030bc <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY; 
 8001a58:	2302      	movs	r3, #2
 8001a5a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001a5e:	6820      	ldr	r0, [r4, #0]
 8001a60:	1d21      	adds	r1, r4, #4
 8001a62:	f7ff ff4f 	bl	8001904 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001a66:	2301      	movs	r3, #1
 8001a68:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001a70:	2001      	movs	r0, #1
}
 8001a72:	bd10      	pop	{r4, pc}

08001a74 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a74:	6a03      	ldr	r3, [r0, #32]
 8001a76:	f023 0301 	bic.w	r3, r3, #1
 8001a7a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a7c:	6a03      	ldr	r3, [r0, #32]
{
 8001a7e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001a80:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001a82:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a84:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001a86:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a8a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001a8e:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001a90:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001a92:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001a96:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001a98:	4d1f      	ldr	r5, [pc, #124]	; (8001b18 <TIM_OC1_SetConfig+0xa4>)
 8001a9a:	42a8      	cmp	r0, r5
 8001a9c:	d013      	beq.n	8001ac6 <TIM_OC1_SetConfig+0x52>
 8001a9e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001aa2:	42a8      	cmp	r0, r5
 8001aa4:	d00f      	beq.n	8001ac6 <TIM_OC1_SetConfig+0x52>
 8001aa6:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001aaa:	42a8      	cmp	r0, r5
 8001aac:	d00b      	beq.n	8001ac6 <TIM_OC1_SetConfig+0x52>
 8001aae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ab2:	42a8      	cmp	r0, r5
 8001ab4:	d007      	beq.n	8001ac6 <TIM_OC1_SetConfig+0x52>
 8001ab6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001aba:	42a8      	cmp	r0, r5
 8001abc:	d003      	beq.n	8001ac6 <TIM_OC1_SetConfig+0x52>
 8001abe:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001ac2:	42a8      	cmp	r0, r5
 8001ac4:	d122      	bne.n	8001b0c <TIM_OC1_SetConfig+0x98>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001ac6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001ac8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001acc:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001ace:	4d12      	ldr	r5, [pc, #72]	; (8001b18 <TIM_OC1_SetConfig+0xa4>)
 8001ad0:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8001ad2:	f023 0304 	bic.w	r3, r3, #4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001ad6:	d013      	beq.n	8001b00 <TIM_OC1_SetConfig+0x8c>
 8001ad8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001adc:	42a8      	cmp	r0, r5
 8001ade:	d00f      	beq.n	8001b00 <TIM_OC1_SetConfig+0x8c>
 8001ae0:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001ae4:	42a8      	cmp	r0, r5
 8001ae6:	d00b      	beq.n	8001b00 <TIM_OC1_SetConfig+0x8c>
 8001ae8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001aec:	42a8      	cmp	r0, r5
 8001aee:	d007      	beq.n	8001b00 <TIM_OC1_SetConfig+0x8c>
 8001af0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001af4:	42a8      	cmp	r0, r5
 8001af6:	d003      	beq.n	8001b00 <TIM_OC1_SetConfig+0x8c>
 8001af8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001afc:	42a8      	cmp	r0, r5
 8001afe:	d105      	bne.n	8001b0c <TIM_OC1_SetConfig+0x98>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001b00:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001b04:	698e      	ldr	r6, [r1, #24]
 8001b06:	694c      	ldr	r4, [r1, #20]
 8001b08:	4334      	orrs	r4, r6
 8001b0a:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b0c:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001b0e:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001b10:	684a      	ldr	r2, [r1, #4]
 8001b12:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001b14:	6203      	str	r3, [r0, #32]
 8001b16:	bd70      	pop	{r4, r5, r6, pc}
 8001b18:	40012c00 	.word	0x40012c00

08001b1c <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b1c:	6a03      	ldr	r3, [r0, #32]
 8001b1e:	f023 0310 	bic.w	r3, r3, #16
 8001b22:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b24:	6a03      	ldr	r3, [r0, #32]
{
 8001b26:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001b28:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001b2a:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b2c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001b2e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001b32:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b36:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001b3a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001b3c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001b40:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001b44:	4d1a      	ldr	r5, [pc, #104]	; (8001bb0 <TIM_OC2_SetConfig+0x94>)
 8001b46:	42a8      	cmp	r0, r5
 8001b48:	d007      	beq.n	8001b5a <TIM_OC2_SetConfig+0x3e>
 8001b4a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001b4e:	42a8      	cmp	r0, r5
 8001b50:	d003      	beq.n	8001b5a <TIM_OC2_SetConfig+0x3e>
 8001b52:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8001b56:	42a8      	cmp	r0, r5
 8001b58:	d10d      	bne.n	8001b76 <TIM_OC2_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001b5a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001b5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001b60:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001b64:	4d12      	ldr	r5, [pc, #72]	; (8001bb0 <TIM_OC2_SetConfig+0x94>)
 8001b66:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8001b68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001b6c:	d012      	beq.n	8001b94 <TIM_OC2_SetConfig+0x78>
 8001b6e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001b72:	42a8      	cmp	r0, r5
 8001b74:	d00e      	beq.n	8001b94 <TIM_OC2_SetConfig+0x78>
 8001b76:	4d0f      	ldr	r5, [pc, #60]	; (8001bb4 <TIM_OC2_SetConfig+0x98>)
 8001b78:	42a8      	cmp	r0, r5
 8001b7a:	d00b      	beq.n	8001b94 <TIM_OC2_SetConfig+0x78>
 8001b7c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b80:	42a8      	cmp	r0, r5
 8001b82:	d007      	beq.n	8001b94 <TIM_OC2_SetConfig+0x78>
 8001b84:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b88:	42a8      	cmp	r0, r5
 8001b8a:	d003      	beq.n	8001b94 <TIM_OC2_SetConfig+0x78>
 8001b8c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001b90:	42a8      	cmp	r0, r5
 8001b92:	d106      	bne.n	8001ba2 <TIM_OC2_SetConfig+0x86>
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001b94:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001b98:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001b9a:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001b9c:	4334      	orrs	r4, r6
 8001b9e:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ba2:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001ba4:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001ba6:	684a      	ldr	r2, [r1, #4]
 8001ba8:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001baa:	6203      	str	r3, [r0, #32]
 8001bac:	bd70      	pop	{r4, r5, r6, pc}
 8001bae:	bf00      	nop
 8001bb0:	40012c00 	.word	0x40012c00
 8001bb4:	40014000 	.word	0x40014000

08001bb8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001bb8:	6a03      	ldr	r3, [r0, #32]
 8001bba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bbe:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001bc0:	6a03      	ldr	r3, [r0, #32]
{
 8001bc2:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001bc4:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001bc6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001bc8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8001bca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001bce:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001bd2:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001bd4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001bd6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001bda:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001bde:	4d1a      	ldr	r5, [pc, #104]	; (8001c48 <TIM_OC3_SetConfig+0x90>)
 8001be0:	42a8      	cmp	r0, r5
 8001be2:	d007      	beq.n	8001bf4 <TIM_OC3_SetConfig+0x3c>
 8001be4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001be8:	42a8      	cmp	r0, r5
 8001bea:	d003      	beq.n	8001bf4 <TIM_OC3_SetConfig+0x3c>
 8001bec:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8001bf0:	42a8      	cmp	r0, r5
 8001bf2:	d10d      	bne.n	8001c10 <TIM_OC3_SetConfig+0x58>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001bf4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001bf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001bfa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001bfe:	4d12      	ldr	r5, [pc, #72]	; (8001c48 <TIM_OC3_SetConfig+0x90>)
 8001c00:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8001c02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001c06:	d012      	beq.n	8001c2e <TIM_OC3_SetConfig+0x76>
 8001c08:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001c0c:	42a8      	cmp	r0, r5
 8001c0e:	d00e      	beq.n	8001c2e <TIM_OC3_SetConfig+0x76>
 8001c10:	4d0e      	ldr	r5, [pc, #56]	; (8001c4c <TIM_OC3_SetConfig+0x94>)
 8001c12:	42a8      	cmp	r0, r5
 8001c14:	d00b      	beq.n	8001c2e <TIM_OC3_SetConfig+0x76>
 8001c16:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c1a:	42a8      	cmp	r0, r5
 8001c1c:	d007      	beq.n	8001c2e <TIM_OC3_SetConfig+0x76>
 8001c1e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c22:	42a8      	cmp	r0, r5
 8001c24:	d003      	beq.n	8001c2e <TIM_OC3_SetConfig+0x76>
 8001c26:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001c2a:	42a8      	cmp	r0, r5
 8001c2c:	d106      	bne.n	8001c3c <TIM_OC3_SetConfig+0x84>

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001c2e:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001c32:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001c34:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001c36:	4334      	orrs	r4, r6
 8001c38:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c3c:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001c3e:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001c40:	684a      	ldr	r2, [r1, #4]
 8001c42:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001c44:	6203      	str	r3, [r0, #32]
 8001c46:	bd70      	pop	{r4, r5, r6, pc}
 8001c48:	40012c00 	.word	0x40012c00
 8001c4c:	40014000 	.word	0x40014000

08001c50 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001c50:	6a03      	ldr	r3, [r0, #32]
 8001c52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c56:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c58:	6a03      	ldr	r3, [r0, #32]
{
 8001c5a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001c5c:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001c5e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c60:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001c62:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001c66:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c6a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001c6e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001c70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001c74:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001c78:	4d10      	ldr	r5, [pc, #64]	; (8001cbc <TIM_OC4_SetConfig+0x6c>)
 8001c7a:	42a8      	cmp	r0, r5
 8001c7c:	d013      	beq.n	8001ca6 <TIM_OC4_SetConfig+0x56>
 8001c7e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001c82:	42a8      	cmp	r0, r5
 8001c84:	d00f      	beq.n	8001ca6 <TIM_OC4_SetConfig+0x56>
 8001c86:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001c8a:	42a8      	cmp	r0, r5
 8001c8c:	d00b      	beq.n	8001ca6 <TIM_OC4_SetConfig+0x56>
 8001c8e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c92:	42a8      	cmp	r0, r5
 8001c94:	d007      	beq.n	8001ca6 <TIM_OC4_SetConfig+0x56>
 8001c96:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c9a:	42a8      	cmp	r0, r5
 8001c9c:	d003      	beq.n	8001ca6 <TIM_OC4_SetConfig+0x56>
 8001c9e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001ca2:	42a8      	cmp	r0, r5
 8001ca4:	d104      	bne.n	8001cb0 <TIM_OC4_SetConfig+0x60>
#else
   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001ca6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001ca8:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001cac:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001cb0:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001cb2:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001cb4:	684a      	ldr	r2, [r1, #4]
 8001cb6:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001cb8:	6203      	str	r3, [r0, #32]
 8001cba:	bd30      	pop	{r4, r5, pc}
 8001cbc:	40012c00 	.word	0x40012c00

08001cc0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8001cc0:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cc2:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001cc4:	4e18      	ldr	r6, [pc, #96]	; (8001d28 <TIM_TI1_SetConfig+0x68>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cc6:	f024 0401 	bic.w	r4, r4, #1
 8001cca:	6204      	str	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001ccc:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 8001cce:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001cd0:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001cd2:	d016      	beq.n	8001d02 <TIM_TI1_SetConfig+0x42>
 8001cd4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001cd8:	d013      	beq.n	8001d02 <TIM_TI1_SetConfig+0x42>
 8001cda:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8001cde:	42b0      	cmp	r0, r6
 8001ce0:	d00f      	beq.n	8001d02 <TIM_TI1_SetConfig+0x42>
 8001ce2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001ce6:	42b0      	cmp	r0, r6
 8001ce8:	d00b      	beq.n	8001d02 <TIM_TI1_SetConfig+0x42>
 8001cea:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 8001cee:	42b0      	cmp	r0, r6
 8001cf0:	d007      	beq.n	8001d02 <TIM_TI1_SetConfig+0x42>
 8001cf2:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8001cf6:	42b0      	cmp	r0, r6
 8001cf8:	d003      	beq.n	8001d02 <TIM_TI1_SetConfig+0x42>
 8001cfa:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 8001cfe:	42b0      	cmp	r0, r6
 8001d00:	d10f      	bne.n	8001d22 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001d02:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8001d06:	4322      	orrs	r2, r4
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001d08:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d0a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001d0e:	b2db      	uxtb	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d10:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001d14:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001d18:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001d1a:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001d1c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001d1e:	6201      	str	r1, [r0, #32]
}
 8001d20:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001d22:	f044 0201 	orr.w	r2, r4, #1
 8001d26:	e7ef      	b.n	8001d08 <TIM_TI1_SetConfig+0x48>
 8001d28:	40012c00 	.word	0x40012c00

08001d2c <HAL_TIM_IC_ConfigChannel>:
{
 8001d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001d2e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001d32:	2b01      	cmp	r3, #1
{
 8001d34:	4604      	mov	r4, r0
 8001d36:	460d      	mov	r5, r1
 8001d38:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001d3c:	d019      	beq.n	8001d72 <HAL_TIM_IC_ConfigChannel+0x46>
 8001d3e:	2301      	movs	r3, #1
 8001d40:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001d44:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  if (Channel == TIM_CHANNEL_1)
 8001d48:	b9a2      	cbnz	r2, 8001d74 <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 8001d4a:	68cb      	ldr	r3, [r1, #12]
 8001d4c:	6820      	ldr	r0, [r4, #0]
 8001d4e:	c906      	ldmia	r1, {r1, r2}
 8001d50:	f7ff ffb6 	bl	8001cc0 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001d54:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001d56:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001d58:	699a      	ldr	r2, [r3, #24]
 8001d5a:	f022 020c 	bic.w	r2, r2, #12
 8001d5e:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001d60:	699a      	ldr	r2, [r3, #24]
 8001d62:	430a      	orrs	r2, r1
 8001d64:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001d66:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001d68:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001d6a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001d6e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 8001d74:	2a04      	cmp	r2, #4
 8001d76:	688e      	ldr	r6, [r1, #8]
 8001d78:	6823      	ldr	r3, [r4, #0]
 8001d7a:	68e8      	ldr	r0, [r5, #12]
 8001d7c:	c982      	ldmia	r1, {r1, r7}
 8001d7e:	d11f      	bne.n	8001dc0 <HAL_TIM_IC_ConfigChannel+0x94>
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d80:	6a1a      	ldr	r2, [r3, #32]
 8001d82:	f022 0210 	bic.w	r2, r2, #16
 8001d86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d88:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 8001d8a:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001d8c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001d90:	ea42 2207 	orr.w	r2, r2, r7, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001d94:	0300      	lsls	r0, r0, #12
 8001d96:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d98:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001d9c:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001d9e:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001da0:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001da4:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001da8:	4301      	orrs	r1, r0

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001daa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001dac:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001dae:	699a      	ldr	r2, [r3, #24]
 8001db0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001db4:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001db6:	699a      	ldr	r2, [r3, #24]
 8001db8:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8001dbc:	619e      	str	r6, [r3, #24]
 8001dbe:	e7d2      	b.n	8001d66 <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 8001dc0:	2a08      	cmp	r2, #8
{
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001dc2:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 8001dc4:	d11c      	bne.n	8001e00 <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001dc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001dcc:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8001dce:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001dd0:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr2 |= TIM_ICSelection;
 8001dd4:	433a      	orrs	r2, r7

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001dd6:	0100      	lsls	r0, r0, #4
 8001dd8:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8001dda:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001dde:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001de0:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001de2:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8001de6:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001dea:	4301      	orrs	r1, r0

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001dec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8001dee:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001df0:	69da      	ldr	r2, [r3, #28]
 8001df2:	f022 020c 	bic.w	r2, r2, #12
 8001df6:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001df8:	69da      	ldr	r2, [r3, #28]
 8001dfa:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001dfc:	61de      	str	r6, [r3, #28]
 8001dfe:	e7b2      	b.n	8001d66 <HAL_TIM_IC_ConfigChannel+0x3a>
{
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001e00:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e04:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001e06:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8001e08:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001e0a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001e0e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001e12:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001e14:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001e18:	b280      	uxth	r0, r0

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001e1a:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001e1c:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001e1e:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001e22:	f425 4220 	bic.w	r2, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001e26:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001e28:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 8001e2a:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001e2c:	69da      	ldr	r2, [r3, #28]
 8001e2e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001e32:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001e34:	69da      	ldr	r2, [r3, #28]
 8001e36:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8001e3a:	e7df      	b.n	8001dfc <HAL_TIM_IC_ConfigChannel+0xd0>

08001e3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001e3c:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8001e3e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e40:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e42:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e46:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001e4a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e4c:	6083      	str	r3, [r0, #8]
 8001e4e:	bd10      	pop	{r4, pc}

08001e50 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001e50:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001e54:	2b01      	cmp	r3, #1
{
 8001e56:	b570      	push	{r4, r5, r6, lr}
 8001e58:	4604      	mov	r4, r0
 8001e5a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001e5e:	d01a      	beq.n	8001e96 <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 8001e60:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001e64:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001e66:	2301      	movs	r3, #1
 8001e68:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001e6c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e6e:	4b52      	ldr	r3, [pc, #328]	; (8001fb8 <HAL_TIM_ConfigClockSource+0x168>)
 8001e70:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8001e72:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001e74:	680b      	ldr	r3, [r1, #0]
 8001e76:	2b40      	cmp	r3, #64	; 0x40
 8001e78:	d075      	beq.n	8001f66 <HAL_TIM_ConfigClockSource+0x116>
 8001e7a:	d818      	bhi.n	8001eae <HAL_TIM_ConfigClockSource+0x5e>
 8001e7c:	2b10      	cmp	r3, #16
 8001e7e:	f000 808f 	beq.w	8001fa0 <HAL_TIM_ConfigClockSource+0x150>
 8001e82:	d809      	bhi.n	8001e98 <HAL_TIM_ConfigClockSource+0x48>
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 8085 	beq.w	8001f94 <HAL_TIM_ConfigClockSource+0x144>
  htim->State = HAL_TIM_STATE_READY;
 8001e8a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001e8c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001e8e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001e92:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001e96:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001e98:	2b20      	cmp	r3, #32
 8001e9a:	f000 8087 	beq.w	8001fac <HAL_TIM_ConfigClockSource+0x15c>
 8001e9e:	2b30      	cmp	r3, #48	; 0x30
 8001ea0:	d1f3      	bne.n	8001e8a <HAL_TIM_ConfigClockSource+0x3a>
   tmpsmcr = TIMx->SMCR;
 8001ea2:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001ea8:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8001eac:	e033      	b.n	8001f16 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8001eae:	2b70      	cmp	r3, #112	; 0x70
 8001eb0:	d033      	beq.n	8001f1a <HAL_TIM_ConfigClockSource+0xca>
 8001eb2:	d81b      	bhi.n	8001eec <HAL_TIM_ConfigClockSource+0x9c>
 8001eb4:	2b50      	cmp	r3, #80	; 0x50
 8001eb6:	d03f      	beq.n	8001f38 <HAL_TIM_ConfigClockSource+0xe8>
 8001eb8:	2b60      	cmp	r3, #96	; 0x60
 8001eba:	d1e6      	bne.n	8001e8a <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001ebc:	684d      	ldr	r5, [r1, #4]
 8001ebe:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ec0:	6a01      	ldr	r1, [r0, #32]
 8001ec2:	f021 0110 	bic.w	r1, r1, #16
 8001ec6:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ec8:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001eca:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ecc:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001ed0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001ed4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ed8:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001edc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001ede:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001ee0:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001ee6:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001eea:	e014      	b.n	8001f16 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8001eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ef0:	d00c      	beq.n	8001f0c <HAL_TIM_ConfigClockSource+0xbc>
 8001ef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ef6:	d1c8      	bne.n	8001e8a <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8001ef8:	68cb      	ldr	r3, [r1, #12]
 8001efa:	684a      	ldr	r2, [r1, #4]
 8001efc:	6889      	ldr	r1, [r1, #8]
 8001efe:	f7ff ff9d 	bl	8001e3c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f02:	6822      	ldr	r2, [r4, #0]
 8001f04:	6893      	ldr	r3, [r2, #8]
 8001f06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f0a:	e013      	b.n	8001f34 <HAL_TIM_ConfigClockSource+0xe4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001f0c:	6883      	ldr	r3, [r0, #8]
 8001f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f12:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 8001f16:	6083      	str	r3, [r0, #8]
 8001f18:	e7b7      	b.n	8001e8a <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8001f1a:	68cb      	ldr	r3, [r1, #12]
 8001f1c:	684a      	ldr	r2, [r1, #4]
 8001f1e:	6889      	ldr	r1, [r1, #8]
 8001f20:	f7ff ff8c 	bl	8001e3c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001f24:	6822      	ldr	r2, [r4, #0]
 8001f26:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f2c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f34:	6093      	str	r3, [r2, #8]
    break;
 8001f36:	e7a8      	b.n	8001e8a <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001f38:	684a      	ldr	r2, [r1, #4]
 8001f3a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001f3c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f3e:	6a05      	ldr	r5, [r0, #32]
 8001f40:	f025 0501 	bic.w	r5, r5, #1
 8001f44:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001f46:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f48:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f50:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001f54:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001f56:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001f58:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001f5a:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001f60:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8001f64:	e7d7      	b.n	8001f16 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001f66:	684a      	ldr	r2, [r1, #4]
 8001f68:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001f6a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f6c:	6a05      	ldr	r5, [r0, #32]
 8001f6e:	f025 0501 	bic.w	r5, r5, #1
 8001f72:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001f74:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f76:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f7e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001f82:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001f84:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001f86:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001f88:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001f8e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8001f92:	e7c0      	b.n	8001f16 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001f94:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001f9a:	f043 0307 	orr.w	r3, r3, #7
 8001f9e:	e7ba      	b.n	8001f16 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001fa0:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001fa6:	f043 0317 	orr.w	r3, r3, #23
 8001faa:	e7b4      	b.n	8001f16 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001fac:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001fb2:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8001fb6:	e7ae      	b.n	8001f16 <HAL_TIM_ConfigClockSource+0xc6>
 8001fb8:	fffe0088 	.word	0xfffe0088

08001fbc <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001fbc:	6a03      	ldr	r3, [r0, #32]
{
 8001fbe:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8001fc0:	2401      	movs	r4, #1
 8001fc2:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001fc4:	ea23 0304 	bic.w	r3, r3, r4
 8001fc8:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001fca:	6a03      	ldr	r3, [r0, #32]
 8001fcc:	408a      	lsls	r2, r1
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	6202      	str	r2, [r0, #32]
 8001fd2:	bd10      	pop	{r4, pc}

08001fd4 <HAL_TIM_PWM_Start>:
{
 8001fd4:	b510      	push	{r4, lr}
 8001fd6:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001fd8:	2201      	movs	r2, #1
 8001fda:	6800      	ldr	r0, [r0, #0]
 8001fdc:	f7ff ffee 	bl	8001fbc <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8001fe0:	6823      	ldr	r3, [r4, #0]
 8001fe2:	4a10      	ldr	r2, [pc, #64]	; (8002024 <HAL_TIM_PWM_Start+0x50>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d013      	beq.n	8002010 <HAL_TIM_PWM_Start+0x3c>
 8001fe8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d00f      	beq.n	8002010 <HAL_TIM_PWM_Start+0x3c>
 8001ff0:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d00b      	beq.n	8002010 <HAL_TIM_PWM_Start+0x3c>
 8001ff8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d007      	beq.n	8002010 <HAL_TIM_PWM_Start+0x3c>
 8002000:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002004:	4293      	cmp	r3, r2
 8002006:	d003      	beq.n	8002010 <HAL_TIM_PWM_Start+0x3c>
 8002008:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800200c:	4293      	cmp	r3, r2
 800200e:	d103      	bne.n	8002018 <HAL_TIM_PWM_Start+0x44>
    __HAL_TIM_MOE_ENABLE(htim);
 8002010:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002012:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002016:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	f042 0201 	orr.w	r2, r2, #1
 800201e:	601a      	str	r2, [r3, #0]
} 
 8002020:	2000      	movs	r0, #0
 8002022:	bd10      	pop	{r4, pc}
 8002024:	40012c00 	.word	0x40012c00

08002028 <HAL_TIM_IC_Start_IT>:
{
 8002028:	b510      	push	{r4, lr}
 800202a:	4604      	mov	r4, r0
  switch (Channel)
 800202c:	290c      	cmp	r1, #12
 800202e:	d80d      	bhi.n	800204c <HAL_TIM_IC_Start_IT+0x24>
 8002030:	e8df f001 	tbb	[pc, r1]
 8002034:	0c0c0c07 	.word	0x0c0c0c07
 8002038:	0c0c0c17 	.word	0x0c0c0c17
 800203c:	0c0c0c1c 	.word	0x0c0c0c1c
 8002040:	21          	.byte	0x21
 8002041:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002042:	6802      	ldr	r2, [r0, #0]
 8002044:	68d3      	ldr	r3, [r2, #12]
 8002046:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800204a:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800204c:	6820      	ldr	r0, [r4, #0]
 800204e:	2201      	movs	r2, #1
 8002050:	f7ff ffb4 	bl	8001fbc <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);  
 8002054:	6822      	ldr	r2, [r4, #0]
 8002056:	6813      	ldr	r3, [r2, #0]
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	6013      	str	r3, [r2, #0]
} 
 800205e:	2000      	movs	r0, #0
 8002060:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002062:	6802      	ldr	r2, [r0, #0]
 8002064:	68d3      	ldr	r3, [r2, #12]
 8002066:	f043 0304 	orr.w	r3, r3, #4
 800206a:	e7ee      	b.n	800204a <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800206c:	6802      	ldr	r2, [r0, #0]
 800206e:	68d3      	ldr	r3, [r2, #12]
 8002070:	f043 0308 	orr.w	r3, r3, #8
 8002074:	e7e9      	b.n	800204a <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002076:	6802      	ldr	r2, [r0, #0]
 8002078:	68d3      	ldr	r3, [r2, #12]
 800207a:	f043 0310 	orr.w	r3, r3, #16
 800207e:	e7e4      	b.n	800204a <HAL_TIM_IC_Start_IT+0x22>

08002080 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002080:	6a03      	ldr	r3, [r0, #32]
 8002082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002086:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002088:	6a03      	ldr	r3, [r0, #32]
{
 800208a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800208c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800208e:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002090:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002092:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002096:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800209a:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800209c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 800209e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80020a2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80020a6:	4d11      	ldr	r5, [pc, #68]	; (80020ec <TIM_OC5_SetConfig+0x6c>)
 80020a8:	42a8      	cmp	r0, r5
 80020aa:	d013      	beq.n	80020d4 <TIM_OC5_SetConfig+0x54>
 80020ac:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80020b0:	42a8      	cmp	r0, r5
 80020b2:	d00f      	beq.n	80020d4 <TIM_OC5_SetConfig+0x54>
 80020b4:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80020b8:	42a8      	cmp	r0, r5
 80020ba:	d00b      	beq.n	80020d4 <TIM_OC5_SetConfig+0x54>
 80020bc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80020c0:	42a8      	cmp	r0, r5
 80020c2:	d007      	beq.n	80020d4 <TIM_OC5_SetConfig+0x54>
 80020c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80020c8:	42a8      	cmp	r0, r5
 80020ca:	d003      	beq.n	80020d4 <TIM_OC5_SetConfig+0x54>
 80020cc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80020d0:	42a8      	cmp	r0, r5
 80020d2:	d104      	bne.n	80020de <TIM_OC5_SetConfig+0x5e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80020d4:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 80020d6:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80020da:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020de:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80020e0:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80020e2:	684a      	ldr	r2, [r1, #4]
 80020e4:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80020e6:	6203      	str	r3, [r0, #32]
 80020e8:	bd30      	pop	{r4, r5, pc}
 80020ea:	bf00      	nop
 80020ec:	40012c00 	.word	0x40012c00

080020f0 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80020f0:	6a03      	ldr	r3, [r0, #32]
 80020f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80020f6:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020f8:	6a03      	ldr	r3, [r0, #32]
{
 80020fa:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80020fc:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80020fe:	6d42      	ldr	r2, [r0, #84]	; 0x54
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002100:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002102:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002106:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800210a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800210e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002110:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002114:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002118:	4d10      	ldr	r5, [pc, #64]	; (800215c <TIM_OC6_SetConfig+0x6c>)
 800211a:	42a8      	cmp	r0, r5
 800211c:	d013      	beq.n	8002146 <TIM_OC6_SetConfig+0x56>
 800211e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002122:	42a8      	cmp	r0, r5
 8002124:	d00f      	beq.n	8002146 <TIM_OC6_SetConfig+0x56>
 8002126:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800212a:	42a8      	cmp	r0, r5
 800212c:	d00b      	beq.n	8002146 <TIM_OC6_SetConfig+0x56>
 800212e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002132:	42a8      	cmp	r0, r5
 8002134:	d007      	beq.n	8002146 <TIM_OC6_SetConfig+0x56>
 8002136:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800213a:	42a8      	cmp	r0, r5
 800213c:	d003      	beq.n	8002146 <TIM_OC6_SetConfig+0x56>
 800213e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002142:	42a8      	cmp	r0, r5
 8002144:	d104      	bne.n	8002150 <TIM_OC6_SetConfig+0x60>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002146:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002148:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800214c:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002150:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002152:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002154:	684a      	ldr	r2, [r1, #4]
 8002156:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002158:	6203      	str	r3, [r0, #32]
 800215a:	bd30      	pop	{r4, r5, pc}
 800215c:	40012c00 	.word	0x40012c00

08002160 <HAL_TIM_PWM_ConfigChannel>:
{
 8002160:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002162:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002166:	2b01      	cmp	r3, #1
{
 8002168:	4604      	mov	r4, r0
 800216a:	460d      	mov	r5, r1
 800216c:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002170:	d010      	beq.n	8002194 <HAL_TIM_PWM_ConfigChannel+0x34>
 8002172:	2301      	movs	r3, #1
  switch (Channel)
 8002174:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8002176:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800217a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 800217e:	d043      	beq.n	8002208 <HAL_TIM_PWM_ConfigChannel+0xa8>
 8002180:	d809      	bhi.n	8002196 <HAL_TIM_PWM_ConfigChannel+0x36>
 8002182:	b1fa      	cbz	r2, 80021c4 <HAL_TIM_PWM_ConfigChannel+0x64>
 8002184:	2a04      	cmp	r2, #4
 8002186:	d02e      	beq.n	80021e6 <HAL_TIM_PWM_ConfigChannel+0x86>
  htim->State = HAL_TIM_STATE_READY;
 8002188:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800218a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800218c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002190:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002194:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8002196:	2a10      	cmp	r2, #16
 8002198:	d047      	beq.n	800222a <HAL_TIM_PWM_ConfigChannel+0xca>
 800219a:	2a14      	cmp	r2, #20
 800219c:	d056      	beq.n	800224c <HAL_TIM_PWM_ConfigChannel+0xec>
 800219e:	2a0c      	cmp	r2, #12
 80021a0:	d1f2      	bne.n	8002188 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80021a2:	6820      	ldr	r0, [r4, #0]
 80021a4:	f7ff fd54 	bl	8001c50 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021a8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80021aa:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021ac:	69da      	ldr	r2, [r3, #28]
 80021ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021b2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80021b4:	69da      	ldr	r2, [r3, #28]
 80021b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80021bc:	69da      	ldr	r2, [r3, #28]
 80021be:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80021c2:	e030      	b.n	8002226 <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021c4:	6820      	ldr	r0, [r4, #0]
 80021c6:	f7ff fc55 	bl	8001a74 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021ca:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80021cc:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021ce:	699a      	ldr	r2, [r3, #24]
 80021d0:	f042 0208 	orr.w	r2, r2, #8
 80021d4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80021d6:	699a      	ldr	r2, [r3, #24]
 80021d8:	f022 0204 	bic.w	r2, r2, #4
 80021dc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80021de:	699a      	ldr	r2, [r3, #24]
 80021e0:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021e2:	619a      	str	r2, [r3, #24]
    break;
 80021e4:	e7d0      	b.n	8002188 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021e6:	6820      	ldr	r0, [r4, #0]
 80021e8:	f7ff fc98 	bl	8001b1c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021ec:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021ee:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021f0:	699a      	ldr	r2, [r3, #24]
 80021f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021f8:	699a      	ldr	r2, [r3, #24]
 80021fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002200:	699a      	ldr	r2, [r3, #24]
 8002202:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002206:	e7ec      	b.n	80021e2 <HAL_TIM_PWM_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002208:	6820      	ldr	r0, [r4, #0]
 800220a:	f7ff fcd5 	bl	8001bb8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800220e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002210:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002212:	69da      	ldr	r2, [r3, #28]
 8002214:	f042 0208 	orr.w	r2, r2, #8
 8002218:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800221a:	69da      	ldr	r2, [r3, #28]
 800221c:	f022 0204 	bic.w	r2, r2, #4
 8002220:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002222:	69da      	ldr	r2, [r3, #28]
 8002224:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002226:	61da      	str	r2, [r3, #28]
    break;
 8002228:	e7ae      	b.n	8002188 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800222a:	6820      	ldr	r0, [r4, #0]
 800222c:	f7ff ff28 	bl	8002080 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002230:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8002232:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002234:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002236:	f042 0208 	orr.w	r2, r2, #8
 800223a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800223c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800223e:	f022 0204 	bic.w	r2, r2, #4
 8002242:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8002244:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002246:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8002248:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 800224a:	e79d      	b.n	8002188 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800224c:	6820      	ldr	r0, [r4, #0]
 800224e:	f7ff ff4f 	bl	80020f0 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002252:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8002254:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002256:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002258:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800225c:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800225e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002260:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002264:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8002266:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002268:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800226c:	e7ec      	b.n	8002248 <HAL_TIM_PWM_ConfigChannel+0xe8>
	...

08002270 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8002270:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002274:	2b01      	cmp	r3, #1
{
 8002276:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8002278:	d020      	beq.n	80022bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  tmpcr2 = htim->Instance->CR2;
 800227a:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800227c:	4d10      	ldr	r5, [pc, #64]	; (80022c0 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
  tmpcr2 = htim->Instance->CR2;
 800227e:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002280:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002282:	42aa      	cmp	r2, r5
 8002284:	d007      	beq.n	8002296 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8002286:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800228a:	42aa      	cmp	r2, r5
 800228c:	d003      	beq.n	8002296 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 800228e:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8002292:	42aa      	cmp	r2, r5
 8002294:	d103      	bne.n	800229e <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002296:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002298:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800229c:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800229e:	680d      	ldr	r5, [r1, #0]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022a0:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80022a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022a6:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 80022a8:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  htim->Instance->CR2 = tmpcr2;
 80022ac:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022ae:	4321      	orrs	r1, r4
  __HAL_UNLOCK(htim);
 80022b0:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 80022b2:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 80022b4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80022b8:	4618      	mov	r0, r3
 80022ba:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80022bc:	2002      	movs	r0, #2
} 
 80022be:	bd30      	pop	{r4, r5, pc}
 80022c0:	40012c00 	.word	0x40012c00

080022c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 80022c4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80022c8:	2b01      	cmp	r3, #1
{
 80022ca:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80022cc:	d03c      	beq.n	8002348 <HAL_TIMEx_ConfigBreakDeadTime+0x84>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80022ce:	68cb      	ldr	r3, [r1, #12]
 80022d0:	688a      	ldr	r2, [r1, #8]
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80022d2:	4c1e      	ldr	r4, [pc, #120]	; (800234c <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80022d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022d8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80022da:	684a      	ldr	r2, [r1, #4]
 80022dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022e0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80022e2:	680a      	ldr	r2, [r1, #0]
 80022e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022e8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80022ea:	690a      	ldr	r2, [r1, #16]
 80022ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022f0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80022f2:	694a      	ldr	r2, [r1, #20]
 80022f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022f8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80022fa:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80022fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002300:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8002302:	698a      	ldr	r2, [r1, #24]
 8002304:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002308:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800230c:	6802      	ldr	r2, [r0, #0]
 800230e:	42a2      	cmp	r2, r4
 8002310:	d007      	beq.n	8002322 <HAL_TIMEx_ConfigBreakDeadTime+0x5e>
 8002312:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8002316:	42a2      	cmp	r2, r4
 8002318:	d003      	beq.n	8002322 <HAL_TIMEx_ConfigBreakDeadTime+0x5e>
 800231a:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 800231e:	42a2      	cmp	r2, r4
 8002320:	d10c      	bne.n	800233c <HAL_TIMEx_ConfigBreakDeadTime+0x78>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8002322:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8002324:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002328:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800232c:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800232e:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002330:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002334:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002336:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800233a:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 800233c:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 800233e:	2300      	movs	r3, #0
 8002340:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8002344:	4618      	mov	r0, r3
 8002346:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8002348:	2002      	movs	r0, #2
}
 800234a:	bd10      	pop	{r4, pc}
 800234c:	40012c00 	.word	0x40012c00

08002350 <HAL_TIMEx_CommutationCallback>:
 8002350:	4770      	bx	lr

08002352 <HAL_TIMEx_BreakCallback>:
 8002352:	4770      	bx	lr

08002354 <HAL_TIMEx_Break2Callback>:
{
 8002354:	4770      	bx	lr

08002356 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002356:	6803      	ldr	r3, [r0, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800235e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	f022 0201 	bic.w	r2, r2, #1
 8002366:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002368:	2320      	movs	r3, #32
 800236a:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 800236e:	4770      	bx	lr

08002370 <HAL_UART_TxCpltCallback>:
 8002370:	4770      	bx	lr

08002372 <HAL_UART_RxCpltCallback>:
 8002372:	4770      	bx	lr

08002374 <HAL_UART_ErrorCallback>:
 8002374:	4770      	bx	lr

08002376 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002376:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002378:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 800237a:	2300      	movs	r3, #0
 800237c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002380:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8002384:	f7ff fff6 	bl	8002374 <HAL_UART_ErrorCallback>
 8002388:	bd08      	pop	{r3, pc}
	...

0800238c <UART_SetConfig>:
{
 800238c:	b538      	push	{r3, r4, r5, lr}
 800238e:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002390:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002392:	6921      	ldr	r1, [r4, #16]
 8002394:	68a2      	ldr	r2, [r4, #8]
 8002396:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002398:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800239a:	430a      	orrs	r2, r1
 800239c:	6961      	ldr	r1, [r4, #20]
 800239e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80023a0:	4977      	ldr	r1, [pc, #476]	; (8002580 <UART_SetConfig+0x1f4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023a2:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80023a4:	4001      	ands	r1, r0
 80023a6:	430a      	orrs	r2, r1
 80023a8:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023aa:	686a      	ldr	r2, [r5, #4]
 80023ac:	68e1      	ldr	r1, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80023ae:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023b0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80023b4:	430a      	orrs	r2, r1
 80023b6:	606a      	str	r2, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80023b8:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80023ba:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80023bc:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80023c0:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80023c2:	430a      	orrs	r2, r1
 80023c4:	60aa      	str	r2, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023c6:	4a6f      	ldr	r2, [pc, #444]	; (8002584 <UART_SetConfig+0x1f8>)
 80023c8:	4295      	cmp	r5, r2
 80023ca:	d112      	bne.n	80023f2 <UART_SetConfig+0x66>
 80023cc:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 80023d0:	496d      	ldr	r1, [pc, #436]	; (8002588 <UART_SetConfig+0x1fc>)
 80023d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023d4:	f002 0203 	and.w	r2, r2, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023dc:	5c8a      	ldrb	r2, [r1, r2]
 80023de:	d066      	beq.n	80024ae <UART_SetConfig+0x122>
    switch (clocksource)
 80023e0:	2a08      	cmp	r2, #8
 80023e2:	d819      	bhi.n	8002418 <UART_SetConfig+0x8c>
 80023e4:	e8df f002 	tbb	[pc, r2]
 80023e8:	189e92c2 	.word	0x189e92c2
 80023ec:	181818a9 	.word	0x181818a9
 80023f0:	ac          	.byte	0xac
 80023f1:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023f2:	4a66      	ldr	r2, [pc, #408]	; (800258c <UART_SetConfig+0x200>)
 80023f4:	4295      	cmp	r5, r2
 80023f6:	d124      	bne.n	8002442 <UART_SetConfig+0xb6>
 80023f8:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 80023fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023fe:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8002402:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002406:	f000 80a0 	beq.w	800254a <UART_SetConfig+0x1be>
 800240a:	d807      	bhi.n	800241c <UART_SetConfig+0x90>
 800240c:	2a00      	cmp	r2, #0
 800240e:	f000 80aa 	beq.w	8002566 <UART_SetConfig+0x1da>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002412:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002416:	d076      	beq.n	8002506 <UART_SetConfig+0x17a>
        ret = HAL_ERROR;
 8002418:	2001      	movs	r0, #1
  return ret;
 800241a:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800241c:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8002420:	f000 8099 	beq.w	8002556 <UART_SetConfig+0x1ca>
 8002424:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8002428:	d1f3      	bne.n	8002412 <UART_SetConfig+0x86>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800242a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800242e:	d179      	bne.n	8002524 <UART_SetConfig+0x198>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002430:	6860      	ldr	r0, [r4, #4]
 8002432:	0843      	lsrs	r3, r0, #1
 8002434:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002438:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800243c:	fbb3 f3f0 	udiv	r3, r3, r0
 8002440:	e054      	b.n	80024ec <UART_SetConfig+0x160>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002442:	4a53      	ldr	r2, [pc, #332]	; (8002590 <UART_SetConfig+0x204>)
 8002444:	4295      	cmp	r5, r2
 8002446:	d10e      	bne.n	8002466 <UART_SetConfig+0xda>
 8002448:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 800244c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800244e:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8002452:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8002456:	d078      	beq.n	800254a <UART_SetConfig+0x1be>
 8002458:	d9d8      	bls.n	800240c <UART_SetConfig+0x80>
 800245a:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 800245e:	d07a      	beq.n	8002556 <UART_SetConfig+0x1ca>
 8002460:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 8002464:	e7e0      	b.n	8002428 <UART_SetConfig+0x9c>
 8002466:	4a4b      	ldr	r2, [pc, #300]	; (8002594 <UART_SetConfig+0x208>)
 8002468:	4295      	cmp	r5, r2
 800246a:	d10e      	bne.n	800248a <UART_SetConfig+0xfe>
 800246c:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8002470:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002472:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8002476:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800247a:	d066      	beq.n	800254a <UART_SetConfig+0x1be>
 800247c:	d9c6      	bls.n	800240c <UART_SetConfig+0x80>
 800247e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8002482:	d068      	beq.n	8002556 <UART_SetConfig+0x1ca>
 8002484:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8002488:	e7ce      	b.n	8002428 <UART_SetConfig+0x9c>
 800248a:	4a43      	ldr	r2, [pc, #268]	; (8002598 <UART_SetConfig+0x20c>)
 800248c:	4295      	cmp	r5, r2
 800248e:	d1c0      	bne.n	8002412 <UART_SetConfig+0x86>
 8002490:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8002494:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002496:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 800249a:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800249e:	d054      	beq.n	800254a <UART_SetConfig+0x1be>
 80024a0:	d9b4      	bls.n	800240c <UART_SetConfig+0x80>
 80024a2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80024a6:	d056      	beq.n	8002556 <UART_SetConfig+0x1ca>
 80024a8:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 80024ac:	e7bc      	b.n	8002428 <UART_SetConfig+0x9c>
    switch (clocksource)
 80024ae:	2a08      	cmp	r2, #8
 80024b0:	d829      	bhi.n	8002506 <UART_SetConfig+0x17a>
 80024b2:	a301      	add	r3, pc, #4	; (adr r3, 80024b8 <UART_SetConfig+0x12c>)
 80024b4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80024b8:	080024dd 	.word	0x080024dd
 80024bc:	08002501 	.word	0x08002501
 80024c0:	08002431 	.word	0x08002431
 80024c4:	08002507 	.word	0x08002507
 80024c8:	08002551 	.word	0x08002551
 80024cc:	08002507 	.word	0x08002507
 80024d0:	08002507 	.word	0x08002507
 80024d4:	08002507 	.word	0x08002507
 80024d8:	0800255d 	.word	0x0800255d
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80024dc:	f7fe ffca 	bl	8001474 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80024e0:	6861      	ldr	r1, [r4, #4]
 80024e2:	084a      	lsrs	r2, r1, #1
 80024e4:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80024e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ec:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80024ee:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 80024f0:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 80024f4:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80024f6:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 80024fa:	4313      	orrs	r3, r2
 80024fc:	60cb      	str	r3, [r1, #12]
 80024fe:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002500:	f7fe ffd0 	bl	80014a4 <HAL_RCC_GetPCLK2Freq>
 8002504:	e7ec      	b.n	80024e0 <UART_SetConfig+0x154>
        ret = HAL_ERROR;
 8002506:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8002508:	2300      	movs	r3, #0
 800250a:	e7f1      	b.n	80024f0 <UART_SetConfig+0x164>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800250c:	f7fe ffca 	bl	80014a4 <HAL_RCC_GetPCLK2Freq>
 8002510:	6863      	ldr	r3, [r4, #4]
 8002512:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002516:	fbb0 f0f3 	udiv	r0, r0, r3
 800251a:	4b1a      	ldr	r3, [pc, #104]	; (8002584 <UART_SetConfig+0x1f8>)
 800251c:	b280      	uxth	r0, r0
 800251e:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002520:	2000      	movs	r0, #0
        break;
 8002522:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002524:	6862      	ldr	r2, [r4, #4]
 8002526:	0853      	lsrs	r3, r2, #1
 8002528:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800252c:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002530:	fbb3 f3f2 	udiv	r3, r3, r2
 8002534:	b29b      	uxth	r3, r3
 8002536:	60eb      	str	r3, [r5, #12]
 8002538:	e7f2      	b.n	8002520 <UART_SetConfig+0x194>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800253a:	f7fe fec5 	bl	80012c8 <HAL_RCC_GetSysClockFreq>
 800253e:	e017      	b.n	8002570 <UART_SetConfig+0x1e4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002540:	6862      	ldr	r2, [r4, #4]
 8002542:	0853      	lsrs	r3, r2, #1
 8002544:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002548:	e7f2      	b.n	8002530 <UART_SetConfig+0x1a4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800254a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800254e:	d1f4      	bne.n	800253a <UART_SetConfig+0x1ae>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002550:	f7fe feba 	bl	80012c8 <HAL_RCC_GetSysClockFreq>
 8002554:	e7c4      	b.n	80024e0 <UART_SetConfig+0x154>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002556:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800255a:	d1f1      	bne.n	8002540 <UART_SetConfig+0x1b4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800255c:	6860      	ldr	r0, [r4, #4]
 800255e:	0843      	lsrs	r3, r0, #1
 8002560:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002564:	e76a      	b.n	800243c <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800256a:	d0b7      	beq.n	80024dc <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800256c:	f7fe ff82 	bl	8001474 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002570:	6863      	ldr	r3, [r4, #4]
 8002572:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002576:	fbb0 f0f3 	udiv	r0, r0, r3
 800257a:	b280      	uxth	r0, r0
 800257c:	60e8      	str	r0, [r5, #12]
 800257e:	e7cf      	b.n	8002520 <UART_SetConfig+0x194>
 8002580:	efff69f3 	.word	0xefff69f3
 8002584:	40013800 	.word	0x40013800
 8002588:	08003cfc 	.word	0x08003cfc
 800258c:	40004400 	.word	0x40004400
 8002590:	40004800 	.word	0x40004800
 8002594:	40004c00 	.word	0x40004c00
 8002598:	40005000 	.word	0x40005000

0800259c <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800259c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800259e:	07da      	lsls	r2, r3, #31
{
 80025a0:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80025a2:	d506      	bpl.n	80025b2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80025a4:	6801      	ldr	r1, [r0, #0]
 80025a6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80025a8:	684a      	ldr	r2, [r1, #4]
 80025aa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80025ae:	4322      	orrs	r2, r4
 80025b0:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80025b2:	079c      	lsls	r4, r3, #30
 80025b4:	d506      	bpl.n	80025c4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80025b6:	6801      	ldr	r1, [r0, #0]
 80025b8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80025ba:	684a      	ldr	r2, [r1, #4]
 80025bc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80025c0:	4322      	orrs	r2, r4
 80025c2:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80025c4:	0759      	lsls	r1, r3, #29
 80025c6:	d506      	bpl.n	80025d6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80025c8:	6801      	ldr	r1, [r0, #0]
 80025ca:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80025cc:	684a      	ldr	r2, [r1, #4]
 80025ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025d2:	4322      	orrs	r2, r4
 80025d4:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80025d6:	071a      	lsls	r2, r3, #28
 80025d8:	d506      	bpl.n	80025e8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80025da:	6801      	ldr	r1, [r0, #0]
 80025dc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80025de:	684a      	ldr	r2, [r1, #4]
 80025e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025e4:	4322      	orrs	r2, r4
 80025e6:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80025e8:	06dc      	lsls	r4, r3, #27
 80025ea:	d506      	bpl.n	80025fa <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80025ec:	6801      	ldr	r1, [r0, #0]
 80025ee:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80025f0:	688a      	ldr	r2, [r1, #8]
 80025f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80025f6:	4322      	orrs	r2, r4
 80025f8:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80025fa:	0699      	lsls	r1, r3, #26
 80025fc:	d506      	bpl.n	800260c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80025fe:	6801      	ldr	r1, [r0, #0]
 8002600:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002602:	688a      	ldr	r2, [r1, #8]
 8002604:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002608:	4322      	orrs	r2, r4
 800260a:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800260c:	065a      	lsls	r2, r3, #25
 800260e:	d50f      	bpl.n	8002630 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002610:	6801      	ldr	r1, [r0, #0]
 8002612:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002614:	684a      	ldr	r2, [r1, #4]
 8002616:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800261a:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800261c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002620:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002622:	d105      	bne.n	8002630 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002624:	684a      	ldr	r2, [r1, #4]
 8002626:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002628:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800262c:	4322      	orrs	r2, r4
 800262e:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002630:	061b      	lsls	r3, r3, #24
 8002632:	d506      	bpl.n	8002642 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002634:	6802      	ldr	r2, [r0, #0]
 8002636:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002638:	6853      	ldr	r3, [r2, #4]
 800263a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800263e:	430b      	orrs	r3, r1
 8002640:	6053      	str	r3, [r2, #4]
 8002642:	bd10      	pop	{r4, pc}

08002644 <UART_WaitOnFlagUntilTimeout>:
{
 8002644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002648:	9d06      	ldr	r5, [sp, #24]
 800264a:	4604      	mov	r4, r0
 800264c:	460f      	mov	r7, r1
 800264e:	4616      	mov	r6, r2
 8002650:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002652:	6821      	ldr	r1, [r4, #0]
 8002654:	69ca      	ldr	r2, [r1, #28]
 8002656:	ea37 0302 	bics.w	r3, r7, r2
 800265a:	bf0c      	ite	eq
 800265c:	2201      	moveq	r2, #1
 800265e:	2200      	movne	r2, #0
 8002660:	42b2      	cmp	r2, r6
 8002662:	d002      	beq.n	800266a <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8002664:	2000      	movs	r0, #0
}
 8002666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 800266a:	1c6b      	adds	r3, r5, #1
 800266c:	d0f2      	beq.n	8002654 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800266e:	b99d      	cbnz	r5, 8002698 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002670:	6823      	ldr	r3, [r4, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002678:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	f022 0201 	bic.w	r2, r2, #1
 8002680:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8002682:	2320      	movs	r3, #32
 8002684:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002688:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 800268c:	2300      	movs	r3, #0
 800268e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8002692:	2003      	movs	r0, #3
 8002694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002698:	f7fe fa26 	bl	8000ae8 <HAL_GetTick>
 800269c:	eba0 0008 	sub.w	r0, r0, r8
 80026a0:	4285      	cmp	r5, r0
 80026a2:	d2d6      	bcs.n	8002652 <UART_WaitOnFlagUntilTimeout+0xe>
 80026a4:	e7e4      	b.n	8002670 <UART_WaitOnFlagUntilTimeout+0x2c>

080026a6 <HAL_UART_Transmit>:
{
 80026a6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80026aa:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80026ac:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80026b0:	2b20      	cmp	r3, #32
{
 80026b2:	4604      	mov	r4, r0
 80026b4:	460d      	mov	r5, r1
 80026b6:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80026b8:	d14c      	bne.n	8002754 <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 80026ba:	2900      	cmp	r1, #0
 80026bc:	d048      	beq.n	8002750 <HAL_UART_Transmit+0xaa>
 80026be:	2a00      	cmp	r2, #0
 80026c0:	d046      	beq.n	8002750 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 80026c2:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d044      	beq.n	8002754 <HAL_UART_Transmit+0xae>
 80026ca:	2301      	movs	r3, #1
 80026cc:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026d0:	2300      	movs	r3, #0
 80026d2:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026d4:	2321      	movs	r3, #33	; 0x21
 80026d6:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 80026da:	f7fe fa05 	bl	8000ae8 <HAL_GetTick>
    huart->TxXferSize = Size;
 80026de:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 80026e2:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80026e4:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80026e8:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80026ec:	b292      	uxth	r2, r2
 80026ee:	b962      	cbnz	r2, 800270a <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026f0:	9700      	str	r7, [sp, #0]
 80026f2:	4633      	mov	r3, r6
 80026f4:	2140      	movs	r1, #64	; 0x40
 80026f6:	4620      	mov	r0, r4
 80026f8:	f7ff ffa4 	bl	8002644 <UART_WaitOnFlagUntilTimeout>
 80026fc:	b998      	cbnz	r0, 8002726 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 80026fe:	2320      	movs	r3, #32
 8002700:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8002704:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 8002708:	e00e      	b.n	8002728 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 800270a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800270e:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 8002710:	3b01      	subs	r3, #1
 8002712:	b29b      	uxth	r3, r3
 8002714:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002718:	2200      	movs	r2, #0
 800271a:	4633      	mov	r3, r6
 800271c:	2180      	movs	r1, #128	; 0x80
 800271e:	4620      	mov	r0, r4
 8002720:	f7ff ff90 	bl	8002644 <UART_WaitOnFlagUntilTimeout>
 8002724:	b118      	cbz	r0, 800272e <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 8002726:	2003      	movs	r0, #3
}
 8002728:	b002      	add	sp, #8
 800272a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800272e:	68a3      	ldr	r3, [r4, #8]
 8002730:	6822      	ldr	r2, [r4, #0]
 8002732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002736:	d107      	bne.n	8002748 <HAL_UART_Transmit+0xa2>
 8002738:	6923      	ldr	r3, [r4, #16]
 800273a:	b92b      	cbnz	r3, 8002748 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800273c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002744:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 8002746:	e7cf      	b.n	80026e8 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002748:	782b      	ldrb	r3, [r5, #0]
 800274a:	8513      	strh	r3, [r2, #40]	; 0x28
 800274c:	3501      	adds	r5, #1
 800274e:	e7cb      	b.n	80026e8 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8002750:	2001      	movs	r0, #1
 8002752:	e7e9      	b.n	8002728 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8002754:	2002      	movs	r0, #2
 8002756:	e7e7      	b.n	8002728 <HAL_UART_Transmit+0x82>

08002758 <UART_CheckIdleState>:
{
 8002758:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800275a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800275c:	2600      	movs	r6, #0
 800275e:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8002760:	f7fe f9c2 	bl	8000ae8 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002764:	6823      	ldr	r3, [r4, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800276a:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800276c:	d417      	bmi.n	800279e <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800276e:	6823      	ldr	r3, [r4, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	075b      	lsls	r3, r3, #29
 8002774:	d50a      	bpl.n	800278c <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002776:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	2200      	movs	r2, #0
 800277e:	462b      	mov	r3, r5
 8002780:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002784:	4620      	mov	r0, r4
 8002786:	f7ff ff5d 	bl	8002644 <UART_WaitOnFlagUntilTimeout>
 800278a:	b9a0      	cbnz	r0, 80027b6 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 800278c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800278e:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8002790:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8002794:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8002798:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 800279c:	e00c      	b.n	80027b8 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800279e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	4632      	mov	r2, r6
 80027a6:	4603      	mov	r3, r0
 80027a8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80027ac:	4620      	mov	r0, r4
 80027ae:	f7ff ff49 	bl	8002644 <UART_WaitOnFlagUntilTimeout>
 80027b2:	2800      	cmp	r0, #0
 80027b4:	d0db      	beq.n	800276e <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80027b6:	2003      	movs	r0, #3
}
 80027b8:	b002      	add	sp, #8
 80027ba:	bd70      	pop	{r4, r5, r6, pc}

080027bc <HAL_UART_Init>:
{
 80027bc:	b510      	push	{r4, lr}
  if(huart == NULL)
 80027be:	4604      	mov	r4, r0
 80027c0:	b360      	cbz	r0, 800281c <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 80027c2:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80027c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80027ca:	b91b      	cbnz	r3, 80027d4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80027cc:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 80027d0:	f000 fd50 	bl	8003274 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80027d4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80027d6:	2324      	movs	r3, #36	; 0x24
 80027d8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80027dc:	6813      	ldr	r3, [r2, #0]
 80027de:	f023 0301 	bic.w	r3, r3, #1
 80027e2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027e4:	4620      	mov	r0, r4
 80027e6:	f7ff fdd1 	bl	800238c <UART_SetConfig>
 80027ea:	2801      	cmp	r0, #1
 80027ec:	d016      	beq.n	800281c <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027f0:	b113      	cbz	r3, 80027f8 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80027f2:	4620      	mov	r0, r4
 80027f4:	f7ff fed2 	bl	800259c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027f8:	6823      	ldr	r3, [r4, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002800:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002808:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002810:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002812:	601a      	str	r2, [r3, #0]
}
 8002814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002818:	f7ff bf9e 	b.w	8002758 <UART_CheckIdleState>
}
 800281c:	2001      	movs	r0, #1
 800281e:	bd10      	pop	{r4, pc}

08002820 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002820:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002824:	2b21      	cmp	r3, #33	; 0x21
 8002826:	d127      	bne.n	8002878 <UART_Transmit_IT+0x58>
  {
    if(huart->TxXferCount == 0U)
 8002828:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800282c:	6802      	ldr	r2, [r0, #0]
 800282e:	b29b      	uxth	r3, r3
 8002830:	b94b      	cbnz	r3, 8002846 <UART_Transmit_IT+0x26>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002832:	6811      	ldr	r1, [r2, #0]
 8002834:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8002838:	6011      	str	r1, [r2, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800283a:	6811      	ldr	r1, [r2, #0]
 800283c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002840:	6011      	str	r1, [r2, #0]
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
      }
      huart->TxXferCount--;

      return HAL_OK;
 8002842:	2000      	movs	r0, #0
 8002844:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002846:	6883      	ldr	r3, [r0, #8]
 8002848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800284c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800284e:	d10e      	bne.n	800286e <UART_Transmit_IT+0x4e>
 8002850:	6901      	ldr	r1, [r0, #16]
 8002852:	b961      	cbnz	r1, 800286e <UART_Transmit_IT+0x4e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002854:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002858:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800285c:	8511      	strh	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800285e:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8002860:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002864:	3b01      	subs	r3, #1
 8002866:	b29b      	uxth	r3, r3
 8002868:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 800286c:	e7e9      	b.n	8002842 <UART_Transmit_IT+0x22>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 800286e:	1c59      	adds	r1, r3, #1
 8002870:	64c1      	str	r1, [r0, #76]	; 0x4c
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	8513      	strh	r3, [r2, #40]	; 0x28
 8002876:	e7f3      	b.n	8002860 <UART_Transmit_IT+0x40>
    }
  }
  else
  {
    return HAL_BUSY;
 8002878:	2002      	movs	r0, #2
  }
}
 800287a:	4770      	bx	lr

0800287c <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800287c:	6801      	ldr	r1, [r0, #0]
{
 800287e:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002880:	680b      	ldr	r3, [r1, #0]
 8002882:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002886:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002888:	2320      	movs	r3, #32
 800288a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 800288e:	f7ff fd6f 	bl	8002370 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8002892:	2000      	movs	r0, #0
 8002894:	bd08      	pop	{r3, pc}

08002896 <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002896:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800289a:	2b22      	cmp	r3, #34	; 0x22
{
 800289c:	b510      	push	{r4, lr}
 800289e:	6803      	ldr	r3, [r0, #0]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028a0:	d129      	bne.n	80028f6 <UART_Receive_IT+0x60>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80028a2:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028a4:	6883      	ldr	r3, [r0, #8]
  uint16_t  uhMask = huart->Mask;
 80028a6:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ae:	ea02 0201 	and.w	r2, r2, r1
 80028b2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80028b4:	d11b      	bne.n	80028ee <UART_Receive_IT+0x58>
 80028b6:	6901      	ldr	r1, [r0, #16]
 80028b8:	b9c9      	cbnz	r1, 80028ee <UART_Receive_IT+0x58>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 80028ba:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr +=2U;
 80028be:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 80028c0:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 80028c4:	3c01      	subs	r4, #1
 80028c6:	b2a4      	uxth	r4, r4
 80028c8:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 80028cc:	b96c      	cbnz	r4, 80028ea <UART_Receive_IT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028ce:	6803      	ldr	r3, [r0, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80028d6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	f022 0201 	bic.w	r2, r2, #1
 80028de:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80028e0:	2320      	movs	r3, #32
 80028e2:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 80028e6:	f7ff fd44 	bl	8002372 <HAL_UART_RxCpltCallback>

      return HAL_OK;
    }

    return HAL_OK;
 80028ea:	2000      	movs	r0, #0
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 80028ec:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80028ee:	1c59      	adds	r1, r3, #1
 80028f0:	6541      	str	r1, [r0, #84]	; 0x54
 80028f2:	701a      	strb	r2, [r3, #0]
 80028f4:	e7e4      	b.n	80028c0 <UART_Receive_IT+0x2a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80028f6:	699a      	ldr	r2, [r3, #24]
 80028f8:	f042 0208 	orr.w	r2, r2, #8
 80028fc:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 80028fe:	2002      	movs	r0, #2
 8002900:	bd10      	pop	{r4, pc}
	...

08002904 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002904:	6802      	ldr	r2, [r0, #0]
 8002906:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002908:	6811      	ldr	r1, [r2, #0]
{
 800290a:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 800290c:	f013 050f 	ands.w	r5, r3, #15
{
 8002910:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8002912:	d107      	bne.n	8002924 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002914:	069e      	lsls	r6, r3, #26
 8002916:	d505      	bpl.n	8002924 <HAL_UART_IRQHandler+0x20>
 8002918:	068e      	lsls	r6, r1, #26
 800291a:	d503      	bpl.n	8002924 <HAL_UART_IRQHandler+0x20>
}
 800291c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002920:	f7ff bfb9 	b.w	8002896 <UART_Receive_IT>
  cr3its = READ_REG(huart->Instance->CR3);
 8002924:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 8002926:	2d00      	cmp	r5, #0
 8002928:	d05c      	beq.n	80029e4 <HAL_UART_IRQHandler+0xe0>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800292a:	f010 0501 	ands.w	r5, r0, #1
 800292e:	d102      	bne.n	8002936 <HAL_UART_IRQHandler+0x32>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8002930:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002934:	d056      	beq.n	80029e4 <HAL_UART_IRQHandler+0xe0>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002936:	07d8      	lsls	r0, r3, #31
 8002938:	d507      	bpl.n	800294a <HAL_UART_IRQHandler+0x46>
 800293a:	05ce      	lsls	r6, r1, #23
 800293c:	d505      	bpl.n	800294a <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 800293e:	2001      	movs	r0, #1
 8002940:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002942:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002944:	f040 0001 	orr.w	r0, r0, #1
 8002948:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800294a:	0798      	lsls	r0, r3, #30
 800294c:	d506      	bpl.n	800295c <HAL_UART_IRQHandler+0x58>
 800294e:	b12d      	cbz	r5, 800295c <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8002950:	2002      	movs	r0, #2
 8002952:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002954:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002956:	f040 0004 	orr.w	r0, r0, #4
 800295a:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800295c:	075e      	lsls	r6, r3, #29
 800295e:	d506      	bpl.n	800296e <HAL_UART_IRQHandler+0x6a>
 8002960:	b12d      	cbz	r5, 800296e <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8002962:	2004      	movs	r0, #4
 8002964:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002966:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002968:	f040 0002 	orr.w	r0, r0, #2
 800296c:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 800296e:	0718      	lsls	r0, r3, #28
 8002970:	d507      	bpl.n	8002982 <HAL_UART_IRQHandler+0x7e>
 8002972:	068e      	lsls	r6, r1, #26
 8002974:	d400      	bmi.n	8002978 <HAL_UART_IRQHandler+0x74>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002976:	b125      	cbz	r5, 8002982 <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8002978:	2008      	movs	r0, #8
 800297a:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800297c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800297e:	4302      	orrs	r2, r0
 8002980:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002982:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002984:	2a00      	cmp	r2, #0
 8002986:	d050      	beq.n	8002a2a <HAL_UART_IRQHandler+0x126>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002988:	0698      	lsls	r0, r3, #26
 800298a:	d504      	bpl.n	8002996 <HAL_UART_IRQHandler+0x92>
 800298c:	068a      	lsls	r2, r1, #26
 800298e:	d502      	bpl.n	8002996 <HAL_UART_IRQHandler+0x92>
        UART_Receive_IT(huart);
 8002990:	4620      	mov	r0, r4
 8002992:	f7ff ff80 	bl	8002896 <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002996:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002998:	071b      	lsls	r3, r3, #28
        UART_EndRxTransfer(huart);
 800299a:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800299c:	d404      	bmi.n	80029a8 <HAL_UART_IRQHandler+0xa4>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800299e:	6823      	ldr	r3, [r4, #0]
 80029a0:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80029a2:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80029a6:	d019      	beq.n	80029dc <HAL_UART_IRQHandler+0xd8>
        UART_EndRxTransfer(huart);
 80029a8:	f7ff fcd5 	bl	8002356 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029ac:	6823      	ldr	r3, [r4, #0]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	0656      	lsls	r6, r2, #25
 80029b2:	d50f      	bpl.n	80029d4 <HAL_UART_IRQHandler+0xd0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029b4:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80029b6:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029bc:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80029be:	b148      	cbz	r0, 80029d4 <HAL_UART_IRQHandler+0xd0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029c0:	4b1a      	ldr	r3, [pc, #104]	; (8002a2c <HAL_UART_IRQHandler+0x128>)
 80029c2:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029c4:	f7fe f8fe 	bl	8000bc4 <HAL_DMA_Abort_IT>
 80029c8:	b378      	cbz	r0, 8002a2a <HAL_UART_IRQHandler+0x126>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029ca:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 80029cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029d0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80029d2:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80029d4:	4620      	mov	r0, r4
 80029d6:	f7ff fccd 	bl	8002374 <HAL_UART_ErrorCallback>
 80029da:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80029dc:	f7ff fcca 	bl	8002374 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e0:	66e5      	str	r5, [r4, #108]	; 0x6c
 80029e2:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80029e4:	02dd      	lsls	r5, r3, #11
 80029e6:	d50e      	bpl.n	8002a06 <HAL_UART_IRQHandler+0x102>
 80029e8:	0246      	lsls	r6, r0, #9
 80029ea:	d50c      	bpl.n	8002a06 <HAL_UART_IRQHandler+0x102>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80029ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80029f0:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 80029f2:	2320      	movs	r3, #32
 80029f4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    HAL_UARTEx_WakeupCallback(huart);
 80029f8:	4620      	mov	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 80029fa:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 80029fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8002a02:	f000 b815 	b.w	8002a30 <HAL_UARTEx_WakeupCallback>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a06:	061d      	lsls	r5, r3, #24
 8002a08:	d506      	bpl.n	8002a18 <HAL_UART_IRQHandler+0x114>
 8002a0a:	0608      	lsls	r0, r1, #24
 8002a0c:	d504      	bpl.n	8002a18 <HAL_UART_IRQHandler+0x114>
    UART_Transmit_IT(huart);
 8002a0e:	4620      	mov	r0, r4
}
 8002a10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_Transmit_IT(huart);
 8002a14:	f7ff bf04 	b.w	8002820 <UART_Transmit_IT>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a18:	065a      	lsls	r2, r3, #25
 8002a1a:	d506      	bpl.n	8002a2a <HAL_UART_IRQHandler+0x126>
 8002a1c:	064b      	lsls	r3, r1, #25
 8002a1e:	d504      	bpl.n	8002a2a <HAL_UART_IRQHandler+0x126>
    UART_EndTransmit_IT(huart);
 8002a20:	4620      	mov	r0, r4
}
 8002a22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_EndTransmit_IT(huart);
 8002a26:	f7ff bf29 	b.w	800287c <UART_EndTransmit_IT>
 8002a2a:	bd70      	pop	{r4, r5, r6, pc}
 8002a2c:	08002377 	.word	0x08002377

08002a30 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002a30:	4770      	bx	lr
	...

08002a34 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim){
 8002a34:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	if(htim->Instance==TIM2){
 8002a38:	6803      	ldr	r3, [r0, #0]
 8002a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim){
 8002a3e:	b086      	sub	sp, #24
	if(htim->Instance==TIM2){
 8002a40:	d110      	bne.n	8002a64 <HAL_TIM_IC_CaptureCallback+0x30>
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==1){
 8002a42:	2101      	movs	r1, #1
 8002a44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a48:	f7fe f9b0 	bl	8000dac <HAL_GPIO_ReadPin>
 8002a4c:	2801      	cmp	r0, #1
 8002a4e:	4b5d      	ldr	r3, [pc, #372]	; (8002bc4 <HAL_TIM_IC_CaptureCallback+0x190>)
 8002a50:	4e5d      	ldr	r6, [pc, #372]	; (8002bc8 <HAL_TIM_IC_CaptureCallback+0x194>)
 8002a52:	4d5e      	ldr	r5, [pc, #376]	; (8002bcc <HAL_TIM_IC_CaptureCallback+0x198>)
 8002a54:	d109      	bne.n	8002a6a <HAL_TIM_IC_CaptureCallback+0x36>
			__HAL_TIM_SET_COUNTER(&htim2,0);
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	2300      	movs	r3, #0
 8002a5a:	6253      	str	r3, [r2, #36]	; 0x24
			__HAL_TIM_SET_COUNTER(&htim3,0);
 8002a5c:	6832      	ldr	r2, [r6, #0]
 8002a5e:	6253      	str	r3, [r2, #36]	; 0x24
			__HAL_TIM_SET_COUNTER(&htim4,0);
 8002a60:	682a      	ldr	r2, [r5, #0]
 8002a62:	6253      	str	r3, [r2, #36]	; 0x24
			}
			HAL_UART_Transmit(&huart2,tosend,sizeof(tosend),0xffff);
			HAL_TIM_Base_Start_IT(&htim1);
		}
	}
}
 8002a64:	b006      	add	sp, #24
 8002a66:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
			int FrontCnt = __HAL_TIM_GET_COUNTER(&htim2);
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6a58      	ldr	r0, [r3, #36]	; 0x24
			double FrontDistance = FrontCnt/(double)58;
 8002a6e:	f7fd fd59 	bl	8000524 <__aeabi_i2d>
 8002a72:	2200      	movs	r2, #0
 8002a74:	4b56      	ldr	r3, [pc, #344]	; (8002bd0 <HAL_TIM_IC_CaptureCallback+0x19c>)
 8002a76:	f7fd fee5 	bl	8000844 <__aeabi_ddiv>
 8002a7a:	4689      	mov	r9, r1
 8002a7c:	4680      	mov	r8, r0
			int FrontInteger = (int)FrontDistance;
 8002a7e:	f7fd ffc9 	bl	8000a14 <__aeabi_d2iz>
			int LeftCnt = __HAL_TIM_GET_COUNTER(&htim3);//PA6
 8002a82:	6833      	ldr	r3, [r6, #0]
 8002a84:	6a5e      	ldr	r6, [r3, #36]	; 0x24
			int RightCnt = __HAL_TIM_GET_COUNTER(&htim4);//PA11
 8002a86:	682b      	ldr	r3, [r5, #0]
			int FrontInteger = (int)FrontDistance;
 8002a88:	4604      	mov	r4, r0
			char tosend[20] = {0};
 8002a8a:	2214      	movs	r2, #20
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	a801      	add	r0, sp, #4
			int RightCnt = __HAL_TIM_GET_COUNTER(&htim4);//PA11
 8002a90:	6a5d      	ldr	r5, [r3, #36]	; 0x24
			char tosend[20] = {0};
 8002a92:	f000 fcf1 	bl	8003478 <memset>
			if (FrontInteger  < 400){
 8002a96:	f5b4 7fc8 	cmp.w	r4, #400	; 0x190
 8002a9a:	da4f      	bge.n	8002b3c <HAL_TIM_IC_CaptureCallback+0x108>
			int FrontPoint = (int)((FrontDistance-FrontInteger)*100);
 8002a9c:	4620      	mov	r0, r4
 8002a9e:	f7fd fd41 	bl	8000524 <__aeabi_i2d>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	4640      	mov	r0, r8
 8002aa8:	4649      	mov	r1, r9
 8002aaa:	f7fd fbed 	bl	8000288 <__aeabi_dsub>
 8002aae:	2200      	movs	r2, #0
 8002ab0:	4b48      	ldr	r3, [pc, #288]	; (8002bd4 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 8002ab2:	f7fd fd9d 	bl	80005f0 <__aeabi_dmul>
 8002ab6:	f7fd ffad 	bl	8000a14 <__aeabi_d2iz>
				sprintf(tosend,"%d.%02d\r\n",FrontInteger ,FrontPoint);
 8002aba:	4622      	mov	r2, r4
 8002abc:	4603      	mov	r3, r0
 8002abe:	4946      	ldr	r1, [pc, #280]	; (8002bd8 <HAL_TIM_IC_CaptureCallback+0x1a4>)
 8002ac0:	a801      	add	r0, sp, #4
 8002ac2:	f000 fce1 	bl	8003488 <siprintf>
				if(FrontInteger <20){
 8002ac6:	2c13      	cmp	r4, #19
 8002ac8:	dc0f      	bgt.n	8002aea <HAL_TIM_IC_CaptureCallback+0xb6>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8002aca:	2201      	movs	r2, #1
 8002acc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ad0:	4842      	ldr	r0, [pc, #264]	; (8002bdc <HAL_TIM_IC_CaptureCallback+0x1a8>)
 8002ad2:	f7fe f971 	bl	8000db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002adc:	4840      	ldr	r0, [pc, #256]	; (8002be0 <HAL_TIM_IC_CaptureCallback+0x1ac>)
 8002ade:	f7fe f96b 	bl	8000db8 <HAL_GPIO_WritePin>
					TIM8->CCR3 = 1;//left PB9
 8002ae2:	4b40      	ldr	r3, [pc, #256]	; (8002be4 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8002ae4:	2201      	movs	r2, #1
					TIM8->CCR3 = 10;
 8002ae6:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ae8:	e027      	b.n	8002b3a <HAL_TIM_IC_CaptureCallback+0x106>
				else if(FrontInteger <30){
 8002aea:	2c1d      	cmp	r4, #29
 8002aec:	dc3f      	bgt.n	8002b6e <HAL_TIM_IC_CaptureCallback+0x13a>
			double LeftDistance = LeftCnt/(double)58;
 8002aee:	4630      	mov	r0, r6
 8002af0:	f7fd fd18 	bl	8000524 <__aeabi_i2d>
 8002af4:	2200      	movs	r2, #0
 8002af6:	4b36      	ldr	r3, [pc, #216]	; (8002bd0 <HAL_TIM_IC_CaptureCallback+0x19c>)
 8002af8:	f7fd fea4 	bl	8000844 <__aeabi_ddiv>
			int LeftInteger = (int)LeftDistance;
 8002afc:	f7fd ff8a 	bl	8000a14 <__aeabi_d2iz>
 8002b00:	4604      	mov	r4, r0
			double RightDistance = RightCnt/(double)58;
 8002b02:	4628      	mov	r0, r5
 8002b04:	f7fd fd0e 	bl	8000524 <__aeabi_i2d>
 8002b08:	2200      	movs	r2, #0
 8002b0a:	4b31      	ldr	r3, [pc, #196]	; (8002bd0 <HAL_TIM_IC_CaptureCallback+0x19c>)
 8002b0c:	f7fd fe9a 	bl	8000844 <__aeabi_ddiv>
			int RightInteger = (int)RightDistance;
 8002b10:	f7fd ff80 	bl	8000a14 <__aeabi_d2iz>
					if (RightInteger>LeftInteger){
 8002b14:	4284      	cmp	r4, r0
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	f44f 7180 	mov.w	r1, #256	; 0x100
					if (RightInteger>LeftInteger){
 8002b1e:	da18      	bge.n	8002b52 <HAL_TIM_IC_CaptureCallback+0x11e>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8002b20:	482e      	ldr	r0, [pc, #184]	; (8002bdc <HAL_TIM_IC_CaptureCallback+0x1a8>)
 8002b22:	f7fe f949 	bl	8000db8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8002b26:	2201      	movs	r2, #1
 8002b28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b2c:	482c      	ldr	r0, [pc, #176]	; (8002be0 <HAL_TIM_IC_CaptureCallback+0x1ac>)
 8002b2e:	f7fe f943 	bl	8000db8 <HAL_GPIO_WritePin>
						TIM8->CCR3 = 8;//left
 8002b32:	4b2c      	ldr	r3, [pc, #176]	; (8002be4 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8002b34:	2208      	movs	r2, #8
 8002b36:	63da      	str	r2, [r3, #60]	; 0x3c
						TIM8->CCR4 = 2;//right
 8002b38:	2202      	movs	r2, #2
					TIM8->CCR4 = 10;
 8002b3a:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_UART_Transmit(&huart2,tosend,sizeof(tosend),0xffff);
 8002b3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b40:	2214      	movs	r2, #20
 8002b42:	a901      	add	r1, sp, #4
 8002b44:	4828      	ldr	r0, [pc, #160]	; (8002be8 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 8002b46:	f7ff fdae 	bl	80026a6 <HAL_UART_Transmit>
			HAL_TIM_Base_Start_IT(&htim1);
 8002b4a:	4828      	ldr	r0, [pc, #160]	; (8002bec <HAL_TIM_IC_CaptureCallback+0x1b8>)
 8002b4c:	f7fe fe06 	bl	800175c <HAL_TIM_Base_Start_IT>
}
 8002b50:	e788      	b.n	8002a64 <HAL_TIM_IC_CaptureCallback+0x30>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8002b52:	4823      	ldr	r0, [pc, #140]	; (8002be0 <HAL_TIM_IC_CaptureCallback+0x1ac>)
 8002b54:	f7fe f930 	bl	8000db8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b5e:	481f      	ldr	r0, [pc, #124]	; (8002bdc <HAL_TIM_IC_CaptureCallback+0x1a8>)
 8002b60:	f7fe f92a 	bl	8000db8 <HAL_GPIO_WritePin>
						TIM8->CCR3 = 2;//left
 8002b64:	4b1f      	ldr	r3, [pc, #124]	; (8002be4 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8002b66:	2202      	movs	r2, #2
 8002b68:	63da      	str	r2, [r3, #60]	; 0x3c
						TIM8->CCR4 = 8;//right
 8002b6a:	2208      	movs	r2, #8
 8002b6c:	e7e5      	b.n	8002b3a <HAL_TIM_IC_CaptureCallback+0x106>
				}else if (FrontInteger <40){
 8002b6e:	2c27      	cmp	r4, #39	; 0x27
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b78:	4818      	ldr	r0, [pc, #96]	; (8002bdc <HAL_TIM_IC_CaptureCallback+0x1a8>)
				}else if (FrontInteger <40){
 8002b7a:	dc0a      	bgt.n	8002b92 <HAL_TIM_IC_CaptureCallback+0x15e>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8002b7c:	f7fe f91c 	bl	8000db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8002b80:	2200      	movs	r2, #0
 8002b82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b86:	4816      	ldr	r0, [pc, #88]	; (8002be0 <HAL_TIM_IC_CaptureCallback+0x1ac>)
 8002b88:	f7fe f916 	bl	8000db8 <HAL_GPIO_WritePin>
					TIM8->CCR3 = 8;
 8002b8c:	4b15      	ldr	r3, [pc, #84]	; (8002be4 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8002b8e:	2208      	movs	r2, #8
 8002b90:	e7a9      	b.n	8002ae6 <HAL_TIM_IC_CaptureCallback+0xb2>
				}else if (FrontInteger <50){
 8002b92:	2c31      	cmp	r4, #49	; 0x31
 8002b94:	dc0a      	bgt.n	8002bac <HAL_TIM_IC_CaptureCallback+0x178>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8002b96:	f7fe f90f 	bl	8000db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ba0:	480f      	ldr	r0, [pc, #60]	; (8002be0 <HAL_TIM_IC_CaptureCallback+0x1ac>)
 8002ba2:	f7fe f909 	bl	8000db8 <HAL_GPIO_WritePin>
					TIM8->CCR3 = 9;
 8002ba6:	4b0f      	ldr	r3, [pc, #60]	; (8002be4 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8002ba8:	2209      	movs	r2, #9
 8002baa:	e79c      	b.n	8002ae6 <HAL_TIM_IC_CaptureCallback+0xb2>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8002bac:	f7fe f904 	bl	8000db8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bb6:	480a      	ldr	r0, [pc, #40]	; (8002be0 <HAL_TIM_IC_CaptureCallback+0x1ac>)
 8002bb8:	f7fe f8fe 	bl	8000db8 <HAL_GPIO_WritePin>
					TIM8->CCR3 = 10;
 8002bbc:	4b09      	ldr	r3, [pc, #36]	; (8002be4 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8002bbe:	220a      	movs	r2, #10
 8002bc0:	e791      	b.n	8002ae6 <HAL_TIM_IC_CaptureCallback+0xb2>
 8002bc2:	bf00      	nop
 8002bc4:	200001a0 	.word	0x200001a0
 8002bc8:	20000120 	.word	0x20000120
 8002bcc:	200000e0 	.word	0x200000e0
 8002bd0:	404d0000 	.word	0x404d0000
 8002bd4:	40590000 	.word	0x40590000
 8002bd8:	08003d00 	.word	0x08003d00
 8002bdc:	48000400 	.word	0x48000400
 8002be0:	48000800 	.word	0x48000800
 8002be4:	40013400 	.word	0x40013400
 8002be8:	200001e0 	.word	0x200001e0
 8002bec:	20000160 	.word	0x20000160

08002bf0 <HAL_TIM_PeriodElapsedCallback>:
int tim1Count = 7000;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
	if(htim->Instance==TIM1){
 8002bf0:	6802      	ldr	r2, [r0, #0]
 8002bf2:	4b15      	ldr	r3, [pc, #84]	; (8002c48 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002bf4:	429a      	cmp	r2, r3
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8002bf6:	b510      	push	{r4, lr}
	if(htim->Instance==TIM1){
 8002bf8:	d125      	bne.n	8002c46 <HAL_TIM_PeriodElapsedCallback+0x56>
		if(tim1Count<7000){
 8002bfa:	4c14      	ldr	r4, [pc, #80]	; (8002c4c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002bfc:	6823      	ldr	r3, [r4, #0]
 8002bfe:	f641 3257 	movw	r2, #6999	; 0x1b57
 8002c02:	4293      	cmp	r3, r2
 8002c04:	dc02      	bgt.n	8002c0c <HAL_TIM_PeriodElapsedCallback+0x1c>
			tim1Count++;
 8002c06:	3301      	adds	r3, #1
 8002c08:	6023      	str	r3, [r4, #0]
 8002c0a:	bd10      	pop	{r4, pc}
		}
		else{
			HAL_TIM_Base_Stop_IT(&htim1);
 8002c0c:	4810      	ldr	r0, [pc, #64]	; (8002c50 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002c0e:	f7fe fdb0 	bl	8001772 <HAL_TIM_Base_Stop_IT>
			if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)==0){
 8002c12:	2102      	movs	r1, #2
 8002c14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c18:	f7fe f8c8 	bl	8000dac <HAL_GPIO_ReadPin>
 8002c1c:	b950      	cbnz	r0, 8002c34 <HAL_TIM_PeriodElapsedCallback+0x44>
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,1);
 8002c1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c22:	2201      	movs	r2, #1
 8002c24:	2102      	movs	r1, #2
 8002c26:	f7fe f8c7 	bl	8000db8 <HAL_GPIO_WritePin>
				HAL_TIM_Base_Start_IT(&htim1);
 8002c2a:	4809      	ldr	r0, [pc, #36]	; (8002c50 <HAL_TIM_PeriodElapsedCallback+0x60>)
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,0);

			}
		}
	}
}
 8002c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				HAL_TIM_Base_Start_IT(&htim1);
 8002c30:	f7fe bd94 	b.w	800175c <HAL_TIM_Base_Start_IT>
				tim1Count=0;
 8002c34:	2200      	movs	r2, #0
 8002c36:	6022      	str	r2, [r4, #0]
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,0);
 8002c38:	2102      	movs	r1, #2
 8002c3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 8002c3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,0);
 8002c42:	f7fe b8b9 	b.w	8000db8 <HAL_GPIO_WritePin>
 8002c46:	bd10      	pop	{r4, pc}
 8002c48:	40012c00 	.word	0x40012c00
 8002c4c:	20000008 	.word	0x20000008
 8002c50:	20000160 	.word	0x20000160

08002c54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c54:	b530      	push	{r4, r5, lr}
 8002c56:	b0a7      	sub	sp, #156	; 0x9c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c58:	2228      	movs	r2, #40	; 0x28
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	a806      	add	r0, sp, #24
 8002c5e:	f000 fc0b 	bl	8003478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c62:	2214      	movs	r2, #20
 8002c64:	2100      	movs	r1, #0
 8002c66:	a801      	add	r0, sp, #4
 8002c68:	f000 fc06 	bl	8003478 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c6c:	2258      	movs	r2, #88	; 0x58
 8002c6e:	2100      	movs	r1, #0
 8002c70:	a810      	add	r0, sp, #64	; 0x40
 8002c72:	f000 fc01 	bl	8003478 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c76:	2301      	movs	r3, #1
 8002c78:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c7a:	2310      	movs	r3, #16
 8002c7c:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c82:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c84:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c86:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002c88:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002c8c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c8e:	9506      	str	r5, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c90:	950c      	str	r5, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c92:	f7fe f897 	bl	8000dc4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c96:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c98:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c9a:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c9c:	4629      	mov	r1, r5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ca2:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ca4:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ca6:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ca8:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002caa:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002cac:	f7fe fb38 	bl	8001320 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 8002cb0:	4b05      	ldr	r3, [pc, #20]	; (8002cc8 <SystemClock_Config+0x74>)
 8002cb2:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cb4:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002cb6:	9413      	str	r4, [sp, #76]	; 0x4c
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8002cb8:	941d      	str	r4, [sp, #116]	; 0x74
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 8002cba:	9420      	str	r4, [sp, #128]	; 0x80
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8002cbc:	941e      	str	r4, [sp, #120]	; 0x78
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8002cbe:	941f      	str	r4, [sp, #124]	; 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cc0:	f7fe fc08 	bl	80014d4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002cc4:	b027      	add	sp, #156	; 0x9c
 8002cc6:	bd30      	pop	{r4, r5, pc}
 8002cc8:	00303002 	.word	0x00303002

08002ccc <main>:
{
 8002ccc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002cd0:	b09d      	sub	sp, #116	; 0x74
  HAL_Init();
 8002cd2:	f7fd feeb 	bl	8000aac <HAL_Init>
  SystemClock_Config();
 8002cd6:	f7ff ffbd 	bl	8002c54 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cda:	2214      	movs	r2, #20
 8002cdc:	2100      	movs	r1, #0
 8002cde:	a811      	add	r0, sp, #68	; 0x44
 8002ce0:	f000 fbca 	bl	8003478 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ce4:	4bb4      	ldr	r3, [pc, #720]	; (8002fb8 <main+0x2ec>)
  htim1.Instance = TIM1;
 8002ce6:	4eb5      	ldr	r6, [pc, #724]	; (8002fbc <main+0x2f0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ce8:	695a      	ldr	r2, [r3, #20]
  htim2.Instance = TIM2;
 8002cea:	f8df b300 	ldr.w	fp, [pc, #768]	; 8002fec <main+0x320>
  htim8.Instance = TIM8;
 8002cee:	4db4      	ldr	r5, [pc, #720]	; (8002fc0 <main+0x2f4>)
  htim3.Instance = TIM3;
 8002cf0:	f8df 82fc 	ldr.w	r8, [pc, #764]	; 8002ff0 <main+0x324>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cf4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002cf8:	615a      	str	r2, [r3, #20]
 8002cfa:	695a      	ldr	r2, [r3, #20]
 8002cfc:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8002d00:	9203      	str	r2, [sp, #12]
 8002d02:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d04:	695a      	ldr	r2, [r3, #20]
 8002d06:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002d0a:	615a      	str	r2, [r3, #20]
 8002d0c:	695a      	ldr	r2, [r3, #20]
 8002d0e:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002d12:	9204      	str	r2, [sp, #16]
 8002d14:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d16:	695a      	ldr	r2, [r3, #20]
 8002d18:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002d1c:	615a      	str	r2, [r3, #20]
 8002d1e:	695a      	ldr	r2, [r3, #20]
 8002d20:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002d24:	9205      	str	r2, [sp, #20]
 8002d26:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d28:	695a      	ldr	r2, [r3, #20]
 8002d2a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002d2e:	615a      	str	r2, [r3, #20]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d36:	9306      	str	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 8002d38:	2200      	movs	r2, #0
 8002d3a:	2122      	movs	r1, #34	; 0x22
 8002d3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d40:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 8002d42:	f7fe f839 	bl	8000db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(sleep_GPIO_Port, sleep_Pin, GPIO_PIN_SET);
 8002d46:	2201      	movs	r2, #1
 8002d48:	2120      	movs	r1, #32
 8002d4a:	489e      	ldr	r0, [pc, #632]	; (8002fc4 <main+0x2f8>)
 8002d4c:	f7fe f834 	bl	8000db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);//with TIM8_CHANNEL_4 Right
 8002d50:	2200      	movs	r2, #0
 8002d52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d56:	489b      	ldr	r0, [pc, #620]	; (8002fc4 <main+0x2f8>)
 8002d58:	f7fe f82e 	bl	8000db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);//with TIM8_CHANNEL_3 Left
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d62:	4899      	ldr	r0, [pc, #612]	; (8002fc8 <main+0x2fc>)

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d64:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);//with TIM8_CHANNEL_3 Left
 8002d66:	f7fe f827 	bl	8000db8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8002d6a:	f44f 5700 	mov.w	r7, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002d6e:	4b97      	ldr	r3, [pc, #604]	; (8002fcc <main+0x300>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002d70:	4894      	ldr	r0, [pc, #592]	; (8002fc4 <main+0x2f8>)
  GPIO_InitStruct.Pin = B1_Pin;
 8002d72:	9711      	str	r7, [sp, #68]	; 0x44
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002d74:	a911      	add	r1, sp, #68	; 0x44

  /*Configure GPIO pins : PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d76:	f04f 0a01 	mov.w	sl, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002d7a:	9312      	str	r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7c:	9413      	str	r4, [sp, #76]	; 0x4c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002d7e:	f7fd ff45 	bl	8000c0c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin;
 8002d82:	2322      	movs	r3, #34	; 0x22
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d84:	a911      	add	r1, sp, #68	; 0x44
 8002d86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin;
 8002d8a:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d8c:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d90:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d92:	9414      	str	r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d94:	f7fd ff3a 	bl	8000c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : sleep_Pin PC8 */
  GPIO_InitStruct.Pin = sleep_Pin|GPIO_PIN_8;
 8002d98:	f44f 7390 	mov.w	r3, #288	; 0x120
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d9c:	a911      	add	r1, sp, #68	; 0x44
 8002d9e:	4889      	ldr	r0, [pc, #548]	; (8002fc4 <main+0x2f8>)
  GPIO_InitStruct.Pin = sleep_Pin|GPIO_PIN_8;
 8002da0:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002da2:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da6:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da8:	9414      	str	r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002daa:	f7fd ff2f 	bl	8000c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002dae:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002db0:	a911      	add	r1, sp, #68	; 0x44
 8002db2:	4884      	ldr	r0, [pc, #528]	; (8002fc4 <main+0x2f8>)
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002db4:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002db6:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db8:	9413      	str	r4, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dba:	f7fd ff27 	bl	8000c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002dbe:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dc2:	a911      	add	r1, sp, #68	; 0x44
 8002dc4:	4880      	ldr	r0, [pc, #512]	; (8002fc8 <main+0x2fc>)
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002dc6:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dc8:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dcc:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dce:	9414      	str	r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dd0:	f7fd ff1c 	bl	8000c0c <HAL_GPIO_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dd4:	4621      	mov	r1, r4
 8002dd6:	2210      	movs	r2, #16
 8002dd8:	a811      	add	r0, sp, #68	; 0x44
 8002dda:	f000 fb4d 	bl	8003478 <memset>
  htim1.Init.Prescaler = 71;
 8002dde:	4a7c      	ldr	r2, [pc, #496]	; (8002fd0 <main+0x304>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002de0:	940a      	str	r4, [sp, #40]	; 0x28
  htim1.Init.Period = 10;
 8002de2:	f04f 090a 	mov.w	r9, #10
  htim1.Init.Prescaler = 71;
 8002de6:	2347      	movs	r3, #71	; 0x47
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002de8:	4630      	mov	r0, r6
  htim1.Init.Prescaler = 71;
 8002dea:	e886 000c 	stmia.w	r6, {r2, r3}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dee:	940b      	str	r4, [sp, #44]	; 0x2c
 8002df0:	940c      	str	r4, [sp, #48]	; 0x30
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002df2:	60b4      	str	r4, [r6, #8]
  htim1.Init.Period = 10;
 8002df4:	f8c6 900c 	str.w	r9, [r6, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002df8:	6134      	str	r4, [r6, #16]
  htim1.Init.RepetitionCounter = 0;
 8002dfa:	6174      	str	r4, [r6, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dfc:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002dfe:	f7fe fdeb 	bl	80019d8 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002e06:	a911      	add	r1, sp, #68	; 0x44
 8002e08:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e0a:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002e0c:	f7ff f820 	bl	8001e50 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e10:	a90a      	add	r1, sp, #40	; 0x28
 8002e12:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e14:	940a      	str	r4, [sp, #40]	; 0x28
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002e16:	940b      	str	r4, [sp, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e18:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e1a:	f7ff fa29 	bl	8002270 <HAL_TIMEx_MasterConfigSynchronization>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002e1e:	4621      	mov	r1, r4
 8002e20:	2210      	movs	r2, #16
 8002e22:	a811      	add	r0, sp, #68	; 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e24:	940a      	str	r4, [sp, #40]	; 0x28
 8002e26:	940b      	str	r4, [sp, #44]	; 0x2c
 8002e28:	940c      	str	r4, [sp, #48]	; 0x30
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002e2a:	f000 fb25 	bl	8003478 <memset>
  htim2.Init.Prescaler = 71;
 8002e2e:	2347      	movs	r3, #71	; 0x47
 8002e30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e34:	e88b 000c 	stmia.w	fp, {r2, r3}
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002e38:	4658      	mov	r0, fp
  htim2.Init.Period = 0xffffffff;
 8002e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e3e:	f8cb 200c 	str.w	r2, [fp, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e42:	f8cb 4008 	str.w	r4, [fp, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e46:	f8cb 4010 	str.w	r4, [fp, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e4a:	f8cb 4018 	str.w	r4, [fp, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002e4e:	f7fe fdf7 	bl	8001a40 <HAL_TIM_IC_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e52:	a90a      	add	r1, sp, #40	; 0x28
 8002e54:	4658      	mov	r0, fp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e56:	940a      	str	r4, [sp, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e58:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e5a:	f7ff fa09 	bl	8002270 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002e5e:	4622      	mov	r2, r4
 8002e60:	a911      	add	r1, sp, #68	; 0x44
 8002e62:	4658      	mov	r0, fp
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002e64:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002e68:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002e6c:	9413      	str	r4, [sp, #76]	; 0x4c
  sConfigIC.ICFilter = 0;
 8002e6e:	9414      	str	r4, [sp, #80]	; 0x50
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002e70:	f7fe ff5c 	bl	8001d2c <HAL_TIM_IC_ConfigChannel>
  huart2.Instance = USART2;
 8002e74:	4857      	ldr	r0, [pc, #348]	; (8002fd4 <main+0x308>)
  huart2.Init.BaudRate = 115200;
 8002e76:	4958      	ldr	r1, [pc, #352]	; (8002fd8 <main+0x30c>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e78:	6084      	str	r4, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e7a:	230c      	movs	r3, #12
  huart2.Init.BaudRate = 115200;
 8002e7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e80:	6143      	str	r3, [r0, #20]
  huart2.Init.BaudRate = 115200;
 8002e82:	e880 0006 	stmia.w	r0, {r1, r2}
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e86:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e88:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e8a:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e8c:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e8e:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e90:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e92:	f7ff fc93 	bl	80027bc <HAL_UART_Init>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e96:	221c      	movs	r2, #28
 8002e98:	4621      	mov	r1, r4
 8002e9a:	a80a      	add	r0, sp, #40	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e9c:	9407      	str	r4, [sp, #28]
 8002e9e:	9408      	str	r4, [sp, #32]
 8002ea0:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ea2:	f000 fae9 	bl	8003478 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ea6:	222c      	movs	r2, #44	; 0x2c
 8002ea8:	4621      	mov	r1, r4
 8002eaa:	a811      	add	r0, sp, #68	; 0x44
 8002eac:	f000 fae4 	bl	8003478 <memset>
  htim8.Init.Prescaler = 71;
 8002eb0:	484a      	ldr	r0, [pc, #296]	; (8002fdc <main+0x310>)
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eb2:	60ac      	str	r4, [r5, #8]
  htim8.Init.Prescaler = 71;
 8002eb4:	2347      	movs	r3, #71	; 0x47
 8002eb6:	e885 0009 	stmia.w	r5, {r0, r3}
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002eba:	4628      	mov	r0, r5
  htim8.Init.Period = 10;
 8002ebc:	f8c5 900c 	str.w	r9, [r5, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ec0:	612c      	str	r4, [r5, #16]
  htim8.Init.RepetitionCounter = 0;
 8002ec2:	616c      	str	r4, [r5, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ec4:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002ec6:	f7fe fda1 	bl	8001a0c <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002eca:	a907      	add	r1, sp, #28
 8002ecc:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ece:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002ed0:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ed2:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002ed4:	f7ff f9cc 	bl	8002270 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ed8:	2260      	movs	r2, #96	; 0x60
 8002eda:	920a      	str	r2, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002edc:	a90a      	add	r1, sp, #40	; 0x28
 8002ede:	2208      	movs	r2, #8
 8002ee0:	4628      	mov	r0, r5
  sConfigOC.Pulse = 0;
 8002ee2:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ee4:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002ee6:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ee8:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002eea:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002eec:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002eee:	f7ff f937 	bl	8002160 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ef2:	220c      	movs	r2, #12
 8002ef4:	a90a      	add	r1, sp, #40	; 0x28
 8002ef6:	4628      	mov	r0, r5
 8002ef8:	f7ff f932 	bl	8002160 <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002efc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002f00:	a911      	add	r1, sp, #68	; 0x44
 8002f02:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002f04:	9219      	str	r2, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002f06:	9716      	str	r7, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f08:	9411      	str	r4, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f0a:	9412      	str	r4, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002f0c:	9413      	str	r4, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.DeadTime = 0;
 8002f0e:	9414      	str	r4, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002f10:	9415      	str	r4, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002f12:	9417      	str	r4, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002f14:	9418      	str	r4, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002f16:	941a      	str	r4, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002f18:	941b      	str	r4, [sp, #108]	; 0x6c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002f1a:	f7ff f9d3 	bl	80022c4 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim8);
 8002f1e:	4628      	mov	r0, r5
 8002f20:	f000 f96a 	bl	80031f8 <HAL_TIM_MspPostInit>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002f24:	4621      	mov	r1, r4
 8002f26:	2210      	movs	r2, #16
 8002f28:	a811      	add	r0, sp, #68	; 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f2a:	940a      	str	r4, [sp, #40]	; 0x28
 8002f2c:	940b      	str	r4, [sp, #44]	; 0x2c
 8002f2e:	940c      	str	r4, [sp, #48]	; 0x30
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002f30:	f000 faa2 	bl	8003478 <memset>
  htim3.Init.Prescaler = 71;
 8002f34:	4a2a      	ldr	r2, [pc, #168]	; (8002fe0 <main+0x314>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f36:	f8c8 4008 	str.w	r4, [r8, #8]
  htim3.Init.Prescaler = 71;
 8002f3a:	2347      	movs	r3, #71	; 0x47
 8002f3c:	e888 000c 	stmia.w	r8, {r2, r3}
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002f40:	4640      	mov	r0, r8
  htim3.Init.Period = 0xffff;
 8002f42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f46:	f8c8 300c 	str.w	r3, [r8, #12]
 8002f4a:	9301      	str	r3, [sp, #4]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f4c:	f8c8 4010 	str.w	r4, [r8, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f50:	f8c8 4018 	str.w	r4, [r8, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002f54:	f7fe fd74 	bl	8001a40 <HAL_TIM_IC_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f58:	a90a      	add	r1, sp, #40	; 0x28
 8002f5a:	4640      	mov	r0, r8
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f5c:	940a      	str	r4, [sp, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f5e:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f60:	f7ff f986 	bl	8002270 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002f64:	4622      	mov	r2, r4
 8002f66:	a911      	add	r1, sp, #68	; 0x44
 8002f68:	4640      	mov	r0, r8
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002f6a:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002f6e:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002f72:	9413      	str	r4, [sp, #76]	; 0x4c
  sConfigIC.ICFilter = 0;
 8002f74:	9414      	str	r4, [sp, #80]	; 0x50
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002f76:	f7fe fed9 	bl	8001d2c <HAL_TIM_IC_ConfigChannel>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002f7a:	4621      	mov	r1, r4
 8002f7c:	2210      	movs	r2, #16
 8002f7e:	a811      	add	r0, sp, #68	; 0x44
  htim4.Instance = TIM4;
 8002f80:	4f18      	ldr	r7, [pc, #96]	; (8002fe4 <main+0x318>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f82:	940a      	str	r4, [sp, #40]	; 0x28
 8002f84:	940b      	str	r4, [sp, #44]	; 0x2c
 8002f86:	940c      	str	r4, [sp, #48]	; 0x30
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002f88:	f000 fa76 	bl	8003478 <memset>
  htim4.Init.Prescaler = 71;
 8002f8c:	4a16      	ldr	r2, [pc, #88]	; (8002fe8 <main+0x31c>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f8e:	60bc      	str	r4, [r7, #8]
  htim4.Init.Prescaler = 71;
 8002f90:	2347      	movs	r3, #71	; 0x47
 8002f92:	e887 000c 	stmia.w	r7, {r2, r3}
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002f96:	4638      	mov	r0, r7
  htim4.Init.Period = 0xffff;
 8002f98:	9b01      	ldr	r3, [sp, #4]
 8002f9a:	60fb      	str	r3, [r7, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f9c:	613c      	str	r4, [r7, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f9e:	61bc      	str	r4, [r7, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002fa0:	f7fe fd4e 	bl	8001a40 <HAL_TIM_IC_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002fa4:	a90a      	add	r1, sp, #40	; 0x28
 8002fa6:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fa8:	940a      	str	r4, [sp, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002faa:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002fac:	f7ff f960 	bl	8002270 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002fb0:	4622      	mov	r2, r4
 8002fb2:	a911      	add	r1, sp, #68	; 0x44
 8002fb4:	e01e      	b.n	8002ff4 <main+0x328>
 8002fb6:	bf00      	nop
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	20000160 	.word	0x20000160
 8002fc0:	200000a0 	.word	0x200000a0
 8002fc4:	48000800 	.word	0x48000800
 8002fc8:	48000400 	.word	0x48000400
 8002fcc:	10210000 	.word	0x10210000
 8002fd0:	40012c00 	.word	0x40012c00
 8002fd4:	200001e0 	.word	0x200001e0
 8002fd8:	40004400 	.word	0x40004400
 8002fdc:	40013400 	.word	0x40013400
 8002fe0:	40000400 	.word	0x40000400
 8002fe4:	200000e0 	.word	0x200000e0
 8002fe8:	40000800 	.word	0x40000800
 8002fec:	200001a0 	.word	0x200001a0
 8002ff0:	20000120 	.word	0x20000120
 8002ff4:	4638      	mov	r0, r7
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002ff6:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002ffa:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002ffe:	9413      	str	r4, [sp, #76]	; 0x4c
  sConfigIC.ICFilter = 0;
 8003000:	9414      	str	r4, [sp, #80]	; 0x50
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003002:	f7fe fe93 	bl	8001d2c <HAL_TIM_IC_ConfigChannel>
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_4);
 8003006:	210c      	movs	r1, #12
 8003008:	4628      	mov	r0, r5
 800300a:	f7fe ffe3 	bl	8001fd4 <HAL_TIM_PWM_Start>
    TIM8->CCR4 = 10;
 800300e:	4b0d      	ldr	r3, [pc, #52]	; (8003044 <main+0x378>)
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_3);
 8003010:	2108      	movs	r1, #8
    TIM8->CCR4 = 10;
 8003012:	f8c3 9040 	str.w	r9, [r3, #64]	; 0x40
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_3);
 8003016:	4628      	mov	r0, r5
 8003018:	f7fe ffdc 	bl	8001fd4 <HAL_TIM_PWM_Start>
    TIM8->CCR3 = 10;
 800301c:	4b09      	ldr	r3, [pc, #36]	; (8003044 <main+0x378>)
  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
 800301e:	4621      	mov	r1, r4
    TIM8->CCR3 = 10;
 8003020:	f8c3 903c 	str.w	r9, [r3, #60]	; 0x3c
  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
 8003024:	4658      	mov	r0, fp
 8003026:	f7fe ffff 	bl	8002028 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3,TIM_CHANNEL_1);
 800302a:	4621      	mov	r1, r4
 800302c:	4640      	mov	r0, r8
 800302e:	f7fe fffb 	bl	8002028 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4,TIM_CHANNEL_1);
 8003032:	4621      	mov	r1, r4
 8003034:	4638      	mov	r0, r7
 8003036:	f7fe fff7 	bl	8002028 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 800303a:	4630      	mov	r0, r6
 800303c:	f7fe fb8e 	bl	800175c <HAL_TIM_Base_Start_IT>
 8003040:	e7fe      	b.n	8003040 <main+0x374>
 8003042:	bf00      	nop
 8003044:	40013400 	.word	0x40013400

08003048 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003048:	4b0c      	ldr	r3, [pc, #48]	; (800307c <HAL_MspInit+0x34>)
{
 800304a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800304c:	699a      	ldr	r2, [r3, #24]
 800304e:	f042 0201 	orr.w	r2, r2, #1
 8003052:	619a      	str	r2, [r3, #24]
 8003054:	699a      	ldr	r2, [r3, #24]
 8003056:	f002 0201 	and.w	r2, r2, #1
 800305a:	9200      	str	r2, [sp, #0]
 800305c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800305e:	69da      	ldr	r2, [r3, #28]
 8003060:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003064:	61da      	str	r2, [r3, #28]
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306c:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800306e:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8003070:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003072:	f7fd fd3f 	bl	8000af4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003076:	b003      	add	sp, #12
 8003078:	f85d fb04 	ldr.w	pc, [sp], #4
 800307c:	40021000 	.word	0x40021000

08003080 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003080:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM1)
 8003082:	4b0d      	ldr	r3, [pc, #52]	; (80030b8 <HAL_TIM_Base_MspInit+0x38>)
 8003084:	6802      	ldr	r2, [r0, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	d112      	bne.n	80030b0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800308a:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800308e:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003090:	699a      	ldr	r2, [r3, #24]
 8003092:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003096:	619a      	str	r2, [r3, #24]
 8003098:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800309a:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 800309c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030a0:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80030a2:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030a4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80030a6:	f7fd fd37 	bl	8000b18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80030aa:	2019      	movs	r0, #25
 80030ac:	f7fd fd68 	bl	8000b80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80030b0:	b003      	add	sp, #12
 80030b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80030b6:	bf00      	nop
 80030b8:	40012c00 	.word	0x40012c00

080030bc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80030bc:	b510      	push	{r4, lr}
 80030be:	4604      	mov	r4, r0
 80030c0:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c2:	2214      	movs	r2, #20
 80030c4:	2100      	movs	r1, #0
 80030c6:	a807      	add	r0, sp, #28
 80030c8:	f000 f9d6 	bl	8003478 <memset>
  if(htim_ic->Instance==TIM2)
 80030cc:	6823      	ldr	r3, [r4, #0]
 80030ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d2:	d127      	bne.n	8003124 <HAL_TIM_IC_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030d4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030d8:	a907      	add	r1, sp, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030da:	69da      	ldr	r2, [r3, #28]
 80030dc:	f042 0201 	orr.w	r2, r2, #1
 80030e0:	61da      	str	r2, [r3, #28]
 80030e2:	69da      	ldr	r2, [r3, #28]
 80030e4:	f002 0201 	and.w	r2, r2, #1
 80030e8:	9201      	str	r2, [sp, #4]
 80030ea:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ec:	695a      	ldr	r2, [r3, #20]
 80030ee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80030f2:	615a      	str	r2, [r3, #20]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030fc:	2202      	movs	r2, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030fe:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003100:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003102:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003104:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003108:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800310a:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800310c:	f7fd fd7e 	bl	8000c0c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003110:	2200      	movs	r2, #0
 8003112:	201c      	movs	r0, #28
 8003114:	4611      	mov	r1, r2
 8003116:	f7fd fcff 	bl	8000b18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800311a:	201c      	movs	r0, #28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800311c:	f7fd fd30 	bl	8000b80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003120:	b00c      	add	sp, #48	; 0x30
 8003122:	bd10      	pop	{r4, pc}
  else if(htim_ic->Instance==TIM3)
 8003124:	4a27      	ldr	r2, [pc, #156]	; (80031c4 <HAL_TIM_IC_MspInit+0x108>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d123      	bne.n	8003172 <HAL_TIM_IC_MspInit+0xb6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800312a:	4b27      	ldr	r3, [pc, #156]	; (80031c8 <HAL_TIM_IC_MspInit+0x10c>)
 800312c:	69da      	ldr	r2, [r3, #28]
 800312e:	f042 0202 	orr.w	r2, r2, #2
 8003132:	61da      	str	r2, [r3, #28]
 8003134:	69da      	ldr	r2, [r3, #28]
 8003136:	f002 0202 	and.w	r2, r2, #2
 800313a:	9203      	str	r2, [sp, #12]
 800313c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800313e:	695a      	ldr	r2, [r3, #20]
 8003140:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003144:	615a      	str	r2, [r3, #20]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314c:	9304      	str	r3, [sp, #16]
 800314e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003150:	2340      	movs	r3, #64	; 0x40
 8003152:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003154:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003156:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800315c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800315e:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003160:	f7fd fd54 	bl	8000c0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003164:	2200      	movs	r2, #0
 8003166:	201d      	movs	r0, #29
 8003168:	4611      	mov	r1, r2
 800316a:	f7fd fcd5 	bl	8000b18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800316e:	201d      	movs	r0, #29
 8003170:	e7d4      	b.n	800311c <HAL_TIM_IC_MspInit+0x60>
  else if(htim_ic->Instance==TIM4)
 8003172:	4a16      	ldr	r2, [pc, #88]	; (80031cc <HAL_TIM_IC_MspInit+0x110>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d1d3      	bne.n	8003120 <HAL_TIM_IC_MspInit+0x64>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003178:	4b13      	ldr	r3, [pc, #76]	; (80031c8 <HAL_TIM_IC_MspInit+0x10c>)
 800317a:	69da      	ldr	r2, [r3, #28]
 800317c:	f042 0204 	orr.w	r2, r2, #4
 8003180:	61da      	str	r2, [r3, #28]
 8003182:	69da      	ldr	r2, [r3, #28]
 8003184:	f002 0204 	and.w	r2, r2, #4
 8003188:	9205      	str	r2, [sp, #20]
 800318a:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800318c:	695a      	ldr	r2, [r3, #20]
 800318e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003192:	615a      	str	r2, [r3, #20]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319a:	9306      	str	r3, [sp, #24]
 800319c:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800319e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031a2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a4:	2302      	movs	r3, #2
 80031a6:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a8:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80031aa:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80031b0:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031b2:	f7fd fd2b 	bl	8000c0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80031b6:	2200      	movs	r2, #0
 80031b8:	201e      	movs	r0, #30
 80031ba:	4611      	mov	r1, r2
 80031bc:	f7fd fcac 	bl	8000b18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80031c0:	201e      	movs	r0, #30
 80031c2:	e7ab      	b.n	800311c <HAL_TIM_IC_MspInit+0x60>
 80031c4:	40000400 	.word	0x40000400
 80031c8:	40021000 	.word	0x40021000
 80031cc:	40000800 	.word	0x40000800

080031d0 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM8)
 80031d0:	6802      	ldr	r2, [r0, #0]
 80031d2:	4b08      	ldr	r3, [pc, #32]	; (80031f4 <HAL_TIM_PWM_MspInit+0x24>)
 80031d4:	429a      	cmp	r2, r3
{
 80031d6:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM8)
 80031d8:	d10a      	bne.n	80031f0 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80031da:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80031de:	699a      	ldr	r2, [r3, #24]
 80031e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031e4:	619a      	str	r2, [r3, #24]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031ec:	9301      	str	r3, [sp, #4]
 80031ee:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80031f0:	b002      	add	sp, #8
 80031f2:	4770      	bx	lr
 80031f4:	40013400 	.word	0x40013400

080031f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031f8:	b530      	push	{r4, r5, lr}
 80031fa:	4604      	mov	r4, r0
 80031fc:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031fe:	2214      	movs	r2, #20
 8003200:	2100      	movs	r1, #0
 8003202:	a803      	add	r0, sp, #12
 8003204:	f000 f938 	bl	8003478 <memset>
  if(htim->Instance==TIM8)
 8003208:	6822      	ldr	r2, [r4, #0]
 800320a:	4b17      	ldr	r3, [pc, #92]	; (8003268 <HAL_TIM_MspPostInit+0x70>)
 800320c:	429a      	cmp	r2, r3
 800320e:	d129      	bne.n	8003264 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003210:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
    /**TIM8 GPIO Configuration    
    PC9     ------> TIM8_CH4
    PB9     ------> TIM8_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003214:	f44f 7500 	mov.w	r5, #512	; 0x200
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003218:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800321a:	4814      	ldr	r0, [pc, #80]	; (800326c <HAL_TIM_MspPostInit+0x74>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800321c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003220:	615a      	str	r2, [r3, #20]
 8003222:	695a      	ldr	r2, [r3, #20]
 8003224:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8003228:	9201      	str	r2, [sp, #4]
 800322a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800322c:	695a      	ldr	r2, [r3, #20]
 800322e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003232:	615a      	str	r2, [r3, #20]
 8003234:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003236:	9503      	str	r5, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003238:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800323c:	9302      	str	r3, [sp, #8]
 800323e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003240:	2402      	movs	r4, #2
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8003242:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003244:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8003246:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003248:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800324a:	f7fd fcdf 	bl	8000c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324e:	2300      	movs	r3, #0
 8003250:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003252:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003254:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8003256:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003258:	4805      	ldr	r0, [pc, #20]	; (8003270 <HAL_TIM_MspPostInit+0x78>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800325a:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800325c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 800325e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003260:	f7fd fcd4 	bl	8000c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003264:	b009      	add	sp, #36	; 0x24
 8003266:	bd30      	pop	{r4, r5, pc}
 8003268:	40013400 	.word	0x40013400
 800326c:	48000800 	.word	0x48000800
 8003270:	48000400 	.word	0x48000400

08003274 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003274:	b510      	push	{r4, lr}
 8003276:	4604      	mov	r4, r0
 8003278:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800327a:	2214      	movs	r2, #20
 800327c:	2100      	movs	r1, #0
 800327e:	a803      	add	r0, sp, #12
 8003280:	f000 f8fa 	bl	8003478 <memset>
  if(huart->Instance==USART2)
 8003284:	6822      	ldr	r2, [r4, #0]
 8003286:	4b16      	ldr	r3, [pc, #88]	; (80032e0 <HAL_UART_MspInit+0x6c>)
 8003288:	429a      	cmp	r2, r3
 800328a:	d126      	bne.n	80032da <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800328c:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003290:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 8003292:	69da      	ldr	r2, [r3, #28]
 8003294:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003298:	61da      	str	r2, [r3, #28]
 800329a:	69da      	ldr	r2, [r3, #28]
 800329c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80032a0:	9201      	str	r2, [sp, #4]
 80032a2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032a4:	695a      	ldr	r2, [r3, #20]
 80032a6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80032aa:	615a      	str	r2, [r3, #20]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b2:	9302      	str	r3, [sp, #8]
 80032b4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80032b6:	230c      	movs	r3, #12
 80032b8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ba:	2302      	movs	r3, #2
 80032bc:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80032c2:	2307      	movs	r3, #7
 80032c4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032c6:	f7fd fca1 	bl	8000c0c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80032ca:	2200      	movs	r2, #0
 80032cc:	2026      	movs	r0, #38	; 0x26
 80032ce:	4611      	mov	r1, r2
 80032d0:	f7fd fc22 	bl	8000b18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80032d4:	2026      	movs	r0, #38	; 0x26
 80032d6:	f7fd fc53 	bl	8000b80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80032da:	b008      	add	sp, #32
 80032dc:	bd10      	pop	{r4, pc}
 80032de:	bf00      	nop
 80032e0:	40004400 	.word	0x40004400

080032e4 <NMI_Handler>:
 80032e4:	4770      	bx	lr

080032e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032e6:	e7fe      	b.n	80032e6 <HardFault_Handler>

080032e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032e8:	e7fe      	b.n	80032e8 <MemManage_Handler>

080032ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032ea:	e7fe      	b.n	80032ea <BusFault_Handler>

080032ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032ec:	e7fe      	b.n	80032ec <UsageFault_Handler>

080032ee <SVC_Handler>:
 80032ee:	4770      	bx	lr

080032f0 <DebugMon_Handler>:
 80032f0:	4770      	bx	lr

080032f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032f2:	4770      	bx	lr

080032f4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032f4:	f7fd bbec 	b.w	8000ad0 <HAL_IncTick>

080032f8 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80032f8:	4801      	ldr	r0, [pc, #4]	; (8003300 <TIM1_UP_TIM16_IRQHandler+0x8>)
 80032fa:	f7fe ba52 	b.w	80017a2 <HAL_TIM_IRQHandler>
 80032fe:	bf00      	nop
 8003300:	20000160 	.word	0x20000160

08003304 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003304:	4801      	ldr	r0, [pc, #4]	; (800330c <TIM2_IRQHandler+0x8>)
 8003306:	f7fe ba4c 	b.w	80017a2 <HAL_TIM_IRQHandler>
 800330a:	bf00      	nop
 800330c:	200001a0 	.word	0x200001a0

08003310 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003310:	4801      	ldr	r0, [pc, #4]	; (8003318 <TIM3_IRQHandler+0x8>)
 8003312:	f7fe ba46 	b.w	80017a2 <HAL_TIM_IRQHandler>
 8003316:	bf00      	nop
 8003318:	20000120 	.word	0x20000120

0800331c <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800331c:	4801      	ldr	r0, [pc, #4]	; (8003324 <TIM4_IRQHandler+0x8>)
 800331e:	f7fe ba40 	b.w	80017a2 <HAL_TIM_IRQHandler>
 8003322:	bf00      	nop
 8003324:	200000e0 	.word	0x200000e0

08003328 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003328:	4801      	ldr	r0, [pc, #4]	; (8003330 <USART2_IRQHandler+0x8>)
 800332a:	f7ff baeb 	b.w	8002904 <HAL_UART_IRQHandler>
 800332e:	bf00      	nop
 8003330:	200001e0 	.word	0x200001e0

08003334 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8003334:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003336:	4b0a      	ldr	r3, [pc, #40]	; (8003360 <_sbrk+0x2c>)
 8003338:	6819      	ldr	r1, [r3, #0]
{
 800333a:	4602      	mov	r2, r0
	if (heap_end == 0)
 800333c:	b909      	cbnz	r1, 8003342 <_sbrk+0xe>
		heap_end = &end;
 800333e:	4909      	ldr	r1, [pc, #36]	; (8003364 <_sbrk+0x30>)
 8003340:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8003342:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8003344:	4669      	mov	r1, sp
 8003346:	4402      	add	r2, r0
 8003348:	428a      	cmp	r2, r1
 800334a:	d906      	bls.n	800335a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800334c:	f000 f86a 	bl	8003424 <__errno>
 8003350:	230c      	movs	r3, #12
 8003352:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003354:	f04f 30ff 	mov.w	r0, #4294967295
 8003358:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800335a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800335c:	bd08      	pop	{r3, pc}
 800335e:	bf00      	nop
 8003360:	20000090 	.word	0x20000090
 8003364:	20000254 	.word	0x20000254

08003368 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003368:	4915      	ldr	r1, [pc, #84]	; (80033c0 <SystemInit+0x58>)
 800336a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800336e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003376:	4b13      	ldr	r3, [pc, #76]	; (80033c4 <SystemInit+0x5c>)
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	f042 0201 	orr.w	r2, r2, #1
 800337e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8003380:	6858      	ldr	r0, [r3, #4]
 8003382:	4a11      	ldr	r2, [pc, #68]	; (80033c8 <SystemInit+0x60>)
 8003384:	4002      	ands	r2, r0
 8003386:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800338e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003392:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800339a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80033a2:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80033a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a6:	f022 020f 	bic.w	r2, r2, #15
 80033aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80033ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80033ae:	4a07      	ldr	r2, [pc, #28]	; (80033cc <SystemInit+0x64>)
 80033b0:	4002      	ands	r2, r0
 80033b2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80033b4:	2200      	movs	r2, #0
 80033b6:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80033b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80033bc:	608b      	str	r3, [r1, #8]
 80033be:	4770      	bx	lr
 80033c0:	e000ed00 	.word	0xe000ed00
 80033c4:	40021000 	.word	0x40021000
 80033c8:	f87fc00c 	.word	0xf87fc00c
 80033cc:	ff00fccc 	.word	0xff00fccc

080033d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80033d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003408 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80033d4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80033d6:	e003      	b.n	80033e0 <LoopCopyDataInit>

080033d8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80033d8:	4b0c      	ldr	r3, [pc, #48]	; (800340c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80033da:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80033dc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80033de:	3104      	adds	r1, #4

080033e0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80033e0:	480b      	ldr	r0, [pc, #44]	; (8003410 <LoopForever+0xa>)
	ldr	r3, =_edata
 80033e2:	4b0c      	ldr	r3, [pc, #48]	; (8003414 <LoopForever+0xe>)
	adds	r2, r0, r1
 80033e4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80033e6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80033e8:	d3f6      	bcc.n	80033d8 <CopyDataInit>
	ldr	r2, =_sbss
 80033ea:	4a0b      	ldr	r2, [pc, #44]	; (8003418 <LoopForever+0x12>)
	b	LoopFillZerobss
 80033ec:	e002      	b.n	80033f4 <LoopFillZerobss>

080033ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80033ee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80033f0:	f842 3b04 	str.w	r3, [r2], #4

080033f4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80033f4:	4b09      	ldr	r3, [pc, #36]	; (800341c <LoopForever+0x16>)
	cmp	r2, r3
 80033f6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80033f8:	d3f9      	bcc.n	80033ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80033fa:	f7ff ffb5 	bl	8003368 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033fe:	f000 f817 	bl	8003430 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003402:	f7ff fc63 	bl	8002ccc <main>

08003406 <LoopForever>:

LoopForever:
    b LoopForever
 8003406:	e7fe      	b.n	8003406 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003408:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800340c:	08003d60 	.word	0x08003d60
	ldr	r0, =_sdata
 8003410:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003414:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8003418:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 800341c:	20000254 	.word	0x20000254

08003420 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003420:	e7fe      	b.n	8003420 <ADC1_2_IRQHandler>
	...

08003424 <__errno>:
 8003424:	4b01      	ldr	r3, [pc, #4]	; (800342c <__errno+0x8>)
 8003426:	6818      	ldr	r0, [r3, #0]
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	20000010 	.word	0x20000010

08003430 <__libc_init_array>:
 8003430:	b570      	push	{r4, r5, r6, lr}
 8003432:	4e0d      	ldr	r6, [pc, #52]	; (8003468 <__libc_init_array+0x38>)
 8003434:	4c0d      	ldr	r4, [pc, #52]	; (800346c <__libc_init_array+0x3c>)
 8003436:	1ba4      	subs	r4, r4, r6
 8003438:	10a4      	asrs	r4, r4, #2
 800343a:	2500      	movs	r5, #0
 800343c:	42a5      	cmp	r5, r4
 800343e:	d109      	bne.n	8003454 <__libc_init_array+0x24>
 8003440:	4e0b      	ldr	r6, [pc, #44]	; (8003470 <__libc_init_array+0x40>)
 8003442:	4c0c      	ldr	r4, [pc, #48]	; (8003474 <__libc_init_array+0x44>)
 8003444:	f000 fc3e 	bl	8003cc4 <_init>
 8003448:	1ba4      	subs	r4, r4, r6
 800344a:	10a4      	asrs	r4, r4, #2
 800344c:	2500      	movs	r5, #0
 800344e:	42a5      	cmp	r5, r4
 8003450:	d105      	bne.n	800345e <__libc_init_array+0x2e>
 8003452:	bd70      	pop	{r4, r5, r6, pc}
 8003454:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003458:	4798      	blx	r3
 800345a:	3501      	adds	r5, #1
 800345c:	e7ee      	b.n	800343c <__libc_init_array+0xc>
 800345e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003462:	4798      	blx	r3
 8003464:	3501      	adds	r5, #1
 8003466:	e7f2      	b.n	800344e <__libc_init_array+0x1e>
 8003468:	08003d58 	.word	0x08003d58
 800346c:	08003d58 	.word	0x08003d58
 8003470:	08003d58 	.word	0x08003d58
 8003474:	08003d5c 	.word	0x08003d5c

08003478 <memset>:
 8003478:	4402      	add	r2, r0
 800347a:	4603      	mov	r3, r0
 800347c:	4293      	cmp	r3, r2
 800347e:	d100      	bne.n	8003482 <memset+0xa>
 8003480:	4770      	bx	lr
 8003482:	f803 1b01 	strb.w	r1, [r3], #1
 8003486:	e7f9      	b.n	800347c <memset+0x4>

08003488 <siprintf>:
 8003488:	b40e      	push	{r1, r2, r3}
 800348a:	b500      	push	{lr}
 800348c:	b09c      	sub	sp, #112	; 0x70
 800348e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003492:	ab1d      	add	r3, sp, #116	; 0x74
 8003494:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003498:	9002      	str	r0, [sp, #8]
 800349a:	9006      	str	r0, [sp, #24]
 800349c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80034a0:	480a      	ldr	r0, [pc, #40]	; (80034cc <siprintf+0x44>)
 80034a2:	9104      	str	r1, [sp, #16]
 80034a4:	9107      	str	r1, [sp, #28]
 80034a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80034aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80034ae:	f8ad 1016 	strh.w	r1, [sp, #22]
 80034b2:	6800      	ldr	r0, [r0, #0]
 80034b4:	9301      	str	r3, [sp, #4]
 80034b6:	a902      	add	r1, sp, #8
 80034b8:	f000 f866 	bl	8003588 <_svfiprintf_r>
 80034bc:	9b02      	ldr	r3, [sp, #8]
 80034be:	2200      	movs	r2, #0
 80034c0:	701a      	strb	r2, [r3, #0]
 80034c2:	b01c      	add	sp, #112	; 0x70
 80034c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80034c8:	b003      	add	sp, #12
 80034ca:	4770      	bx	lr
 80034cc:	20000010 	.word	0x20000010

080034d0 <__ssputs_r>:
 80034d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034d4:	688e      	ldr	r6, [r1, #8]
 80034d6:	429e      	cmp	r6, r3
 80034d8:	4682      	mov	sl, r0
 80034da:	460c      	mov	r4, r1
 80034dc:	4691      	mov	r9, r2
 80034de:	4698      	mov	r8, r3
 80034e0:	d835      	bhi.n	800354e <__ssputs_r+0x7e>
 80034e2:	898a      	ldrh	r2, [r1, #12]
 80034e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80034e8:	d031      	beq.n	800354e <__ssputs_r+0x7e>
 80034ea:	6825      	ldr	r5, [r4, #0]
 80034ec:	6909      	ldr	r1, [r1, #16]
 80034ee:	1a6f      	subs	r7, r5, r1
 80034f0:	6965      	ldr	r5, [r4, #20]
 80034f2:	2302      	movs	r3, #2
 80034f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80034f8:	fb95 f5f3 	sdiv	r5, r5, r3
 80034fc:	f108 0301 	add.w	r3, r8, #1
 8003500:	443b      	add	r3, r7
 8003502:	429d      	cmp	r5, r3
 8003504:	bf38      	it	cc
 8003506:	461d      	movcc	r5, r3
 8003508:	0553      	lsls	r3, r2, #21
 800350a:	d531      	bpl.n	8003570 <__ssputs_r+0xa0>
 800350c:	4629      	mov	r1, r5
 800350e:	f000 fb39 	bl	8003b84 <_malloc_r>
 8003512:	4606      	mov	r6, r0
 8003514:	b950      	cbnz	r0, 800352c <__ssputs_r+0x5c>
 8003516:	230c      	movs	r3, #12
 8003518:	f8ca 3000 	str.w	r3, [sl]
 800351c:	89a3      	ldrh	r3, [r4, #12]
 800351e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003522:	81a3      	strh	r3, [r4, #12]
 8003524:	f04f 30ff 	mov.w	r0, #4294967295
 8003528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800352c:	463a      	mov	r2, r7
 800352e:	6921      	ldr	r1, [r4, #16]
 8003530:	f000 fab4 	bl	8003a9c <memcpy>
 8003534:	89a3      	ldrh	r3, [r4, #12]
 8003536:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800353a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800353e:	81a3      	strh	r3, [r4, #12]
 8003540:	6126      	str	r6, [r4, #16]
 8003542:	6165      	str	r5, [r4, #20]
 8003544:	443e      	add	r6, r7
 8003546:	1bed      	subs	r5, r5, r7
 8003548:	6026      	str	r6, [r4, #0]
 800354a:	60a5      	str	r5, [r4, #8]
 800354c:	4646      	mov	r6, r8
 800354e:	4546      	cmp	r6, r8
 8003550:	bf28      	it	cs
 8003552:	4646      	movcs	r6, r8
 8003554:	4632      	mov	r2, r6
 8003556:	4649      	mov	r1, r9
 8003558:	6820      	ldr	r0, [r4, #0]
 800355a:	f000 faaa 	bl	8003ab2 <memmove>
 800355e:	68a3      	ldr	r3, [r4, #8]
 8003560:	1b9b      	subs	r3, r3, r6
 8003562:	60a3      	str	r3, [r4, #8]
 8003564:	6823      	ldr	r3, [r4, #0]
 8003566:	441e      	add	r6, r3
 8003568:	6026      	str	r6, [r4, #0]
 800356a:	2000      	movs	r0, #0
 800356c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003570:	462a      	mov	r2, r5
 8003572:	f000 fb65 	bl	8003c40 <_realloc_r>
 8003576:	4606      	mov	r6, r0
 8003578:	2800      	cmp	r0, #0
 800357a:	d1e1      	bne.n	8003540 <__ssputs_r+0x70>
 800357c:	6921      	ldr	r1, [r4, #16]
 800357e:	4650      	mov	r0, sl
 8003580:	f000 fab2 	bl	8003ae8 <_free_r>
 8003584:	e7c7      	b.n	8003516 <__ssputs_r+0x46>
	...

08003588 <_svfiprintf_r>:
 8003588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800358c:	b09d      	sub	sp, #116	; 0x74
 800358e:	4680      	mov	r8, r0
 8003590:	9303      	str	r3, [sp, #12]
 8003592:	898b      	ldrh	r3, [r1, #12]
 8003594:	061c      	lsls	r4, r3, #24
 8003596:	460d      	mov	r5, r1
 8003598:	4616      	mov	r6, r2
 800359a:	d50f      	bpl.n	80035bc <_svfiprintf_r+0x34>
 800359c:	690b      	ldr	r3, [r1, #16]
 800359e:	b96b      	cbnz	r3, 80035bc <_svfiprintf_r+0x34>
 80035a0:	2140      	movs	r1, #64	; 0x40
 80035a2:	f000 faef 	bl	8003b84 <_malloc_r>
 80035a6:	6028      	str	r0, [r5, #0]
 80035a8:	6128      	str	r0, [r5, #16]
 80035aa:	b928      	cbnz	r0, 80035b8 <_svfiprintf_r+0x30>
 80035ac:	230c      	movs	r3, #12
 80035ae:	f8c8 3000 	str.w	r3, [r8]
 80035b2:	f04f 30ff 	mov.w	r0, #4294967295
 80035b6:	e0c5      	b.n	8003744 <_svfiprintf_r+0x1bc>
 80035b8:	2340      	movs	r3, #64	; 0x40
 80035ba:	616b      	str	r3, [r5, #20]
 80035bc:	2300      	movs	r3, #0
 80035be:	9309      	str	r3, [sp, #36]	; 0x24
 80035c0:	2320      	movs	r3, #32
 80035c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80035c6:	2330      	movs	r3, #48	; 0x30
 80035c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035cc:	f04f 0b01 	mov.w	fp, #1
 80035d0:	4637      	mov	r7, r6
 80035d2:	463c      	mov	r4, r7
 80035d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d13c      	bne.n	8003656 <_svfiprintf_r+0xce>
 80035dc:	ebb7 0a06 	subs.w	sl, r7, r6
 80035e0:	d00b      	beq.n	80035fa <_svfiprintf_r+0x72>
 80035e2:	4653      	mov	r3, sl
 80035e4:	4632      	mov	r2, r6
 80035e6:	4629      	mov	r1, r5
 80035e8:	4640      	mov	r0, r8
 80035ea:	f7ff ff71 	bl	80034d0 <__ssputs_r>
 80035ee:	3001      	adds	r0, #1
 80035f0:	f000 80a3 	beq.w	800373a <_svfiprintf_r+0x1b2>
 80035f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035f6:	4453      	add	r3, sl
 80035f8:	9309      	str	r3, [sp, #36]	; 0x24
 80035fa:	783b      	ldrb	r3, [r7, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 809c 	beq.w	800373a <_svfiprintf_r+0x1b2>
 8003602:	2300      	movs	r3, #0
 8003604:	f04f 32ff 	mov.w	r2, #4294967295
 8003608:	9304      	str	r3, [sp, #16]
 800360a:	9307      	str	r3, [sp, #28]
 800360c:	9205      	str	r2, [sp, #20]
 800360e:	9306      	str	r3, [sp, #24]
 8003610:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003614:	931a      	str	r3, [sp, #104]	; 0x68
 8003616:	2205      	movs	r2, #5
 8003618:	7821      	ldrb	r1, [r4, #0]
 800361a:	4850      	ldr	r0, [pc, #320]	; (800375c <_svfiprintf_r+0x1d4>)
 800361c:	f7fc fde0 	bl	80001e0 <memchr>
 8003620:	1c67      	adds	r7, r4, #1
 8003622:	9b04      	ldr	r3, [sp, #16]
 8003624:	b9d8      	cbnz	r0, 800365e <_svfiprintf_r+0xd6>
 8003626:	06d9      	lsls	r1, r3, #27
 8003628:	bf44      	itt	mi
 800362a:	2220      	movmi	r2, #32
 800362c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003630:	071a      	lsls	r2, r3, #28
 8003632:	bf44      	itt	mi
 8003634:	222b      	movmi	r2, #43	; 0x2b
 8003636:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800363a:	7822      	ldrb	r2, [r4, #0]
 800363c:	2a2a      	cmp	r2, #42	; 0x2a
 800363e:	d016      	beq.n	800366e <_svfiprintf_r+0xe6>
 8003640:	9a07      	ldr	r2, [sp, #28]
 8003642:	2100      	movs	r1, #0
 8003644:	200a      	movs	r0, #10
 8003646:	4627      	mov	r7, r4
 8003648:	3401      	adds	r4, #1
 800364a:	783b      	ldrb	r3, [r7, #0]
 800364c:	3b30      	subs	r3, #48	; 0x30
 800364e:	2b09      	cmp	r3, #9
 8003650:	d951      	bls.n	80036f6 <_svfiprintf_r+0x16e>
 8003652:	b1c9      	cbz	r1, 8003688 <_svfiprintf_r+0x100>
 8003654:	e011      	b.n	800367a <_svfiprintf_r+0xf2>
 8003656:	2b25      	cmp	r3, #37	; 0x25
 8003658:	d0c0      	beq.n	80035dc <_svfiprintf_r+0x54>
 800365a:	4627      	mov	r7, r4
 800365c:	e7b9      	b.n	80035d2 <_svfiprintf_r+0x4a>
 800365e:	4a3f      	ldr	r2, [pc, #252]	; (800375c <_svfiprintf_r+0x1d4>)
 8003660:	1a80      	subs	r0, r0, r2
 8003662:	fa0b f000 	lsl.w	r0, fp, r0
 8003666:	4318      	orrs	r0, r3
 8003668:	9004      	str	r0, [sp, #16]
 800366a:	463c      	mov	r4, r7
 800366c:	e7d3      	b.n	8003616 <_svfiprintf_r+0x8e>
 800366e:	9a03      	ldr	r2, [sp, #12]
 8003670:	1d11      	adds	r1, r2, #4
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	9103      	str	r1, [sp, #12]
 8003676:	2a00      	cmp	r2, #0
 8003678:	db01      	blt.n	800367e <_svfiprintf_r+0xf6>
 800367a:	9207      	str	r2, [sp, #28]
 800367c:	e004      	b.n	8003688 <_svfiprintf_r+0x100>
 800367e:	4252      	negs	r2, r2
 8003680:	f043 0302 	orr.w	r3, r3, #2
 8003684:	9207      	str	r2, [sp, #28]
 8003686:	9304      	str	r3, [sp, #16]
 8003688:	783b      	ldrb	r3, [r7, #0]
 800368a:	2b2e      	cmp	r3, #46	; 0x2e
 800368c:	d10e      	bne.n	80036ac <_svfiprintf_r+0x124>
 800368e:	787b      	ldrb	r3, [r7, #1]
 8003690:	2b2a      	cmp	r3, #42	; 0x2a
 8003692:	f107 0101 	add.w	r1, r7, #1
 8003696:	d132      	bne.n	80036fe <_svfiprintf_r+0x176>
 8003698:	9b03      	ldr	r3, [sp, #12]
 800369a:	1d1a      	adds	r2, r3, #4
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	9203      	str	r2, [sp, #12]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	bfb8      	it	lt
 80036a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80036a8:	3702      	adds	r7, #2
 80036aa:	9305      	str	r3, [sp, #20]
 80036ac:	4c2c      	ldr	r4, [pc, #176]	; (8003760 <_svfiprintf_r+0x1d8>)
 80036ae:	7839      	ldrb	r1, [r7, #0]
 80036b0:	2203      	movs	r2, #3
 80036b2:	4620      	mov	r0, r4
 80036b4:	f7fc fd94 	bl	80001e0 <memchr>
 80036b8:	b138      	cbz	r0, 80036ca <_svfiprintf_r+0x142>
 80036ba:	2340      	movs	r3, #64	; 0x40
 80036bc:	1b00      	subs	r0, r0, r4
 80036be:	fa03 f000 	lsl.w	r0, r3, r0
 80036c2:	9b04      	ldr	r3, [sp, #16]
 80036c4:	4303      	orrs	r3, r0
 80036c6:	9304      	str	r3, [sp, #16]
 80036c8:	3701      	adds	r7, #1
 80036ca:	7839      	ldrb	r1, [r7, #0]
 80036cc:	4825      	ldr	r0, [pc, #148]	; (8003764 <_svfiprintf_r+0x1dc>)
 80036ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036d2:	2206      	movs	r2, #6
 80036d4:	1c7e      	adds	r6, r7, #1
 80036d6:	f7fc fd83 	bl	80001e0 <memchr>
 80036da:	2800      	cmp	r0, #0
 80036dc:	d035      	beq.n	800374a <_svfiprintf_r+0x1c2>
 80036de:	4b22      	ldr	r3, [pc, #136]	; (8003768 <_svfiprintf_r+0x1e0>)
 80036e0:	b9fb      	cbnz	r3, 8003722 <_svfiprintf_r+0x19a>
 80036e2:	9b03      	ldr	r3, [sp, #12]
 80036e4:	3307      	adds	r3, #7
 80036e6:	f023 0307 	bic.w	r3, r3, #7
 80036ea:	3308      	adds	r3, #8
 80036ec:	9303      	str	r3, [sp, #12]
 80036ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036f0:	444b      	add	r3, r9
 80036f2:	9309      	str	r3, [sp, #36]	; 0x24
 80036f4:	e76c      	b.n	80035d0 <_svfiprintf_r+0x48>
 80036f6:	fb00 3202 	mla	r2, r0, r2, r3
 80036fa:	2101      	movs	r1, #1
 80036fc:	e7a3      	b.n	8003646 <_svfiprintf_r+0xbe>
 80036fe:	2300      	movs	r3, #0
 8003700:	9305      	str	r3, [sp, #20]
 8003702:	4618      	mov	r0, r3
 8003704:	240a      	movs	r4, #10
 8003706:	460f      	mov	r7, r1
 8003708:	3101      	adds	r1, #1
 800370a:	783a      	ldrb	r2, [r7, #0]
 800370c:	3a30      	subs	r2, #48	; 0x30
 800370e:	2a09      	cmp	r2, #9
 8003710:	d903      	bls.n	800371a <_svfiprintf_r+0x192>
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0ca      	beq.n	80036ac <_svfiprintf_r+0x124>
 8003716:	9005      	str	r0, [sp, #20]
 8003718:	e7c8      	b.n	80036ac <_svfiprintf_r+0x124>
 800371a:	fb04 2000 	mla	r0, r4, r0, r2
 800371e:	2301      	movs	r3, #1
 8003720:	e7f1      	b.n	8003706 <_svfiprintf_r+0x17e>
 8003722:	ab03      	add	r3, sp, #12
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	462a      	mov	r2, r5
 8003728:	4b10      	ldr	r3, [pc, #64]	; (800376c <_svfiprintf_r+0x1e4>)
 800372a:	a904      	add	r1, sp, #16
 800372c:	4640      	mov	r0, r8
 800372e:	f3af 8000 	nop.w
 8003732:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003736:	4681      	mov	r9, r0
 8003738:	d1d9      	bne.n	80036ee <_svfiprintf_r+0x166>
 800373a:	89ab      	ldrh	r3, [r5, #12]
 800373c:	065b      	lsls	r3, r3, #25
 800373e:	f53f af38 	bmi.w	80035b2 <_svfiprintf_r+0x2a>
 8003742:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003744:	b01d      	add	sp, #116	; 0x74
 8003746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800374a:	ab03      	add	r3, sp, #12
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	462a      	mov	r2, r5
 8003750:	4b06      	ldr	r3, [pc, #24]	; (800376c <_svfiprintf_r+0x1e4>)
 8003752:	a904      	add	r1, sp, #16
 8003754:	4640      	mov	r0, r8
 8003756:	f000 f881 	bl	800385c <_printf_i>
 800375a:	e7ea      	b.n	8003732 <_svfiprintf_r+0x1aa>
 800375c:	08003d22 	.word	0x08003d22
 8003760:	08003d28 	.word	0x08003d28
 8003764:	08003d2c 	.word	0x08003d2c
 8003768:	00000000 	.word	0x00000000
 800376c:	080034d1 	.word	0x080034d1

08003770 <_printf_common>:
 8003770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003774:	4691      	mov	r9, r2
 8003776:	461f      	mov	r7, r3
 8003778:	688a      	ldr	r2, [r1, #8]
 800377a:	690b      	ldr	r3, [r1, #16]
 800377c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003780:	4293      	cmp	r3, r2
 8003782:	bfb8      	it	lt
 8003784:	4613      	movlt	r3, r2
 8003786:	f8c9 3000 	str.w	r3, [r9]
 800378a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800378e:	4606      	mov	r6, r0
 8003790:	460c      	mov	r4, r1
 8003792:	b112      	cbz	r2, 800379a <_printf_common+0x2a>
 8003794:	3301      	adds	r3, #1
 8003796:	f8c9 3000 	str.w	r3, [r9]
 800379a:	6823      	ldr	r3, [r4, #0]
 800379c:	0699      	lsls	r1, r3, #26
 800379e:	bf42      	ittt	mi
 80037a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80037a4:	3302      	addmi	r3, #2
 80037a6:	f8c9 3000 	strmi.w	r3, [r9]
 80037aa:	6825      	ldr	r5, [r4, #0]
 80037ac:	f015 0506 	ands.w	r5, r5, #6
 80037b0:	d107      	bne.n	80037c2 <_printf_common+0x52>
 80037b2:	f104 0a19 	add.w	sl, r4, #25
 80037b6:	68e3      	ldr	r3, [r4, #12]
 80037b8:	f8d9 2000 	ldr.w	r2, [r9]
 80037bc:	1a9b      	subs	r3, r3, r2
 80037be:	429d      	cmp	r5, r3
 80037c0:	db29      	blt.n	8003816 <_printf_common+0xa6>
 80037c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80037c6:	6822      	ldr	r2, [r4, #0]
 80037c8:	3300      	adds	r3, #0
 80037ca:	bf18      	it	ne
 80037cc:	2301      	movne	r3, #1
 80037ce:	0692      	lsls	r2, r2, #26
 80037d0:	d42e      	bmi.n	8003830 <_printf_common+0xc0>
 80037d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037d6:	4639      	mov	r1, r7
 80037d8:	4630      	mov	r0, r6
 80037da:	47c0      	blx	r8
 80037dc:	3001      	adds	r0, #1
 80037de:	d021      	beq.n	8003824 <_printf_common+0xb4>
 80037e0:	6823      	ldr	r3, [r4, #0]
 80037e2:	68e5      	ldr	r5, [r4, #12]
 80037e4:	f8d9 2000 	ldr.w	r2, [r9]
 80037e8:	f003 0306 	and.w	r3, r3, #6
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	bf08      	it	eq
 80037f0:	1aad      	subeq	r5, r5, r2
 80037f2:	68a3      	ldr	r3, [r4, #8]
 80037f4:	6922      	ldr	r2, [r4, #16]
 80037f6:	bf0c      	ite	eq
 80037f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037fc:	2500      	movne	r5, #0
 80037fe:	4293      	cmp	r3, r2
 8003800:	bfc4      	itt	gt
 8003802:	1a9b      	subgt	r3, r3, r2
 8003804:	18ed      	addgt	r5, r5, r3
 8003806:	f04f 0900 	mov.w	r9, #0
 800380a:	341a      	adds	r4, #26
 800380c:	454d      	cmp	r5, r9
 800380e:	d11b      	bne.n	8003848 <_printf_common+0xd8>
 8003810:	2000      	movs	r0, #0
 8003812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003816:	2301      	movs	r3, #1
 8003818:	4652      	mov	r2, sl
 800381a:	4639      	mov	r1, r7
 800381c:	4630      	mov	r0, r6
 800381e:	47c0      	blx	r8
 8003820:	3001      	adds	r0, #1
 8003822:	d103      	bne.n	800382c <_printf_common+0xbc>
 8003824:	f04f 30ff 	mov.w	r0, #4294967295
 8003828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800382c:	3501      	adds	r5, #1
 800382e:	e7c2      	b.n	80037b6 <_printf_common+0x46>
 8003830:	18e1      	adds	r1, r4, r3
 8003832:	1c5a      	adds	r2, r3, #1
 8003834:	2030      	movs	r0, #48	; 0x30
 8003836:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800383a:	4422      	add	r2, r4
 800383c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003840:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003844:	3302      	adds	r3, #2
 8003846:	e7c4      	b.n	80037d2 <_printf_common+0x62>
 8003848:	2301      	movs	r3, #1
 800384a:	4622      	mov	r2, r4
 800384c:	4639      	mov	r1, r7
 800384e:	4630      	mov	r0, r6
 8003850:	47c0      	blx	r8
 8003852:	3001      	adds	r0, #1
 8003854:	d0e6      	beq.n	8003824 <_printf_common+0xb4>
 8003856:	f109 0901 	add.w	r9, r9, #1
 800385a:	e7d7      	b.n	800380c <_printf_common+0x9c>

0800385c <_printf_i>:
 800385c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003860:	4617      	mov	r7, r2
 8003862:	7e0a      	ldrb	r2, [r1, #24]
 8003864:	b085      	sub	sp, #20
 8003866:	2a6e      	cmp	r2, #110	; 0x6e
 8003868:	4698      	mov	r8, r3
 800386a:	4606      	mov	r6, r0
 800386c:	460c      	mov	r4, r1
 800386e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003870:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003874:	f000 80bc 	beq.w	80039f0 <_printf_i+0x194>
 8003878:	d81a      	bhi.n	80038b0 <_printf_i+0x54>
 800387a:	2a63      	cmp	r2, #99	; 0x63
 800387c:	d02e      	beq.n	80038dc <_printf_i+0x80>
 800387e:	d80a      	bhi.n	8003896 <_printf_i+0x3a>
 8003880:	2a00      	cmp	r2, #0
 8003882:	f000 80c8 	beq.w	8003a16 <_printf_i+0x1ba>
 8003886:	2a58      	cmp	r2, #88	; 0x58
 8003888:	f000 808a 	beq.w	80039a0 <_printf_i+0x144>
 800388c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003890:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003894:	e02a      	b.n	80038ec <_printf_i+0x90>
 8003896:	2a64      	cmp	r2, #100	; 0x64
 8003898:	d001      	beq.n	800389e <_printf_i+0x42>
 800389a:	2a69      	cmp	r2, #105	; 0x69
 800389c:	d1f6      	bne.n	800388c <_printf_i+0x30>
 800389e:	6821      	ldr	r1, [r4, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80038a6:	d023      	beq.n	80038f0 <_printf_i+0x94>
 80038a8:	1d11      	adds	r1, r2, #4
 80038aa:	6019      	str	r1, [r3, #0]
 80038ac:	6813      	ldr	r3, [r2, #0]
 80038ae:	e027      	b.n	8003900 <_printf_i+0xa4>
 80038b0:	2a73      	cmp	r2, #115	; 0x73
 80038b2:	f000 80b4 	beq.w	8003a1e <_printf_i+0x1c2>
 80038b6:	d808      	bhi.n	80038ca <_printf_i+0x6e>
 80038b8:	2a6f      	cmp	r2, #111	; 0x6f
 80038ba:	d02a      	beq.n	8003912 <_printf_i+0xb6>
 80038bc:	2a70      	cmp	r2, #112	; 0x70
 80038be:	d1e5      	bne.n	800388c <_printf_i+0x30>
 80038c0:	680a      	ldr	r2, [r1, #0]
 80038c2:	f042 0220 	orr.w	r2, r2, #32
 80038c6:	600a      	str	r2, [r1, #0]
 80038c8:	e003      	b.n	80038d2 <_printf_i+0x76>
 80038ca:	2a75      	cmp	r2, #117	; 0x75
 80038cc:	d021      	beq.n	8003912 <_printf_i+0xb6>
 80038ce:	2a78      	cmp	r2, #120	; 0x78
 80038d0:	d1dc      	bne.n	800388c <_printf_i+0x30>
 80038d2:	2278      	movs	r2, #120	; 0x78
 80038d4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80038d8:	496e      	ldr	r1, [pc, #440]	; (8003a94 <_printf_i+0x238>)
 80038da:	e064      	b.n	80039a6 <_printf_i+0x14a>
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80038e2:	1d11      	adds	r1, r2, #4
 80038e4:	6019      	str	r1, [r3, #0]
 80038e6:	6813      	ldr	r3, [r2, #0]
 80038e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038ec:	2301      	movs	r3, #1
 80038ee:	e0a3      	b.n	8003a38 <_printf_i+0x1dc>
 80038f0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80038f4:	f102 0104 	add.w	r1, r2, #4
 80038f8:	6019      	str	r1, [r3, #0]
 80038fa:	d0d7      	beq.n	80038ac <_printf_i+0x50>
 80038fc:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003900:	2b00      	cmp	r3, #0
 8003902:	da03      	bge.n	800390c <_printf_i+0xb0>
 8003904:	222d      	movs	r2, #45	; 0x2d
 8003906:	425b      	negs	r3, r3
 8003908:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800390c:	4962      	ldr	r1, [pc, #392]	; (8003a98 <_printf_i+0x23c>)
 800390e:	220a      	movs	r2, #10
 8003910:	e017      	b.n	8003942 <_printf_i+0xe6>
 8003912:	6820      	ldr	r0, [r4, #0]
 8003914:	6819      	ldr	r1, [r3, #0]
 8003916:	f010 0f80 	tst.w	r0, #128	; 0x80
 800391a:	d003      	beq.n	8003924 <_printf_i+0xc8>
 800391c:	1d08      	adds	r0, r1, #4
 800391e:	6018      	str	r0, [r3, #0]
 8003920:	680b      	ldr	r3, [r1, #0]
 8003922:	e006      	b.n	8003932 <_printf_i+0xd6>
 8003924:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003928:	f101 0004 	add.w	r0, r1, #4
 800392c:	6018      	str	r0, [r3, #0]
 800392e:	d0f7      	beq.n	8003920 <_printf_i+0xc4>
 8003930:	880b      	ldrh	r3, [r1, #0]
 8003932:	4959      	ldr	r1, [pc, #356]	; (8003a98 <_printf_i+0x23c>)
 8003934:	2a6f      	cmp	r2, #111	; 0x6f
 8003936:	bf14      	ite	ne
 8003938:	220a      	movne	r2, #10
 800393a:	2208      	moveq	r2, #8
 800393c:	2000      	movs	r0, #0
 800393e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003942:	6865      	ldr	r5, [r4, #4]
 8003944:	60a5      	str	r5, [r4, #8]
 8003946:	2d00      	cmp	r5, #0
 8003948:	f2c0 809c 	blt.w	8003a84 <_printf_i+0x228>
 800394c:	6820      	ldr	r0, [r4, #0]
 800394e:	f020 0004 	bic.w	r0, r0, #4
 8003952:	6020      	str	r0, [r4, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d13f      	bne.n	80039d8 <_printf_i+0x17c>
 8003958:	2d00      	cmp	r5, #0
 800395a:	f040 8095 	bne.w	8003a88 <_printf_i+0x22c>
 800395e:	4675      	mov	r5, lr
 8003960:	2a08      	cmp	r2, #8
 8003962:	d10b      	bne.n	800397c <_printf_i+0x120>
 8003964:	6823      	ldr	r3, [r4, #0]
 8003966:	07da      	lsls	r2, r3, #31
 8003968:	d508      	bpl.n	800397c <_printf_i+0x120>
 800396a:	6923      	ldr	r3, [r4, #16]
 800396c:	6862      	ldr	r2, [r4, #4]
 800396e:	429a      	cmp	r2, r3
 8003970:	bfde      	ittt	le
 8003972:	2330      	movle	r3, #48	; 0x30
 8003974:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003978:	f105 35ff 	addle.w	r5, r5, #4294967295
 800397c:	ebae 0305 	sub.w	r3, lr, r5
 8003980:	6123      	str	r3, [r4, #16]
 8003982:	f8cd 8000 	str.w	r8, [sp]
 8003986:	463b      	mov	r3, r7
 8003988:	aa03      	add	r2, sp, #12
 800398a:	4621      	mov	r1, r4
 800398c:	4630      	mov	r0, r6
 800398e:	f7ff feef 	bl	8003770 <_printf_common>
 8003992:	3001      	adds	r0, #1
 8003994:	d155      	bne.n	8003a42 <_printf_i+0x1e6>
 8003996:	f04f 30ff 	mov.w	r0, #4294967295
 800399a:	b005      	add	sp, #20
 800399c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80039a0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80039a4:	493c      	ldr	r1, [pc, #240]	; (8003a98 <_printf_i+0x23c>)
 80039a6:	6822      	ldr	r2, [r4, #0]
 80039a8:	6818      	ldr	r0, [r3, #0]
 80039aa:	f012 0f80 	tst.w	r2, #128	; 0x80
 80039ae:	f100 0504 	add.w	r5, r0, #4
 80039b2:	601d      	str	r5, [r3, #0]
 80039b4:	d001      	beq.n	80039ba <_printf_i+0x15e>
 80039b6:	6803      	ldr	r3, [r0, #0]
 80039b8:	e002      	b.n	80039c0 <_printf_i+0x164>
 80039ba:	0655      	lsls	r5, r2, #25
 80039bc:	d5fb      	bpl.n	80039b6 <_printf_i+0x15a>
 80039be:	8803      	ldrh	r3, [r0, #0]
 80039c0:	07d0      	lsls	r0, r2, #31
 80039c2:	bf44      	itt	mi
 80039c4:	f042 0220 	orrmi.w	r2, r2, #32
 80039c8:	6022      	strmi	r2, [r4, #0]
 80039ca:	b91b      	cbnz	r3, 80039d4 <_printf_i+0x178>
 80039cc:	6822      	ldr	r2, [r4, #0]
 80039ce:	f022 0220 	bic.w	r2, r2, #32
 80039d2:	6022      	str	r2, [r4, #0]
 80039d4:	2210      	movs	r2, #16
 80039d6:	e7b1      	b.n	800393c <_printf_i+0xe0>
 80039d8:	4675      	mov	r5, lr
 80039da:	fbb3 f0f2 	udiv	r0, r3, r2
 80039de:	fb02 3310 	mls	r3, r2, r0, r3
 80039e2:	5ccb      	ldrb	r3, [r1, r3]
 80039e4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80039e8:	4603      	mov	r3, r0
 80039ea:	2800      	cmp	r0, #0
 80039ec:	d1f5      	bne.n	80039da <_printf_i+0x17e>
 80039ee:	e7b7      	b.n	8003960 <_printf_i+0x104>
 80039f0:	6808      	ldr	r0, [r1, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	6949      	ldr	r1, [r1, #20]
 80039f6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80039fa:	d004      	beq.n	8003a06 <_printf_i+0x1aa>
 80039fc:	1d10      	adds	r0, r2, #4
 80039fe:	6018      	str	r0, [r3, #0]
 8003a00:	6813      	ldr	r3, [r2, #0]
 8003a02:	6019      	str	r1, [r3, #0]
 8003a04:	e007      	b.n	8003a16 <_printf_i+0x1ba>
 8003a06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a0a:	f102 0004 	add.w	r0, r2, #4
 8003a0e:	6018      	str	r0, [r3, #0]
 8003a10:	6813      	ldr	r3, [r2, #0]
 8003a12:	d0f6      	beq.n	8003a02 <_printf_i+0x1a6>
 8003a14:	8019      	strh	r1, [r3, #0]
 8003a16:	2300      	movs	r3, #0
 8003a18:	6123      	str	r3, [r4, #16]
 8003a1a:	4675      	mov	r5, lr
 8003a1c:	e7b1      	b.n	8003982 <_printf_i+0x126>
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	1d11      	adds	r1, r2, #4
 8003a22:	6019      	str	r1, [r3, #0]
 8003a24:	6815      	ldr	r5, [r2, #0]
 8003a26:	6862      	ldr	r2, [r4, #4]
 8003a28:	2100      	movs	r1, #0
 8003a2a:	4628      	mov	r0, r5
 8003a2c:	f7fc fbd8 	bl	80001e0 <memchr>
 8003a30:	b108      	cbz	r0, 8003a36 <_printf_i+0x1da>
 8003a32:	1b40      	subs	r0, r0, r5
 8003a34:	6060      	str	r0, [r4, #4]
 8003a36:	6863      	ldr	r3, [r4, #4]
 8003a38:	6123      	str	r3, [r4, #16]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a40:	e79f      	b.n	8003982 <_printf_i+0x126>
 8003a42:	6923      	ldr	r3, [r4, #16]
 8003a44:	462a      	mov	r2, r5
 8003a46:	4639      	mov	r1, r7
 8003a48:	4630      	mov	r0, r6
 8003a4a:	47c0      	blx	r8
 8003a4c:	3001      	adds	r0, #1
 8003a4e:	d0a2      	beq.n	8003996 <_printf_i+0x13a>
 8003a50:	6823      	ldr	r3, [r4, #0]
 8003a52:	079b      	lsls	r3, r3, #30
 8003a54:	d507      	bpl.n	8003a66 <_printf_i+0x20a>
 8003a56:	2500      	movs	r5, #0
 8003a58:	f104 0919 	add.w	r9, r4, #25
 8003a5c:	68e3      	ldr	r3, [r4, #12]
 8003a5e:	9a03      	ldr	r2, [sp, #12]
 8003a60:	1a9b      	subs	r3, r3, r2
 8003a62:	429d      	cmp	r5, r3
 8003a64:	db05      	blt.n	8003a72 <_printf_i+0x216>
 8003a66:	68e0      	ldr	r0, [r4, #12]
 8003a68:	9b03      	ldr	r3, [sp, #12]
 8003a6a:	4298      	cmp	r0, r3
 8003a6c:	bfb8      	it	lt
 8003a6e:	4618      	movlt	r0, r3
 8003a70:	e793      	b.n	800399a <_printf_i+0x13e>
 8003a72:	2301      	movs	r3, #1
 8003a74:	464a      	mov	r2, r9
 8003a76:	4639      	mov	r1, r7
 8003a78:	4630      	mov	r0, r6
 8003a7a:	47c0      	blx	r8
 8003a7c:	3001      	adds	r0, #1
 8003a7e:	d08a      	beq.n	8003996 <_printf_i+0x13a>
 8003a80:	3501      	adds	r5, #1
 8003a82:	e7eb      	b.n	8003a5c <_printf_i+0x200>
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1a7      	bne.n	80039d8 <_printf_i+0x17c>
 8003a88:	780b      	ldrb	r3, [r1, #0]
 8003a8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a92:	e765      	b.n	8003960 <_printf_i+0x104>
 8003a94:	08003d44 	.word	0x08003d44
 8003a98:	08003d33 	.word	0x08003d33

08003a9c <memcpy>:
 8003a9c:	b510      	push	{r4, lr}
 8003a9e:	1e43      	subs	r3, r0, #1
 8003aa0:	440a      	add	r2, r1
 8003aa2:	4291      	cmp	r1, r2
 8003aa4:	d100      	bne.n	8003aa8 <memcpy+0xc>
 8003aa6:	bd10      	pop	{r4, pc}
 8003aa8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003aac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ab0:	e7f7      	b.n	8003aa2 <memcpy+0x6>

08003ab2 <memmove>:
 8003ab2:	4288      	cmp	r0, r1
 8003ab4:	b510      	push	{r4, lr}
 8003ab6:	eb01 0302 	add.w	r3, r1, r2
 8003aba:	d803      	bhi.n	8003ac4 <memmove+0x12>
 8003abc:	1e42      	subs	r2, r0, #1
 8003abe:	4299      	cmp	r1, r3
 8003ac0:	d10c      	bne.n	8003adc <memmove+0x2a>
 8003ac2:	bd10      	pop	{r4, pc}
 8003ac4:	4298      	cmp	r0, r3
 8003ac6:	d2f9      	bcs.n	8003abc <memmove+0xa>
 8003ac8:	1881      	adds	r1, r0, r2
 8003aca:	1ad2      	subs	r2, r2, r3
 8003acc:	42d3      	cmn	r3, r2
 8003ace:	d100      	bne.n	8003ad2 <memmove+0x20>
 8003ad0:	bd10      	pop	{r4, pc}
 8003ad2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ad6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003ada:	e7f7      	b.n	8003acc <memmove+0x1a>
 8003adc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ae0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003ae4:	e7eb      	b.n	8003abe <memmove+0xc>
	...

08003ae8 <_free_r>:
 8003ae8:	b538      	push	{r3, r4, r5, lr}
 8003aea:	4605      	mov	r5, r0
 8003aec:	2900      	cmp	r1, #0
 8003aee:	d045      	beq.n	8003b7c <_free_r+0x94>
 8003af0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003af4:	1f0c      	subs	r4, r1, #4
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	bfb8      	it	lt
 8003afa:	18e4      	addlt	r4, r4, r3
 8003afc:	f000 f8d6 	bl	8003cac <__malloc_lock>
 8003b00:	4a1f      	ldr	r2, [pc, #124]	; (8003b80 <_free_r+0x98>)
 8003b02:	6813      	ldr	r3, [r2, #0]
 8003b04:	4610      	mov	r0, r2
 8003b06:	b933      	cbnz	r3, 8003b16 <_free_r+0x2e>
 8003b08:	6063      	str	r3, [r4, #4]
 8003b0a:	6014      	str	r4, [r2, #0]
 8003b0c:	4628      	mov	r0, r5
 8003b0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b12:	f000 b8cc 	b.w	8003cae <__malloc_unlock>
 8003b16:	42a3      	cmp	r3, r4
 8003b18:	d90c      	bls.n	8003b34 <_free_r+0x4c>
 8003b1a:	6821      	ldr	r1, [r4, #0]
 8003b1c:	1862      	adds	r2, r4, r1
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	bf04      	itt	eq
 8003b22:	681a      	ldreq	r2, [r3, #0]
 8003b24:	685b      	ldreq	r3, [r3, #4]
 8003b26:	6063      	str	r3, [r4, #4]
 8003b28:	bf04      	itt	eq
 8003b2a:	1852      	addeq	r2, r2, r1
 8003b2c:	6022      	streq	r2, [r4, #0]
 8003b2e:	6004      	str	r4, [r0, #0]
 8003b30:	e7ec      	b.n	8003b0c <_free_r+0x24>
 8003b32:	4613      	mov	r3, r2
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	b10a      	cbz	r2, 8003b3c <_free_r+0x54>
 8003b38:	42a2      	cmp	r2, r4
 8003b3a:	d9fa      	bls.n	8003b32 <_free_r+0x4a>
 8003b3c:	6819      	ldr	r1, [r3, #0]
 8003b3e:	1858      	adds	r0, r3, r1
 8003b40:	42a0      	cmp	r0, r4
 8003b42:	d10b      	bne.n	8003b5c <_free_r+0x74>
 8003b44:	6820      	ldr	r0, [r4, #0]
 8003b46:	4401      	add	r1, r0
 8003b48:	1858      	adds	r0, r3, r1
 8003b4a:	4282      	cmp	r2, r0
 8003b4c:	6019      	str	r1, [r3, #0]
 8003b4e:	d1dd      	bne.n	8003b0c <_free_r+0x24>
 8003b50:	6810      	ldr	r0, [r2, #0]
 8003b52:	6852      	ldr	r2, [r2, #4]
 8003b54:	605a      	str	r2, [r3, #4]
 8003b56:	4401      	add	r1, r0
 8003b58:	6019      	str	r1, [r3, #0]
 8003b5a:	e7d7      	b.n	8003b0c <_free_r+0x24>
 8003b5c:	d902      	bls.n	8003b64 <_free_r+0x7c>
 8003b5e:	230c      	movs	r3, #12
 8003b60:	602b      	str	r3, [r5, #0]
 8003b62:	e7d3      	b.n	8003b0c <_free_r+0x24>
 8003b64:	6820      	ldr	r0, [r4, #0]
 8003b66:	1821      	adds	r1, r4, r0
 8003b68:	428a      	cmp	r2, r1
 8003b6a:	bf04      	itt	eq
 8003b6c:	6811      	ldreq	r1, [r2, #0]
 8003b6e:	6852      	ldreq	r2, [r2, #4]
 8003b70:	6062      	str	r2, [r4, #4]
 8003b72:	bf04      	itt	eq
 8003b74:	1809      	addeq	r1, r1, r0
 8003b76:	6021      	streq	r1, [r4, #0]
 8003b78:	605c      	str	r4, [r3, #4]
 8003b7a:	e7c7      	b.n	8003b0c <_free_r+0x24>
 8003b7c:	bd38      	pop	{r3, r4, r5, pc}
 8003b7e:	bf00      	nop
 8003b80:	20000094 	.word	0x20000094

08003b84 <_malloc_r>:
 8003b84:	b570      	push	{r4, r5, r6, lr}
 8003b86:	1ccd      	adds	r5, r1, #3
 8003b88:	f025 0503 	bic.w	r5, r5, #3
 8003b8c:	3508      	adds	r5, #8
 8003b8e:	2d0c      	cmp	r5, #12
 8003b90:	bf38      	it	cc
 8003b92:	250c      	movcc	r5, #12
 8003b94:	2d00      	cmp	r5, #0
 8003b96:	4606      	mov	r6, r0
 8003b98:	db01      	blt.n	8003b9e <_malloc_r+0x1a>
 8003b9a:	42a9      	cmp	r1, r5
 8003b9c:	d903      	bls.n	8003ba6 <_malloc_r+0x22>
 8003b9e:	230c      	movs	r3, #12
 8003ba0:	6033      	str	r3, [r6, #0]
 8003ba2:	2000      	movs	r0, #0
 8003ba4:	bd70      	pop	{r4, r5, r6, pc}
 8003ba6:	f000 f881 	bl	8003cac <__malloc_lock>
 8003baa:	4a23      	ldr	r2, [pc, #140]	; (8003c38 <_malloc_r+0xb4>)
 8003bac:	6814      	ldr	r4, [r2, #0]
 8003bae:	4621      	mov	r1, r4
 8003bb0:	b991      	cbnz	r1, 8003bd8 <_malloc_r+0x54>
 8003bb2:	4c22      	ldr	r4, [pc, #136]	; (8003c3c <_malloc_r+0xb8>)
 8003bb4:	6823      	ldr	r3, [r4, #0]
 8003bb6:	b91b      	cbnz	r3, 8003bc0 <_malloc_r+0x3c>
 8003bb8:	4630      	mov	r0, r6
 8003bba:	f000 f867 	bl	8003c8c <_sbrk_r>
 8003bbe:	6020      	str	r0, [r4, #0]
 8003bc0:	4629      	mov	r1, r5
 8003bc2:	4630      	mov	r0, r6
 8003bc4:	f000 f862 	bl	8003c8c <_sbrk_r>
 8003bc8:	1c43      	adds	r3, r0, #1
 8003bca:	d126      	bne.n	8003c1a <_malloc_r+0x96>
 8003bcc:	230c      	movs	r3, #12
 8003bce:	6033      	str	r3, [r6, #0]
 8003bd0:	4630      	mov	r0, r6
 8003bd2:	f000 f86c 	bl	8003cae <__malloc_unlock>
 8003bd6:	e7e4      	b.n	8003ba2 <_malloc_r+0x1e>
 8003bd8:	680b      	ldr	r3, [r1, #0]
 8003bda:	1b5b      	subs	r3, r3, r5
 8003bdc:	d41a      	bmi.n	8003c14 <_malloc_r+0x90>
 8003bde:	2b0b      	cmp	r3, #11
 8003be0:	d90f      	bls.n	8003c02 <_malloc_r+0x7e>
 8003be2:	600b      	str	r3, [r1, #0]
 8003be4:	50cd      	str	r5, [r1, r3]
 8003be6:	18cc      	adds	r4, r1, r3
 8003be8:	4630      	mov	r0, r6
 8003bea:	f000 f860 	bl	8003cae <__malloc_unlock>
 8003bee:	f104 000b 	add.w	r0, r4, #11
 8003bf2:	1d23      	adds	r3, r4, #4
 8003bf4:	f020 0007 	bic.w	r0, r0, #7
 8003bf8:	1ac3      	subs	r3, r0, r3
 8003bfa:	d01b      	beq.n	8003c34 <_malloc_r+0xb0>
 8003bfc:	425a      	negs	r2, r3
 8003bfe:	50e2      	str	r2, [r4, r3]
 8003c00:	bd70      	pop	{r4, r5, r6, pc}
 8003c02:	428c      	cmp	r4, r1
 8003c04:	bf0d      	iteet	eq
 8003c06:	6863      	ldreq	r3, [r4, #4]
 8003c08:	684b      	ldrne	r3, [r1, #4]
 8003c0a:	6063      	strne	r3, [r4, #4]
 8003c0c:	6013      	streq	r3, [r2, #0]
 8003c0e:	bf18      	it	ne
 8003c10:	460c      	movne	r4, r1
 8003c12:	e7e9      	b.n	8003be8 <_malloc_r+0x64>
 8003c14:	460c      	mov	r4, r1
 8003c16:	6849      	ldr	r1, [r1, #4]
 8003c18:	e7ca      	b.n	8003bb0 <_malloc_r+0x2c>
 8003c1a:	1cc4      	adds	r4, r0, #3
 8003c1c:	f024 0403 	bic.w	r4, r4, #3
 8003c20:	42a0      	cmp	r0, r4
 8003c22:	d005      	beq.n	8003c30 <_malloc_r+0xac>
 8003c24:	1a21      	subs	r1, r4, r0
 8003c26:	4630      	mov	r0, r6
 8003c28:	f000 f830 	bl	8003c8c <_sbrk_r>
 8003c2c:	3001      	adds	r0, #1
 8003c2e:	d0cd      	beq.n	8003bcc <_malloc_r+0x48>
 8003c30:	6025      	str	r5, [r4, #0]
 8003c32:	e7d9      	b.n	8003be8 <_malloc_r+0x64>
 8003c34:	bd70      	pop	{r4, r5, r6, pc}
 8003c36:	bf00      	nop
 8003c38:	20000094 	.word	0x20000094
 8003c3c:	20000098 	.word	0x20000098

08003c40 <_realloc_r>:
 8003c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c42:	4607      	mov	r7, r0
 8003c44:	4614      	mov	r4, r2
 8003c46:	460e      	mov	r6, r1
 8003c48:	b921      	cbnz	r1, 8003c54 <_realloc_r+0x14>
 8003c4a:	4611      	mov	r1, r2
 8003c4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003c50:	f7ff bf98 	b.w	8003b84 <_malloc_r>
 8003c54:	b922      	cbnz	r2, 8003c60 <_realloc_r+0x20>
 8003c56:	f7ff ff47 	bl	8003ae8 <_free_r>
 8003c5a:	4625      	mov	r5, r4
 8003c5c:	4628      	mov	r0, r5
 8003c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c60:	f000 f826 	bl	8003cb0 <_malloc_usable_size_r>
 8003c64:	4284      	cmp	r4, r0
 8003c66:	d90f      	bls.n	8003c88 <_realloc_r+0x48>
 8003c68:	4621      	mov	r1, r4
 8003c6a:	4638      	mov	r0, r7
 8003c6c:	f7ff ff8a 	bl	8003b84 <_malloc_r>
 8003c70:	4605      	mov	r5, r0
 8003c72:	2800      	cmp	r0, #0
 8003c74:	d0f2      	beq.n	8003c5c <_realloc_r+0x1c>
 8003c76:	4631      	mov	r1, r6
 8003c78:	4622      	mov	r2, r4
 8003c7a:	f7ff ff0f 	bl	8003a9c <memcpy>
 8003c7e:	4631      	mov	r1, r6
 8003c80:	4638      	mov	r0, r7
 8003c82:	f7ff ff31 	bl	8003ae8 <_free_r>
 8003c86:	e7e9      	b.n	8003c5c <_realloc_r+0x1c>
 8003c88:	4635      	mov	r5, r6
 8003c8a:	e7e7      	b.n	8003c5c <_realloc_r+0x1c>

08003c8c <_sbrk_r>:
 8003c8c:	b538      	push	{r3, r4, r5, lr}
 8003c8e:	4c06      	ldr	r4, [pc, #24]	; (8003ca8 <_sbrk_r+0x1c>)
 8003c90:	2300      	movs	r3, #0
 8003c92:	4605      	mov	r5, r0
 8003c94:	4608      	mov	r0, r1
 8003c96:	6023      	str	r3, [r4, #0]
 8003c98:	f7ff fb4c 	bl	8003334 <_sbrk>
 8003c9c:	1c43      	adds	r3, r0, #1
 8003c9e:	d102      	bne.n	8003ca6 <_sbrk_r+0x1a>
 8003ca0:	6823      	ldr	r3, [r4, #0]
 8003ca2:	b103      	cbz	r3, 8003ca6 <_sbrk_r+0x1a>
 8003ca4:	602b      	str	r3, [r5, #0]
 8003ca6:	bd38      	pop	{r3, r4, r5, pc}
 8003ca8:	20000250 	.word	0x20000250

08003cac <__malloc_lock>:
 8003cac:	4770      	bx	lr

08003cae <__malloc_unlock>:
 8003cae:	4770      	bx	lr

08003cb0 <_malloc_usable_size_r>:
 8003cb0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003cb4:	2800      	cmp	r0, #0
 8003cb6:	f1a0 0004 	sub.w	r0, r0, #4
 8003cba:	bfbc      	itt	lt
 8003cbc:	580b      	ldrlt	r3, [r1, r0]
 8003cbe:	18c0      	addlt	r0, r0, r3
 8003cc0:	4770      	bx	lr
	...

08003cc4 <_init>:
 8003cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc6:	bf00      	nop
 8003cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cca:	bc08      	pop	{r3}
 8003ccc:	469e      	mov	lr, r3
 8003cce:	4770      	bx	lr

08003cd0 <_fini>:
 8003cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cd2:	bf00      	nop
 8003cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cd6:	bc08      	pop	{r3}
 8003cd8:	469e      	mov	lr, r3
 8003cda:	4770      	bx	lr
