
microwave1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040b0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08004250  08004250  00014250  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080042cc  080042cc  000142cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080042d0  080042d0  000142d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  080042d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
  7 .bss          00000388  20000074  20000074  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200003fc  200003fc  00020074  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017a86  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002c86  00000000  00000000  00037b2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000081f1  00000000  00000000  0003a7b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000ad0  00000000  00000000  000429a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000f70  00000000  00000000  00043478  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006494  00000000  00000000  000443e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000043ac  00000000  00000000  0004a87c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004ec28  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002400  00000000  00000000  0004eca4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004238 	.word	0x08004238

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08004238 	.word	0x08004238

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__aeabi_d2iz>:
 8000a14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a1c:	d215      	bcs.n	8000a4a <__aeabi_d2iz+0x36>
 8000a1e:	d511      	bpl.n	8000a44 <__aeabi_d2iz+0x30>
 8000a20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a28:	d912      	bls.n	8000a50 <__aeabi_d2iz+0x3c>
 8000a2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a3e:	bf18      	it	ne
 8000a40:	4240      	negne	r0, r0
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d105      	bne.n	8000a5c <__aeabi_d2iz+0x48>
 8000a50:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a54:	bf08      	it	eq
 8000a56:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop

08000a64 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a64:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a66:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <HAL_InitTick+0x3c>)
 8000a68:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <HAL_InitTick+0x40>)
{
 8000a6a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a6c:	7818      	ldrb	r0, [r3, #0]
 8000a6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a72:	fbb3 f3f0 	udiv	r3, r3, r0
 8000a76:	6810      	ldr	r0, [r2, #0]
 8000a78:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a7c:	f000 f88c 	bl	8000b98 <HAL_SYSTICK_Config>
 8000a80:	4604      	mov	r4, r0
 8000a82:	b958      	cbnz	r0, 8000a9c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a84:	2d0f      	cmp	r5, #15
 8000a86:	d809      	bhi.n	8000a9c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a88:	4602      	mov	r2, r0
 8000a8a:	4629      	mov	r1, r5
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	f000 f842 	bl	8000b18 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a94:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <HAL_InitTick+0x44>)
 8000a96:	4620      	mov	r0, r4
 8000a98:	601d      	str	r5, [r3, #0]
 8000a9a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000a9c:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000a9e:	bd38      	pop	{r3, r4, r5, pc}
 8000aa0:	2000000c 	.word	0x2000000c
 8000aa4:	20000000 	.word	0x20000000
 8000aa8:	20000004 	.word	0x20000004

08000aac <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aac:	4a07      	ldr	r2, [pc, #28]	; (8000acc <HAL_Init+0x20>)
{
 8000aae:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab0:	6813      	ldr	r3, [r2, #0]
 8000ab2:	f043 0310 	orr.w	r3, r3, #16
 8000ab6:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab8:	2003      	movs	r0, #3
 8000aba:	f000 f81b 	bl	8000af4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f7ff ffd0 	bl	8000a64 <HAL_InitTick>
  HAL_MspInit();
 8000ac4:	f002 fca4 	bl	8003410 <HAL_MspInit>
}
 8000ac8:	2000      	movs	r0, #0
 8000aca:	bd08      	pop	{r3, pc}
 8000acc:	40022000 	.word	0x40022000

08000ad0 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ad0:	4a03      	ldr	r2, [pc, #12]	; (8000ae0 <HAL_IncTick+0x10>)
 8000ad2:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <HAL_IncTick+0x14>)
 8000ad4:	6811      	ldr	r1, [r2, #0]
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	440b      	add	r3, r1
 8000ada:	6013      	str	r3, [r2, #0]
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	200000b0 	.word	0x200000b0
 8000ae4:	20000000 	.word	0x20000000

08000ae8 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000ae8:	4b01      	ldr	r3, [pc, #4]	; (8000af0 <HAL_GetTick+0x8>)
 8000aea:	6818      	ldr	r0, [r3, #0]
}
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	200000b0 	.word	0x200000b0

08000af4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af4:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000af6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000afc:	041b      	lsls	r3, r3, #16
 8000afe:	0c1b      	lsrs	r3, r3, #16
 8000b00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b04:	0200      	lsls	r0, r0, #8
 8000b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b0a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000b0e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000b10:	60d3      	str	r3, [r2, #12]
 8000b12:	4770      	bx	lr
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b1a:	b530      	push	{r4, r5, lr}
 8000b1c:	68dc      	ldr	r4, [r3, #12]
 8000b1e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b22:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b26:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b28:	2b04      	cmp	r3, #4
 8000b2a:	bf28      	it	cs
 8000b2c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b2e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b30:	f04f 0501 	mov.w	r5, #1
 8000b34:	fa05 f303 	lsl.w	r3, r5, r3
 8000b38:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b3c:	bf8c      	ite	hi
 8000b3e:	3c03      	subhi	r4, #3
 8000b40:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b42:	4019      	ands	r1, r3
 8000b44:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b46:	fa05 f404 	lsl.w	r4, r5, r4
 8000b4a:	3c01      	subs	r4, #1
 8000b4c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000b4e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b50:	ea42 0201 	orr.w	r2, r2, r1
 8000b54:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b58:	bfaf      	iteee	ge
 8000b5a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5e:	f000 000f 	andlt.w	r0, r0, #15
 8000b62:	4b06      	ldrlt	r3, [pc, #24]	; (8000b7c <HAL_NVIC_SetPriority+0x64>)
 8000b64:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b66:	bfa5      	ittet	ge
 8000b68:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000b6c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b70:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000b74:	bd30      	pop	{r4, r5, pc}
 8000b76:	bf00      	nop
 8000b78:	e000ed00 	.word	0xe000ed00
 8000b7c:	e000ed14 	.word	0xe000ed14

08000b80 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000b80:	0942      	lsrs	r2, r0, #5
 8000b82:	2301      	movs	r3, #1
 8000b84:	f000 001f 	and.w	r0, r0, #31
 8000b88:	fa03 f000 	lsl.w	r0, r3, r0
 8000b8c:	4b01      	ldr	r3, [pc, #4]	; (8000b94 <HAL_NVIC_EnableIRQ+0x14>)
 8000b8e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000b92:	4770      	bx	lr
 8000b94:	e000e100 	.word	0xe000e100

08000b98 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b98:	3801      	subs	r0, #1
 8000b9a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b9e:	d20a      	bcs.n	8000bb6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba2:	4a07      	ldr	r2, [pc, #28]	; (8000bc0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ba4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba6:	21f0      	movs	r1, #240	; 0xf0
 8000ba8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bac:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bae:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bb0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000bb6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000e010 	.word	0xe000e010
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bc4:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8000bc8:	2a02      	cmp	r2, #2
{  
 8000bca:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bcc:	d003      	beq.n	8000bd6 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bce:	2204      	movs	r2, #4
 8000bd0:	6382      	str	r2, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	bd10      	pop	{r4, pc}
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bd6:	6802      	ldr	r2, [r0, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000bd8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bda:	6811      	ldr	r1, [r2, #0]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000bdc:	6b43      	ldr	r3, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bde:	f021 010e 	bic.w	r1, r1, #14
 8000be2:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000be4:	6811      	ldr	r1, [r2, #0]
 8000be6:	f021 0101 	bic.w	r1, r1, #1
 8000bea:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000bec:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000bee:	2101      	movs	r1, #1
 8000bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf4:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8000bf6:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8000bf8:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000bfc:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000c00:	b113      	cbz	r3, 8000c08 <HAL_DMA_Abort_IT+0x44>
    {
      hdma->XferAbortCallback(hdma);
 8000c02:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000c04:	4620      	mov	r0, r4
 8000c06:	bd10      	pop	{r4, pc}
 8000c08:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 8000c0a:	bd10      	pop	{r4, pc}

08000c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000c10:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c14:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8000da8 <HAL_GPIO_Init+0x19c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c18:	4a61      	ldr	r2, [pc, #388]	; (8000da0 <HAL_GPIO_Init+0x194>)
  uint32_t position = 0x00U;
 8000c1a:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000c1c:	fa38 f403 	lsrs.w	r4, r8, r3
 8000c20:	d102      	bne.n	8000c28 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 8000c22:	b003      	add	sp, #12
 8000c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c28:	f04f 0e01 	mov.w	lr, #1
 8000c2c:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 8000c30:	ea18 060e 	ands.w	r6, r8, lr
 8000c34:	f000 80a6 	beq.w	8000d84 <HAL_GPIO_Init+0x178>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c38:	684c      	ldr	r4, [r1, #4]
 8000c3a:	f024 0710 	bic.w	r7, r4, #16
 8000c3e:	2f02      	cmp	r7, #2
 8000c40:	d116      	bne.n	8000c70 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 8000c42:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000c46:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c4a:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000c4e:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c52:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000c56:	f04f 0c0f 	mov.w	ip, #15
 8000c5a:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000c5e:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c62:	690d      	ldr	r5, [r1, #16]
 8000c64:	fa05 f50b 	lsl.w	r5, r5, fp
 8000c68:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000c6c:	f8ca 5020 	str.w	r5, [sl, #32]
 8000c70:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c74:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000c76:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c7a:	fa05 f50a 	lsl.w	r5, r5, sl
 8000c7e:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c80:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c84:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c88:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c8c:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c8e:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c92:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000c94:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c98:	d811      	bhi.n	8000cbe <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8000c9a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c9c:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ca0:	68cf      	ldr	r7, [r1, #12]
 8000ca2:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000ca6:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000caa:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000cac:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cae:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cb2:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000cb6:	409f      	lsls	r7, r3
 8000cb8:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000cbc:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000cbe:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cc0:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cc2:	688f      	ldr	r7, [r1, #8]
 8000cc4:	fa07 f70a 	lsl.w	r7, r7, sl
 8000cc8:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000cca:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ccc:	00e5      	lsls	r5, r4, #3
 8000cce:	d559      	bpl.n	8000d84 <HAL_GPIO_Init+0x178>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd0:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000cd4:	f045 0501 	orr.w	r5, r5, #1
 8000cd8:	f8c9 5018 	str.w	r5, [r9, #24]
 8000cdc:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000ce0:	f023 0703 	bic.w	r7, r3, #3
 8000ce4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000ce8:	f005 0501 	and.w	r5, r5, #1
 8000cec:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000cf0:	9501      	str	r5, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000cf2:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf6:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000cf8:	68bd      	ldr	r5, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000cfa:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000cfe:	f04f 0e0f 	mov.w	lr, #15
 8000d02:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d06:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000d0a:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d0e:	d03b      	beq.n	8000d88 <HAL_GPIO_Init+0x17c>
 8000d10:	4d24      	ldr	r5, [pc, #144]	; (8000da4 <HAL_GPIO_Init+0x198>)
 8000d12:	42a8      	cmp	r0, r5
 8000d14:	d03a      	beq.n	8000d8c <HAL_GPIO_Init+0x180>
 8000d16:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d1a:	42a8      	cmp	r0, r5
 8000d1c:	d038      	beq.n	8000d90 <HAL_GPIO_Init+0x184>
 8000d1e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d22:	42a8      	cmp	r0, r5
 8000d24:	d036      	beq.n	8000d94 <HAL_GPIO_Init+0x188>
 8000d26:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d2a:	42a8      	cmp	r0, r5
 8000d2c:	d034      	beq.n	8000d98 <HAL_GPIO_Init+0x18c>
 8000d2e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d32:	42a8      	cmp	r0, r5
 8000d34:	d032      	beq.n	8000d9c <HAL_GPIO_Init+0x190>
 8000d36:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d3a:	42a8      	cmp	r0, r5
 8000d3c:	bf14      	ite	ne
 8000d3e:	2507      	movne	r5, #7
 8000d40:	2506      	moveq	r5, #6
 8000d42:	fa05 f50c 	lsl.w	r5, r5, ip
 8000d46:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d4a:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000d4c:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000d4e:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d50:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000d54:	bf0c      	ite	eq
 8000d56:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000d58:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 8000d5a:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000d5c:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d5e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000d62:	bf0c      	ite	eq
 8000d64:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000d66:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8000d68:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000d6a:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d6c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000d70:	bf0c      	ite	eq
 8000d72:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000d74:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 8000d76:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000d78:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d7a:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000d7c:	bf54      	ite	pl
 8000d7e:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8000d80:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 8000d82:	60d5      	str	r5, [r2, #12]
    position++;
 8000d84:	3301      	adds	r3, #1
 8000d86:	e749      	b.n	8000c1c <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d88:	2500      	movs	r5, #0
 8000d8a:	e7da      	b.n	8000d42 <HAL_GPIO_Init+0x136>
 8000d8c:	2501      	movs	r5, #1
 8000d8e:	e7d8      	b.n	8000d42 <HAL_GPIO_Init+0x136>
 8000d90:	2502      	movs	r5, #2
 8000d92:	e7d6      	b.n	8000d42 <HAL_GPIO_Init+0x136>
 8000d94:	2503      	movs	r5, #3
 8000d96:	e7d4      	b.n	8000d42 <HAL_GPIO_Init+0x136>
 8000d98:	2504      	movs	r5, #4
 8000d9a:	e7d2      	b.n	8000d42 <HAL_GPIO_Init+0x136>
 8000d9c:	2505      	movs	r5, #5
 8000d9e:	e7d0      	b.n	8000d42 <HAL_GPIO_Init+0x136>
 8000da0:	40010400 	.word	0x40010400
 8000da4:	48000400 	.word	0x48000400
 8000da8:	40021000 	.word	0x40021000

08000dac <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000dac:	6903      	ldr	r3, [r0, #16]
 8000dae:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000db0:	bf14      	ite	ne
 8000db2:	2001      	movne	r0, #1
 8000db4:	2000      	moveq	r0, #0
 8000db6:	4770      	bx	lr

08000db8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000db8:	b10a      	cbz	r2, 8000dbe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dba:	6181      	str	r1, [r0, #24]
 8000dbc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dbe:	6281      	str	r1, [r0, #40]	; 0x28
 8000dc0:	4770      	bx	lr
	...

08000dc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dc4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dc8:	4605      	mov	r5, r0
 8000dca:	b918      	cbnz	r0, 8000dd4 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000dcc:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000dce:	b002      	add	sp, #8
 8000dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dd4:	6803      	ldr	r3, [r0, #0]
 8000dd6:	07df      	lsls	r7, r3, #31
 8000dd8:	d411      	bmi.n	8000dfe <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dda:	682b      	ldr	r3, [r5, #0]
 8000ddc:	079e      	lsls	r6, r3, #30
 8000dde:	f100 8088 	bmi.w	8000ef2 <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000de2:	682b      	ldr	r3, [r5, #0]
 8000de4:	071c      	lsls	r4, r3, #28
 8000de6:	f100 80fc 	bmi.w	8000fe2 <HAL_RCC_OscConfig+0x21e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dea:	682b      	ldr	r3, [r5, #0]
 8000dec:	0758      	lsls	r0, r3, #29
 8000dee:	f100 8145 	bmi.w	800107c <HAL_RCC_OscConfig+0x2b8>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000df2:	69aa      	ldr	r2, [r5, #24]
 8000df4:	2a00      	cmp	r2, #0
 8000df6:	f040 81dc 	bne.w	80011b2 <HAL_RCC_OscConfig+0x3ee>
  return HAL_OK;
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	e7e7      	b.n	8000dce <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dfe:	4cbd      	ldr	r4, [pc, #756]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000e00:	6863      	ldr	r3, [r4, #4]
 8000e02:	f003 030c 	and.w	r3, r3, #12
 8000e06:	2b04      	cmp	r3, #4
 8000e08:	d00a      	beq.n	8000e20 <HAL_RCC_OscConfig+0x5c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e0a:	6863      	ldr	r3, [r4, #4]
 8000e0c:	f003 030c 	and.w	r3, r3, #12
 8000e10:	2b08      	cmp	r3, #8
 8000e12:	d119      	bne.n	8000e48 <HAL_RCC_OscConfig+0x84>
 8000e14:	6863      	ldr	r3, [r4, #4]
 8000e16:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e1e:	d113      	bne.n	8000e48 <HAL_RCC_OscConfig+0x84>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e24:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e28:	6821      	ldr	r1, [r4, #0]
 8000e2a:	fa93 f3a3 	rbit	r3, r3
 8000e2e:	fab3 f383 	clz	r3, r3
 8000e32:	f003 031f 	and.w	r3, r3, #31
 8000e36:	2201      	movs	r2, #1
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	420b      	tst	r3, r1
 8000e3e:	d0cc      	beq.n	8000dda <HAL_RCC_OscConfig+0x16>
 8000e40:	686b      	ldr	r3, [r5, #4]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d1c9      	bne.n	8000dda <HAL_RCC_OscConfig+0x16>
 8000e46:	e7c1      	b.n	8000dcc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e48:	686b      	ldr	r3, [r5, #4]
 8000e4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e4e:	d11e      	bne.n	8000e8e <HAL_RCC_OscConfig+0xca>
 8000e50:	6823      	ldr	r3, [r4, #0]
 8000e52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e56:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000e58:	f7ff fe46 	bl	8000ae8 <HAL_GetTick>
 8000e5c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000e60:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e62:	2701      	movs	r7, #1
 8000e64:	fa96 f3a6 	rbit	r3, r6
 8000e68:	6822      	ldr	r2, [r4, #0]
 8000e6a:	fa96 f3a6 	rbit	r3, r6
 8000e6e:	fab3 f383 	clz	r3, r3
 8000e72:	f003 031f 	and.w	r3, r3, #31
 8000e76:	fa07 f303 	lsl.w	r3, r7, r3
 8000e7a:	4213      	tst	r3, r2
 8000e7c:	d1ad      	bne.n	8000dda <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e7e:	f7ff fe33 	bl	8000ae8 <HAL_GetTick>
 8000e82:	eba0 0008 	sub.w	r0, r0, r8
 8000e86:	2864      	cmp	r0, #100	; 0x64
 8000e88:	d9ec      	bls.n	8000e64 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8000e8a:	2003      	movs	r0, #3
 8000e8c:	e79f      	b.n	8000dce <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e8e:	bb0b      	cbnz	r3, 8000ed4 <HAL_RCC_OscConfig+0x110>
 8000e90:	6823      	ldr	r3, [r4, #0]
 8000e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e96:	6023      	str	r3, [r4, #0]
 8000e98:	6823      	ldr	r3, [r4, #0]
 8000e9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e9e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ea0:	f7ff fe22 	bl	8000ae8 <HAL_GetTick>
 8000ea4:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000ea8:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eaa:	2701      	movs	r7, #1
 8000eac:	fa96 f3a6 	rbit	r3, r6
 8000eb0:	6822      	ldr	r2, [r4, #0]
 8000eb2:	fa96 f3a6 	rbit	r3, r6
 8000eb6:	fab3 f383 	clz	r3, r3
 8000eba:	f003 031f 	and.w	r3, r3, #31
 8000ebe:	fa07 f303 	lsl.w	r3, r7, r3
 8000ec2:	4213      	tst	r3, r2
 8000ec4:	d089      	beq.n	8000dda <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ec6:	f7ff fe0f 	bl	8000ae8 <HAL_GetTick>
 8000eca:	eba0 0008 	sub.w	r0, r0, r8
 8000ece:	2864      	cmp	r0, #100	; 0x64
 8000ed0:	d9ec      	bls.n	8000eac <HAL_RCC_OscConfig+0xe8>
 8000ed2:	e7da      	b.n	8000e8a <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ed4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ed8:	6823      	ldr	r3, [r4, #0]
 8000eda:	d103      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x120>
 8000edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ee0:	6023      	str	r3, [r4, #0]
 8000ee2:	e7b5      	b.n	8000e50 <HAL_RCC_OscConfig+0x8c>
 8000ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ee8:	6023      	str	r3, [r4, #0]
 8000eea:	6823      	ldr	r3, [r4, #0]
 8000eec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ef0:	e7b1      	b.n	8000e56 <HAL_RCC_OscConfig+0x92>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ef2:	4c80      	ldr	r4, [pc, #512]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000ef4:	6863      	ldr	r3, [r4, #4]
 8000ef6:	f013 0f0c 	tst.w	r3, #12
 8000efa:	d00a      	beq.n	8000f12 <HAL_RCC_OscConfig+0x14e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000efc:	6863      	ldr	r3, [r4, #4]
 8000efe:	f003 030c 	and.w	r3, r3, #12
 8000f02:	2b08      	cmp	r3, #8
 8000f04:	d125      	bne.n	8000f52 <HAL_RCC_OscConfig+0x18e>
 8000f06:	6863      	ldr	r3, [r4, #4]
 8000f08:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000f0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f10:	d11f      	bne.n	8000f52 <HAL_RCC_OscConfig+0x18e>
 8000f12:	2302      	movs	r3, #2
 8000f14:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f18:	6821      	ldr	r1, [r4, #0]
 8000f1a:	fa93 f3a3 	rbit	r3, r3
 8000f1e:	fab3 f383 	clz	r3, r3
 8000f22:	f003 031f 	and.w	r3, r3, #31
 8000f26:	2201      	movs	r2, #1
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	420b      	tst	r3, r1
 8000f2e:	d003      	beq.n	8000f38 <HAL_RCC_OscConfig+0x174>
 8000f30:	68eb      	ldr	r3, [r5, #12]
 8000f32:	4293      	cmp	r3, r2
 8000f34:	f47f af4a 	bne.w	8000dcc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f38:	6821      	ldr	r1, [r4, #0]
 8000f3a:	23f8      	movs	r3, #248	; 0xf8
 8000f3c:	fa93 f3a3 	rbit	r3, r3
 8000f40:	fab3 f283 	clz	r2, r3
 8000f44:	692b      	ldr	r3, [r5, #16]
 8000f46:	4093      	lsls	r3, r2
 8000f48:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	6023      	str	r3, [r4, #0]
 8000f50:	e747      	b.n	8000de2 <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f52:	68ea      	ldr	r2, [r5, #12]
 8000f54:	2601      	movs	r6, #1
 8000f56:	b30a      	cbz	r2, 8000f9c <HAL_RCC_OscConfig+0x1d8>
 8000f58:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000f5c:	fab3 f383 	clz	r3, r3
 8000f60:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f64:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	2702      	movs	r7, #2
 8000f6c:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000f6e:	f7ff fdbb 	bl	8000ae8 <HAL_GetTick>
 8000f72:	4680      	mov	r8, r0
 8000f74:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f78:	6822      	ldr	r2, [r4, #0]
 8000f7a:	fa97 f3a7 	rbit	r3, r7
 8000f7e:	fab3 f383 	clz	r3, r3
 8000f82:	f003 031f 	and.w	r3, r3, #31
 8000f86:	fa06 f303 	lsl.w	r3, r6, r3
 8000f8a:	4213      	tst	r3, r2
 8000f8c:	d1d4      	bne.n	8000f38 <HAL_RCC_OscConfig+0x174>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f8e:	f7ff fdab 	bl	8000ae8 <HAL_GetTick>
 8000f92:	eba0 0008 	sub.w	r0, r0, r8
 8000f96:	2802      	cmp	r0, #2
 8000f98:	d9ec      	bls.n	8000f74 <HAL_RCC_OscConfig+0x1b0>
 8000f9a:	e776      	b.n	8000e8a <HAL_RCC_OscConfig+0xc6>
 8000f9c:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8000fa0:	fab3 f383 	clz	r3, r3
 8000fa4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fa8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	2702      	movs	r7, #2
 8000fb0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fb2:	f7ff fd99 	bl	8000ae8 <HAL_GetTick>
 8000fb6:	4680      	mov	r8, r0
 8000fb8:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fbc:	6822      	ldr	r2, [r4, #0]
 8000fbe:	fa97 f3a7 	rbit	r3, r7
 8000fc2:	fab3 f383 	clz	r3, r3
 8000fc6:	f003 031f 	and.w	r3, r3, #31
 8000fca:	fa06 f303 	lsl.w	r3, r6, r3
 8000fce:	4213      	tst	r3, r2
 8000fd0:	f43f af07 	beq.w	8000de2 <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fd4:	f7ff fd88 	bl	8000ae8 <HAL_GetTick>
 8000fd8:	eba0 0008 	sub.w	r0, r0, r8
 8000fdc:	2802      	cmp	r0, #2
 8000fde:	d9eb      	bls.n	8000fb8 <HAL_RCC_OscConfig+0x1f4>
 8000fe0:	e753      	b.n	8000e8a <HAL_RCC_OscConfig+0xc6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fe2:	696a      	ldr	r2, [r5, #20]
 8000fe4:	4e43      	ldr	r6, [pc, #268]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000fe6:	4944      	ldr	r1, [pc, #272]	; (80010f8 <HAL_RCC_OscConfig+0x334>)
 8000fe8:	2401      	movs	r4, #1
 8000fea:	b31a      	cbz	r2, 8001034 <HAL_RCC_OscConfig+0x270>
 8000fec:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8000ff0:	fab3 f383 	clz	r3, r3
 8000ff4:	440b      	add	r3, r1
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	2702      	movs	r7, #2
 8000ffa:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8000ffc:	f7ff fd74 	bl	8000ae8 <HAL_GetTick>
 8001000:	4680      	mov	r8, r0
 8001002:	fa97 f3a7 	rbit	r3, r7
 8001006:	fa97 f3a7 	rbit	r3, r7
 800100a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800100e:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001010:	fa97 f3a7 	rbit	r3, r7
 8001014:	fab3 f383 	clz	r3, r3
 8001018:	f003 031f 	and.w	r3, r3, #31
 800101c:	fa04 f303 	lsl.w	r3, r4, r3
 8001020:	4213      	tst	r3, r2
 8001022:	f47f aee2 	bne.w	8000dea <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001026:	f7ff fd5f 	bl	8000ae8 <HAL_GetTick>
 800102a:	eba0 0008 	sub.w	r0, r0, r8
 800102e:	2802      	cmp	r0, #2
 8001030:	d9e7      	bls.n	8001002 <HAL_RCC_OscConfig+0x23e>
 8001032:	e72a      	b.n	8000e8a <HAL_RCC_OscConfig+0xc6>
 8001034:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8001038:	fab3 f383 	clz	r3, r3
 800103c:	440b      	add	r3, r1
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	2702      	movs	r7, #2
 8001042:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001044:	f7ff fd50 	bl	8000ae8 <HAL_GetTick>
 8001048:	4680      	mov	r8, r0
 800104a:	fa97 f3a7 	rbit	r3, r7
 800104e:	fa97 f3a7 	rbit	r3, r7
 8001052:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001056:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001058:	fa97 f3a7 	rbit	r3, r7
 800105c:	fab3 f383 	clz	r3, r3
 8001060:	f003 031f 	and.w	r3, r3, #31
 8001064:	fa04 f303 	lsl.w	r3, r4, r3
 8001068:	4213      	tst	r3, r2
 800106a:	f43f aebe 	beq.w	8000dea <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800106e:	f7ff fd3b 	bl	8000ae8 <HAL_GetTick>
 8001072:	eba0 0008 	sub.w	r0, r0, r8
 8001076:	2802      	cmp	r0, #2
 8001078:	d9e7      	bls.n	800104a <HAL_RCC_OscConfig+0x286>
 800107a:	e706      	b.n	8000e8a <HAL_RCC_OscConfig+0xc6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800107c:	4c1d      	ldr	r4, [pc, #116]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 800107e:	69e3      	ldr	r3, [r4, #28]
 8001080:	00d9      	lsls	r1, r3, #3
 8001082:	d434      	bmi.n	80010ee <HAL_RCC_OscConfig+0x32a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001084:	69e3      	ldr	r3, [r4, #28]
 8001086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108a:	61e3      	str	r3, [r4, #28]
 800108c:	69e3      	ldr	r3, [r4, #28]
 800108e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001092:	9301      	str	r3, [sp, #4]
 8001094:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001096:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001098:	4f18      	ldr	r7, [pc, #96]	; (80010fc <HAL_RCC_OscConfig+0x338>)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	05da      	lsls	r2, r3, #23
 800109e:	d52f      	bpl.n	8001100 <HAL_RCC_OscConfig+0x33c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010a0:	68ab      	ldr	r3, [r5, #8]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d13d      	bne.n	8001122 <HAL_RCC_OscConfig+0x35e>
 80010a6:	6a23      	ldr	r3, [r4, #32]
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80010ae:	f7ff fd1b 	bl	8000ae8 <HAL_GetTick>
 80010b2:	2702      	movs	r7, #2
 80010b4:	4682      	mov	sl, r0
 80010b6:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010b8:	f04f 0801 	mov.w	r8, #1
 80010bc:	fa97 f3a7 	rbit	r3, r7
 80010c0:	fa97 f3a7 	rbit	r3, r7
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d06c      	beq.n	80011a2 <HAL_RCC_OscConfig+0x3de>
 80010c8:	6a22      	ldr	r2, [r4, #32]
 80010ca:	fa99 f3a9 	rbit	r3, r9
 80010ce:	fab3 f383 	clz	r3, r3
 80010d2:	f003 031f 	and.w	r3, r3, #31
 80010d6:	fa08 f303 	lsl.w	r3, r8, r3
 80010da:	4213      	tst	r3, r2
 80010dc:	d058      	beq.n	8001190 <HAL_RCC_OscConfig+0x3cc>
    if(pwrclkchanged == SET)
 80010de:	2e00      	cmp	r6, #0
 80010e0:	f43f ae87 	beq.w	8000df2 <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80010e4:	69e3      	ldr	r3, [r4, #28]
 80010e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010ea:	61e3      	str	r3, [r4, #28]
 80010ec:	e681      	b.n	8000df2 <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 80010ee:	2600      	movs	r6, #0
 80010f0:	e7d2      	b.n	8001098 <HAL_RCC_OscConfig+0x2d4>
 80010f2:	bf00      	nop
 80010f4:	40021000 	.word	0x40021000
 80010f8:	10908120 	.word	0x10908120
 80010fc:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001106:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001108:	f7ff fcee 	bl	8000ae8 <HAL_GetTick>
 800110c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	05db      	lsls	r3, r3, #23
 8001112:	d4c5      	bmi.n	80010a0 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001114:	f7ff fce8 	bl	8000ae8 <HAL_GetTick>
 8001118:	eba0 0008 	sub.w	r0, r0, r8
 800111c:	2864      	cmp	r0, #100	; 0x64
 800111e:	d9f6      	bls.n	800110e <HAL_RCC_OscConfig+0x34a>
 8001120:	e6b3      	b.n	8000e8a <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001122:	bb3b      	cbnz	r3, 8001174 <HAL_RCC_OscConfig+0x3b0>
 8001124:	6a23      	ldr	r3, [r4, #32]
 8001126:	f023 0301 	bic.w	r3, r3, #1
 800112a:	6223      	str	r3, [r4, #32]
 800112c:	6a23      	ldr	r3, [r4, #32]
 800112e:	f023 0304 	bic.w	r3, r3, #4
 8001132:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001134:	f7ff fcd8 	bl	8000ae8 <HAL_GetTick>
 8001138:	2702      	movs	r7, #2
 800113a:	4682      	mov	sl, r0
 800113c:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800113e:	f04f 0801 	mov.w	r8, #1
 8001142:	fa97 f3a7 	rbit	r3, r7
 8001146:	fa97 f3a7 	rbit	r3, r7
 800114a:	b373      	cbz	r3, 80011aa <HAL_RCC_OscConfig+0x3e6>
 800114c:	6a22      	ldr	r2, [r4, #32]
 800114e:	fa99 f3a9 	rbit	r3, r9
 8001152:	fab3 f383 	clz	r3, r3
 8001156:	f003 031f 	and.w	r3, r3, #31
 800115a:	fa08 f303 	lsl.w	r3, r8, r3
 800115e:	4213      	tst	r3, r2
 8001160:	d0bd      	beq.n	80010de <HAL_RCC_OscConfig+0x31a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001162:	f7ff fcc1 	bl	8000ae8 <HAL_GetTick>
 8001166:	f241 3388 	movw	r3, #5000	; 0x1388
 800116a:	eba0 000a 	sub.w	r0, r0, sl
 800116e:	4298      	cmp	r0, r3
 8001170:	d9e7      	bls.n	8001142 <HAL_RCC_OscConfig+0x37e>
 8001172:	e68a      	b.n	8000e8a <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001174:	2b05      	cmp	r3, #5
 8001176:	6a23      	ldr	r3, [r4, #32]
 8001178:	d103      	bne.n	8001182 <HAL_RCC_OscConfig+0x3be>
 800117a:	f043 0304 	orr.w	r3, r3, #4
 800117e:	6223      	str	r3, [r4, #32]
 8001180:	e791      	b.n	80010a6 <HAL_RCC_OscConfig+0x2e2>
 8001182:	f023 0301 	bic.w	r3, r3, #1
 8001186:	6223      	str	r3, [r4, #32]
 8001188:	6a23      	ldr	r3, [r4, #32]
 800118a:	f023 0304 	bic.w	r3, r3, #4
 800118e:	e78d      	b.n	80010ac <HAL_RCC_OscConfig+0x2e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001190:	f7ff fcaa 	bl	8000ae8 <HAL_GetTick>
 8001194:	f241 3388 	movw	r3, #5000	; 0x1388
 8001198:	eba0 000a 	sub.w	r0, r0, sl
 800119c:	4298      	cmp	r0, r3
 800119e:	d98d      	bls.n	80010bc <HAL_RCC_OscConfig+0x2f8>
 80011a0:	e673      	b.n	8000e8a <HAL_RCC_OscConfig+0xc6>
 80011a2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80011a8:	e78f      	b.n	80010ca <HAL_RCC_OscConfig+0x306>
 80011aa:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80011b0:	e7cd      	b.n	800114e <HAL_RCC_OscConfig+0x38a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011b2:	4c44      	ldr	r4, [pc, #272]	; (80012c4 <HAL_RCC_OscConfig+0x500>)
 80011b4:	6863      	ldr	r3, [r4, #4]
 80011b6:	f003 030c 	and.w	r3, r3, #12
 80011ba:	2b08      	cmp	r3, #8
 80011bc:	f43f ae06 	beq.w	8000dcc <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011c0:	2a02      	cmp	r2, #2
 80011c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011c6:	d158      	bne.n	800127a <HAL_RCC_OscConfig+0x4b6>
 80011c8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80011cc:	fab3 f383 	clz	r3, r3
 80011d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011de:	f7ff fc83 	bl	8000ae8 <HAL_GetTick>
 80011e2:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80011e6:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011e8:	2601      	movs	r6, #1
 80011ea:	fa97 f3a7 	rbit	r3, r7
 80011ee:	6822      	ldr	r2, [r4, #0]
 80011f0:	fa97 f3a7 	rbit	r3, r7
 80011f4:	fab3 f383 	clz	r3, r3
 80011f8:	f003 031f 	and.w	r3, r3, #31
 80011fc:	fa06 f303 	lsl.w	r3, r6, r3
 8001200:	4213      	tst	r3, r2
 8001202:	d133      	bne.n	800126c <HAL_RCC_OscConfig+0x4a8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001204:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001206:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001208:	f023 030f 	bic.w	r3, r3, #15
 800120c:	4313      	orrs	r3, r2
 800120e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001210:	6862      	ldr	r2, [r4, #4]
 8001212:	6a2b      	ldr	r3, [r5, #32]
 8001214:	69e9      	ldr	r1, [r5, #28]
 8001216:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 800121a:	430b      	orrs	r3, r1
 800121c:	4313      	orrs	r3, r2
 800121e:	6063      	str	r3, [r4, #4]
 8001220:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001224:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001228:	fab3 f383 	clz	r3, r3
 800122c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001230:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800123a:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800123c:	f7ff fc54 	bl	8000ae8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001240:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8001242:	4607      	mov	r7, r0
 8001244:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001248:	6822      	ldr	r2, [r4, #0]
 800124a:	fa95 f3a5 	rbit	r3, r5
 800124e:	fab3 f383 	clz	r3, r3
 8001252:	f003 031f 	and.w	r3, r3, #31
 8001256:	fa06 f303 	lsl.w	r3, r6, r3
 800125a:	4213      	tst	r3, r2
 800125c:	f47f adcd 	bne.w	8000dfa <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001260:	f7ff fc42 	bl	8000ae8 <HAL_GetTick>
 8001264:	1bc0      	subs	r0, r0, r7
 8001266:	2802      	cmp	r0, #2
 8001268:	d9ec      	bls.n	8001244 <HAL_RCC_OscConfig+0x480>
 800126a:	e60e      	b.n	8000e8a <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800126c:	f7ff fc3c 	bl	8000ae8 <HAL_GetTick>
 8001270:	eba0 0008 	sub.w	r0, r0, r8
 8001274:	2802      	cmp	r0, #2
 8001276:	d9b8      	bls.n	80011ea <HAL_RCC_OscConfig+0x426>
 8001278:	e607      	b.n	8000e8a <HAL_RCC_OscConfig+0xc6>
 800127a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800127e:	fab3 f383 	clz	r3, r3
 8001282:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001286:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001290:	f7ff fc2a 	bl	8000ae8 <HAL_GetTick>
 8001294:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001298:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800129a:	2601      	movs	r6, #1
 800129c:	fa95 f3a5 	rbit	r3, r5
 80012a0:	6822      	ldr	r2, [r4, #0]
 80012a2:	fa95 f3a5 	rbit	r3, r5
 80012a6:	fab3 f383 	clz	r3, r3
 80012aa:	f003 031f 	and.w	r3, r3, #31
 80012ae:	fa06 f303 	lsl.w	r3, r6, r3
 80012b2:	4213      	tst	r3, r2
 80012b4:	f43f ada1 	beq.w	8000dfa <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012b8:	f7ff fc16 	bl	8000ae8 <HAL_GetTick>
 80012bc:	1bc0      	subs	r0, r0, r7
 80012be:	2802      	cmp	r0, #2
 80012c0:	d9ec      	bls.n	800129c <HAL_RCC_OscConfig+0x4d8>
 80012c2:	e5e2      	b.n	8000e8a <HAL_RCC_OscConfig+0xc6>
 80012c4:	40021000 	.word	0x40021000

080012c8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80012c8:	4911      	ldr	r1, [pc, #68]	; (8001310 <HAL_RCC_GetSysClockFreq+0x48>)
 80012ca:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012cc:	f003 020c 	and.w	r2, r3, #12
 80012d0:	2a08      	cmp	r2, #8
 80012d2:	d11a      	bne.n	800130a <HAL_RCC_GetSysClockFreq+0x42>
 80012d4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80012d8:	fa92 f2a2 	rbit	r2, r2
 80012dc:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80012de:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80012e2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80012e4:	fa90 f0a0 	rbit	r0, r0
 80012e8:	fab0 f080 	clz	r0, r0
 80012ec:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80012f0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80012f4:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80012f6:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80012f8:	4a06      	ldr	r2, [pc, #24]	; (8001314 <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80012fa:	4807      	ldr	r0, [pc, #28]	; (8001318 <HAL_RCC_GetSysClockFreq+0x50>)
 80012fc:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80012fe:	4807      	ldr	r0, [pc, #28]	; (800131c <HAL_RCC_GetSysClockFreq+0x54>)
 8001300:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001304:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8001306:	4348      	muls	r0, r1
 8001308:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800130a:	4804      	ldr	r0, [pc, #16]	; (800131c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40021000 	.word	0x40021000
 8001314:	08004250 	.word	0x08004250
 8001318:	08004260 	.word	0x08004260
 800131c:	007a1200 	.word	0x007a1200

08001320 <HAL_RCC_ClockConfig>:
{
 8001320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001324:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001326:	4604      	mov	r4, r0
 8001328:	b910      	cbnz	r0, 8001330 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800132a:	2001      	movs	r0, #1
 800132c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001330:	4a4c      	ldr	r2, [pc, #304]	; (8001464 <HAL_RCC_ClockConfig+0x144>)
 8001332:	6813      	ldr	r3, [r2, #0]
 8001334:	f003 0307 	and.w	r3, r3, #7
 8001338:	428b      	cmp	r3, r1
 800133a:	d32e      	bcc.n	800139a <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800133c:	6822      	ldr	r2, [r4, #0]
 800133e:	0791      	lsls	r1, r2, #30
 8001340:	d436      	bmi.n	80013b0 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001342:	07d2      	lsls	r2, r2, #31
 8001344:	d43c      	bmi.n	80013c0 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001346:	4a47      	ldr	r2, [pc, #284]	; (8001464 <HAL_RCC_ClockConfig+0x144>)
 8001348:	6813      	ldr	r3, [r2, #0]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	429d      	cmp	r5, r3
 8001350:	d375      	bcc.n	800143e <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001352:	6822      	ldr	r2, [r4, #0]
 8001354:	4d44      	ldr	r5, [pc, #272]	; (8001468 <HAL_RCC_ClockConfig+0x148>)
 8001356:	f012 0f04 	tst.w	r2, #4
 800135a:	d17c      	bne.n	8001456 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800135c:	0713      	lsls	r3, r2, #28
 800135e:	d506      	bpl.n	800136e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001360:	686b      	ldr	r3, [r5, #4]
 8001362:	6922      	ldr	r2, [r4, #16]
 8001364:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001368:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800136c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800136e:	f7ff ffab 	bl	80012c8 <HAL_RCC_GetSysClockFreq>
 8001372:	686b      	ldr	r3, [r5, #4]
 8001374:	22f0      	movs	r2, #240	; 0xf0
 8001376:	fa92 f2a2 	rbit	r2, r2
 800137a:	fab2 f282 	clz	r2, r2
 800137e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001382:	40d3      	lsrs	r3, r2
 8001384:	4a39      	ldr	r2, [pc, #228]	; (800146c <HAL_RCC_ClockConfig+0x14c>)
 8001386:	5cd3      	ldrb	r3, [r2, r3]
 8001388:	40d8      	lsrs	r0, r3
 800138a:	4b39      	ldr	r3, [pc, #228]	; (8001470 <HAL_RCC_ClockConfig+0x150>)
 800138c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800138e:	2000      	movs	r0, #0
 8001390:	f7ff fb68 	bl	8000a64 <HAL_InitTick>
  return HAL_OK;
 8001394:	2000      	movs	r0, #0
 8001396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800139a:	6813      	ldr	r3, [r2, #0]
 800139c:	f023 0307 	bic.w	r3, r3, #7
 80013a0:	430b      	orrs	r3, r1
 80013a2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013a4:	6813      	ldr	r3, [r2, #0]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	4299      	cmp	r1, r3
 80013ac:	d1bd      	bne.n	800132a <HAL_RCC_ClockConfig+0xa>
 80013ae:	e7c5      	b.n	800133c <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013b0:	492d      	ldr	r1, [pc, #180]	; (8001468 <HAL_RCC_ClockConfig+0x148>)
 80013b2:	68a0      	ldr	r0, [r4, #8]
 80013b4:	684b      	ldr	r3, [r1, #4]
 80013b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013ba:	4303      	orrs	r3, r0
 80013bc:	604b      	str	r3, [r1, #4]
 80013be:	e7c0      	b.n	8001342 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013c0:	6862      	ldr	r2, [r4, #4]
 80013c2:	4e29      	ldr	r6, [pc, #164]	; (8001468 <HAL_RCC_ClockConfig+0x148>)
 80013c4:	2a01      	cmp	r2, #1
 80013c6:	d127      	bne.n	8001418 <HAL_RCC_ClockConfig+0xf8>
 80013c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013cc:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d0:	6831      	ldr	r1, [r6, #0]
 80013d2:	fa93 f3a3 	rbit	r3, r3
 80013d6:	fab3 f383 	clz	r3, r3
 80013da:	f003 031f 	and.w	r3, r3, #31
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e4:	d0a1      	beq.n	800132a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013e6:	6873      	ldr	r3, [r6, #4]
 80013e8:	f023 0303 	bic.w	r3, r3, #3
 80013ec:	431a      	orrs	r2, r3
 80013ee:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 80013f0:	f7ff fb7a 	bl	8000ae8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013f4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80013f8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013fa:	6873      	ldr	r3, [r6, #4]
 80013fc:	6862      	ldr	r2, [r4, #4]
 80013fe:	f003 030c 	and.w	r3, r3, #12
 8001402:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001406:	d09e      	beq.n	8001346 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001408:	f7ff fb6e 	bl	8000ae8 <HAL_GetTick>
 800140c:	1bc0      	subs	r0, r0, r7
 800140e:	4540      	cmp	r0, r8
 8001410:	d9f3      	bls.n	80013fa <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8001412:	2003      	movs	r0, #3
}
 8001414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001418:	2a02      	cmp	r2, #2
 800141a:	bf0c      	ite	eq
 800141c:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001420:	2302      	movne	r3, #2
 8001422:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001426:	6830      	ldr	r0, [r6, #0]
 8001428:	fa93 f3a3 	rbit	r3, r3
 800142c:	fab3 f383 	clz	r3, r3
 8001430:	f003 031f 	and.w	r3, r3, #31
 8001434:	2101      	movs	r1, #1
 8001436:	fa01 f303 	lsl.w	r3, r1, r3
 800143a:	4203      	tst	r3, r0
 800143c:	e7d2      	b.n	80013e4 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800143e:	6813      	ldr	r3, [r2, #0]
 8001440:	f023 0307 	bic.w	r3, r3, #7
 8001444:	432b      	orrs	r3, r5
 8001446:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001448:	6813      	ldr	r3, [r2, #0]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	429d      	cmp	r5, r3
 8001450:	f47f af6b 	bne.w	800132a <HAL_RCC_ClockConfig+0xa>
 8001454:	e77d      	b.n	8001352 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001456:	686b      	ldr	r3, [r5, #4]
 8001458:	68e1      	ldr	r1, [r4, #12]
 800145a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800145e:	430b      	orrs	r3, r1
 8001460:	606b      	str	r3, [r5, #4]
 8001462:	e77b      	b.n	800135c <HAL_RCC_ClockConfig+0x3c>
 8001464:	40022000 	.word	0x40022000
 8001468:	40021000 	.word	0x40021000
 800146c:	0800427e 	.word	0x0800427e
 8001470:	2000000c 	.word	0x2000000c

08001474 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001474:	4b08      	ldr	r3, [pc, #32]	; (8001498 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001476:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	fa92 f2a2 	rbit	r2, r2
 8001480:	fab2 f282 	clz	r2, r2
 8001484:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001488:	40d3      	lsrs	r3, r2
 800148a:	4a04      	ldr	r2, [pc, #16]	; (800149c <HAL_RCC_GetPCLK1Freq+0x28>)
 800148c:	5cd3      	ldrb	r3, [r2, r3]
 800148e:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001490:	6810      	ldr	r0, [r2, #0]
}    
 8001492:	40d8      	lsrs	r0, r3
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	40021000 	.word	0x40021000
 800149c:	0800428e 	.word	0x0800428e
 80014a0:	2000000c 	.word	0x2000000c

080014a4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80014a4:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014a6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	fa92 f2a2 	rbit	r2, r2
 80014b0:	fab2 f282 	clz	r2, r2
 80014b4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80014b8:	40d3      	lsrs	r3, r2
 80014ba:	4a04      	ldr	r2, [pc, #16]	; (80014cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80014bc:	5cd3      	ldrb	r3, [r2, r3]
 80014be:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <HAL_RCC_GetPCLK2Freq+0x2c>)
 80014c0:	6810      	ldr	r0, [r2, #0]
} 
 80014c2:	40d8      	lsrs	r0, r3
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	40021000 	.word	0x40021000
 80014cc:	0800428e 	.word	0x0800428e
 80014d0:	2000000c 	.word	0x2000000c

080014d4 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80014d4:	6803      	ldr	r3, [r0, #0]
{
 80014d6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80014da:	03df      	lsls	r7, r3, #15
{
 80014dc:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80014de:	d523      	bpl.n	8001528 <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014e0:	4d9b      	ldr	r5, [pc, #620]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80014e2:	69eb      	ldr	r3, [r5, #28]
 80014e4:	00de      	lsls	r6, r3, #3
 80014e6:	f100 80d7 	bmi.w	8001698 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ea:	69eb      	ldr	r3, [r5, #28]
 80014ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f0:	61eb      	str	r3, [r5, #28]
 80014f2:	69eb      	ldr	r3, [r5, #28]
 80014f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f8:	9301      	str	r3, [sp, #4]
 80014fa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80014fc:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fe:	4f95      	ldr	r7, [pc, #596]	; (8001754 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	05d8      	lsls	r0, r3, #23
 8001504:	f140 80ca 	bpl.w	800169c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001508:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800150a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800150e:	f040 80da 	bne.w	80016c6 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001512:	6a2b      	ldr	r3, [r5, #32]
 8001514:	6862      	ldr	r2, [r4, #4]
 8001516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800151a:	4313      	orrs	r3, r2
 800151c:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800151e:	b11e      	cbz	r6, 8001528 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001520:	69eb      	ldr	r3, [r5, #28]
 8001522:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001526:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001528:	6820      	ldr	r0, [r4, #0]
 800152a:	07c3      	lsls	r3, r0, #31
 800152c:	d506      	bpl.n	800153c <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800152e:	4a88      	ldr	r2, [pc, #544]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001530:	68a1      	ldr	r1, [r4, #8]
 8001532:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001534:	f023 0303 	bic.w	r3, r3, #3
 8001538:	430b      	orrs	r3, r1
 800153a:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800153c:	0787      	lsls	r7, r0, #30
 800153e:	d506      	bpl.n	800154e <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001540:	4a83      	ldr	r2, [pc, #524]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001542:	68e1      	ldr	r1, [r4, #12]
 8001544:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001546:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800154a:	430b      	orrs	r3, r1
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800154e:	0746      	lsls	r6, r0, #29
 8001550:	d506      	bpl.n	8001560 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001552:	4a7f      	ldr	r2, [pc, #508]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001554:	6921      	ldr	r1, [r4, #16]
 8001556:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001558:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800155c:	430b      	orrs	r3, r1
 800155e:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001560:	0685      	lsls	r5, r0, #26
 8001562:	d506      	bpl.n	8001572 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001564:	4a7a      	ldr	r2, [pc, #488]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001566:	69e1      	ldr	r1, [r4, #28]
 8001568:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800156a:	f023 0310 	bic.w	r3, r3, #16
 800156e:	430b      	orrs	r3, r1
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001572:	0381      	lsls	r1, r0, #14
 8001574:	d506      	bpl.n	8001584 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8001576:	4a76      	ldr	r2, [pc, #472]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001578:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800157a:	6853      	ldr	r3, [r2, #4]
 800157c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001580:	430b      	orrs	r3, r1
 8001582:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001584:	0642      	lsls	r2, r0, #25
 8001586:	d506      	bpl.n	8001596 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001588:	4a71      	ldr	r2, [pc, #452]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800158a:	6a21      	ldr	r1, [r4, #32]
 800158c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800158e:	f023 0320 	bic.w	r3, r3, #32
 8001592:	430b      	orrs	r3, r1
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001596:	0343      	lsls	r3, r0, #13
 8001598:	d506      	bpl.n	80015a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800159a:	4a6d      	ldr	r2, [pc, #436]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800159c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800159e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80015a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015a4:	430b      	orrs	r3, r1
 80015a6:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80015a8:	0707      	lsls	r7, r0, #28
 80015aa:	d506      	bpl.n	80015ba <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80015ac:	4a68      	ldr	r2, [pc, #416]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80015ae:	6961      	ldr	r1, [r4, #20]
 80015b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80015b2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80015b6:	430b      	orrs	r3, r1
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80015ba:	06c6      	lsls	r6, r0, #27
 80015bc:	d506      	bpl.n	80015cc <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80015be:	4a64      	ldr	r2, [pc, #400]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80015c0:	69a1      	ldr	r1, [r4, #24]
 80015c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80015c4:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80015c8:	430b      	orrs	r3, r1
 80015ca:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80015cc:	0585      	lsls	r5, r0, #22
 80015ce:	d506      	bpl.n	80015de <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80015d0:	4a5f      	ldr	r2, [pc, #380]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80015d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80015d4:	6853      	ldr	r3, [r2, #4]
 80015d6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80015da:	430b      	orrs	r3, r1
 80015dc:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80015de:	0601      	lsls	r1, r0, #24
 80015e0:	d506      	bpl.n	80015f0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80015e2:	4a5b      	ldr	r2, [pc, #364]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80015e4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80015e6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80015e8:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80015ec:	430b      	orrs	r3, r1
 80015ee:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80015f0:	05c2      	lsls	r2, r0, #23
 80015f2:	d506      	bpl.n	8001602 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80015f4:	4a56      	ldr	r2, [pc, #344]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80015f6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80015f8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80015fa:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 80015fe:	430b      	orrs	r3, r1
 8001600:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001602:	04c3      	lsls	r3, r0, #19
 8001604:	d506      	bpl.n	8001614 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001606:	4a52      	ldr	r2, [pc, #328]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001608:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800160a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800160c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001610:	430b      	orrs	r3, r1
 8001612:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8001614:	0487      	lsls	r7, r0, #18
 8001616:	d506      	bpl.n	8001626 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8001618:	4a4d      	ldr	r2, [pc, #308]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800161a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800161c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800161e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001622:	430b      	orrs	r3, r1
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8001626:	02c6      	lsls	r6, r0, #11
 8001628:	d506      	bpl.n	8001638 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800162a:	4a49      	ldr	r2, [pc, #292]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800162c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800162e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001630:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001634:	430b      	orrs	r3, r1
 8001636:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8001638:	0285      	lsls	r5, r0, #10
 800163a:	d506      	bpl.n	800164a <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800163c:	4a44      	ldr	r2, [pc, #272]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800163e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001640:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001642:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001646:	430b      	orrs	r3, r1
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800164a:	0241      	lsls	r1, r0, #9
 800164c:	d506      	bpl.n	800165c <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800164e:	4a40      	ldr	r2, [pc, #256]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001650:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001652:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001654:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001658:	430b      	orrs	r3, r1
 800165a:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800165c:	0202      	lsls	r2, r0, #8
 800165e:	d506      	bpl.n	800166e <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8001660:	4a3b      	ldr	r2, [pc, #236]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001662:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001664:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001666:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800166a:	430b      	orrs	r3, r1
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800166e:	01c3      	lsls	r3, r0, #7
 8001670:	d506      	bpl.n	8001680 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8001672:	4a37      	ldr	r2, [pc, #220]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001674:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001676:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001678:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800167c:	430b      	orrs	r3, r1
 800167e:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8001680:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8001684:	d01c      	beq.n	80016c0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8001686:	4a32      	ldr	r2, [pc, #200]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001688:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800168a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800168c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001690:	430b      	orrs	r3, r1
 8001692:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001694:	2000      	movs	r0, #0
 8001696:	e013      	b.n	80016c0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    FlagStatus       pwrclkchanged = RESET;
 8001698:	2600      	movs	r6, #0
 800169a:	e730      	b.n	80014fe <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80016a4:	f7ff fa20 	bl	8000ae8 <HAL_GetTick>
 80016a8:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	05d9      	lsls	r1, r3, #23
 80016ae:	f53f af2b 	bmi.w	8001508 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016b2:	f7ff fa19 	bl	8000ae8 <HAL_GetTick>
 80016b6:	eba0 0008 	sub.w	r0, r0, r8
 80016ba:	2864      	cmp	r0, #100	; 0x64
 80016bc:	d9f5      	bls.n	80016aa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 80016be:	2003      	movs	r0, #3
}
 80016c0:	b002      	add	sp, #8
 80016c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80016c6:	6862      	ldr	r2, [r4, #4]
 80016c8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80016cc:	4293      	cmp	r3, r2
 80016ce:	f43f af20 	beq.w	8001512 <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80016d2:	6a29      	ldr	r1, [r5, #32]
 80016d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016d8:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 80016dc:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 80016e0:	f8df e074 	ldr.w	lr, [pc, #116]	; 8001758 <HAL_RCCEx_PeriphCLKConfig+0x284>
 80016e4:	fab2 f282 	clz	r2, r2
 80016e8:	4472      	add	r2, lr
 80016ea:	0092      	lsls	r2, r2, #2
 80016ec:	2701      	movs	r7, #1
 80016ee:	6017      	str	r7, [r2, #0]
 80016f0:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80016f4:	fab3 f383 	clz	r3, r3
 80016f8:	4473      	add	r3, lr
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001700:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 8001702:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001704:	f57f af05 	bpl.w	8001512 <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 8001708:	f7ff f9ee 	bl	8000ae8 <HAL_GetTick>
 800170c:	f04f 0802 	mov.w	r8, #2
 8001710:	4682      	mov	sl, r0
 8001712:	46c1      	mov	r9, r8
 8001714:	fa98 f3a8 	rbit	r3, r8
 8001718:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800171c:	b1a3      	cbz	r3, 8001748 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800171e:	6a2a      	ldr	r2, [r5, #32]
 8001720:	fa99 f3a9 	rbit	r3, r9
 8001724:	fab3 f383 	clz	r3, r3
 8001728:	f003 031f 	and.w	r3, r3, #31
 800172c:	fa07 f303 	lsl.w	r3, r7, r3
 8001730:	4213      	tst	r3, r2
 8001732:	f47f aeee 	bne.w	8001512 <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001736:	f7ff f9d7 	bl	8000ae8 <HAL_GetTick>
 800173a:	f241 3388 	movw	r3, #5000	; 0x1388
 800173e:	eba0 000a 	sub.w	r0, r0, sl
 8001742:	4298      	cmp	r0, r3
 8001744:	d9e6      	bls.n	8001714 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8001746:	e7ba      	b.n	80016be <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8001748:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800174c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800174e:	e7e7      	b.n	8001720 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8001750:	40021000 	.word	0x40021000
 8001754:	40007000 	.word	0x40007000
 8001758:	10908100 	.word	0x10908100

0800175c <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800175c:	6803      	ldr	r3, [r0, #0]
 800175e:	68da      	ldr	r2, [r3, #12]
 8001760:	f042 0201 	orr.w	r2, r2, #1
 8001764:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	f042 0201 	orr.w	r2, r2, #1
 800176c:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 800176e:	2000      	movs	r0, #0
 8001770:	4770      	bx	lr

08001772 <HAL_TIM_Base_Stop_IT>:
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001772:	6803      	ldr	r3, [r0, #0]
 8001774:	68da      	ldr	r2, [r3, #12]
 8001776:	f022 0201 	bic.w	r2, r2, #1
 800177a:	60da      	str	r2, [r3, #12]
      
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800177c:	6a19      	ldr	r1, [r3, #32]
 800177e:	f241 1211 	movw	r2, #4369	; 0x1111
 8001782:	4211      	tst	r1, r2
 8001784:	d108      	bne.n	8001798 <HAL_TIM_Base_Stop_IT+0x26>
 8001786:	6a19      	ldr	r1, [r3, #32]
 8001788:	f240 4244 	movw	r2, #1092	; 0x444
 800178c:	4211      	tst	r1, r2
 800178e:	bf02      	ittt	eq
 8001790:	681a      	ldreq	r2, [r3, #0]
 8001792:	f022 0201 	biceq.w	r2, r2, #1
 8001796:	601a      	streq	r2, [r3, #0]
    
  /* Return function status */
  return HAL_OK;
}
 8001798:	2000      	movs	r0, #0
 800179a:	4770      	bx	lr

0800179c <HAL_TIM_OC_DelayElapsedCallback>:
 800179c:	4770      	bx	lr

0800179e <HAL_TIM_PWM_PulseFinishedCallback>:
 800179e:	4770      	bx	lr

080017a0 <HAL_TIM_TriggerCallback>:
 80017a0:	4770      	bx	lr

080017a2 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017a2:	6803      	ldr	r3, [r0, #0]
 80017a4:	691a      	ldr	r2, [r3, #16]
 80017a6:	0791      	lsls	r1, r2, #30
{
 80017a8:	b510      	push	{r4, lr}
 80017aa:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017ac:	d50f      	bpl.n	80017ce <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80017ae:	68da      	ldr	r2, [r3, #12]
 80017b0:	0792      	lsls	r2, r2, #30
 80017b2:	d50c      	bpl.n	80017ce <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80017b4:	f06f 0202 	mvn.w	r2, #2
 80017b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017ba:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017bc:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017be:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017c0:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017c2:	f000 8085 	beq.w	80018d0 <HAL_TIM_IRQHandler+0x12e>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80017c6:	f001 f9cd 	bl	8002b64 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017ca:	2300      	movs	r3, #0
 80017cc:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80017ce:	6823      	ldr	r3, [r4, #0]
 80017d0:	691a      	ldr	r2, [r3, #16]
 80017d2:	0752      	lsls	r2, r2, #29
 80017d4:	d510      	bpl.n	80017f8 <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80017d6:	68da      	ldr	r2, [r3, #12]
 80017d8:	0750      	lsls	r0, r2, #29
 80017da:	d50d      	bpl.n	80017f8 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80017dc:	f06f 0204 	mvn.w	r2, #4
 80017e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017e2:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017e4:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017e6:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017ea:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80017ec:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017ee:	d075      	beq.n	80018dc <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80017f0:	f001 f9b8 	bl	8002b64 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017f4:	2300      	movs	r3, #0
 80017f6:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80017f8:	6823      	ldr	r3, [r4, #0]
 80017fa:	691a      	ldr	r2, [r3, #16]
 80017fc:	0711      	lsls	r1, r2, #28
 80017fe:	d50f      	bpl.n	8001820 <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001800:	68da      	ldr	r2, [r3, #12]
 8001802:	0712      	lsls	r2, r2, #28
 8001804:	d50c      	bpl.n	8001820 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001806:	f06f 0208 	mvn.w	r2, #8
 800180a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800180c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800180e:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001810:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001812:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001814:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001816:	d067      	beq.n	80018e8 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001818:	f001 f9a4 	bl	8002b64 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800181c:	2300      	movs	r3, #0
 800181e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001820:	6823      	ldr	r3, [r4, #0]
 8001822:	691a      	ldr	r2, [r3, #16]
 8001824:	06d0      	lsls	r0, r2, #27
 8001826:	d510      	bpl.n	800184a <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001828:	68da      	ldr	r2, [r3, #12]
 800182a:	06d1      	lsls	r1, r2, #27
 800182c:	d50d      	bpl.n	800184a <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800182e:	f06f 0210 	mvn.w	r2, #16
 8001832:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001834:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001836:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001838:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800183c:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800183e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001840:	d058      	beq.n	80018f4 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8001842:	f001 f98f 	bl	8002b64 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001846:	2300      	movs	r3, #0
 8001848:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800184a:	6823      	ldr	r3, [r4, #0]
 800184c:	691a      	ldr	r2, [r3, #16]
 800184e:	07d2      	lsls	r2, r2, #31
 8001850:	d508      	bpl.n	8001864 <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001852:	68da      	ldr	r2, [r3, #12]
 8001854:	07d0      	lsls	r0, r2, #31
 8001856:	d505      	bpl.n	8001864 <HAL_TIM_IRQHandler+0xc2>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001858:	f06f 0201 	mvn.w	r2, #1
 800185c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800185e:	4620      	mov	r0, r4
 8001860:	f001 fb1c 	bl	8002e9c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001864:	6823      	ldr	r3, [r4, #0]
 8001866:	691a      	ldr	r2, [r3, #16]
 8001868:	0611      	lsls	r1, r2, #24
 800186a:	d508      	bpl.n	800187e <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800186c:	68da      	ldr	r2, [r3, #12]
 800186e:	0612      	lsls	r2, r2, #24
 8001870:	d505      	bpl.n	800187e <HAL_TIM_IRQHandler+0xdc>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001872:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001876:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001878:	4620      	mov	r0, r4
 800187a:	f000 fd6a 	bl	8002352 <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800187e:	6823      	ldr	r3, [r4, #0]
 8001880:	691a      	ldr	r2, [r3, #16]
 8001882:	05d0      	lsls	r0, r2, #23
 8001884:	d508      	bpl.n	8001898 <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001886:	68da      	ldr	r2, [r3, #12]
 8001888:	0611      	lsls	r1, r2, #24
 800188a:	d505      	bpl.n	8001898 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800188c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001890:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8001892:	4620      	mov	r0, r4
 8001894:	f000 fd5e 	bl	8002354 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001898:	6823      	ldr	r3, [r4, #0]
 800189a:	691a      	ldr	r2, [r3, #16]
 800189c:	0652      	lsls	r2, r2, #25
 800189e:	d508      	bpl.n	80018b2 <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80018a0:	68da      	ldr	r2, [r3, #12]
 80018a2:	0650      	lsls	r0, r2, #25
 80018a4:	d505      	bpl.n	80018b2 <HAL_TIM_IRQHandler+0x110>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80018a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80018aa:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80018ac:	4620      	mov	r0, r4
 80018ae:	f7ff ff77 	bl	80017a0 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018b2:	6823      	ldr	r3, [r4, #0]
 80018b4:	691a      	ldr	r2, [r3, #16]
 80018b6:	0691      	lsls	r1, r2, #26
 80018b8:	d522      	bpl.n	8001900 <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80018ba:	68da      	ldr	r2, [r3, #12]
 80018bc:	0692      	lsls	r2, r2, #26
 80018be:	d51f      	bpl.n	8001900 <HAL_TIM_IRQHandler+0x15e>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80018c0:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80018c4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80018c6:	611a      	str	r2, [r3, #16]
    }
  }
}
 80018c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80018cc:	f000 bd40 	b.w	8002350 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018d0:	f7ff ff64 	bl	800179c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018d4:	4620      	mov	r0, r4
 80018d6:	f7ff ff62 	bl	800179e <HAL_TIM_PWM_PulseFinishedCallback>
 80018da:	e776      	b.n	80017ca <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018dc:	f7ff ff5e 	bl	800179c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018e0:	4620      	mov	r0, r4
 80018e2:	f7ff ff5c 	bl	800179e <HAL_TIM_PWM_PulseFinishedCallback>
 80018e6:	e785      	b.n	80017f4 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018e8:	f7ff ff58 	bl	800179c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80018ec:	4620      	mov	r0, r4
 80018ee:	f7ff ff56 	bl	800179e <HAL_TIM_PWM_PulseFinishedCallback>
 80018f2:	e793      	b.n	800181c <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018f4:	f7ff ff52 	bl	800179c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018f8:	4620      	mov	r0, r4
 80018fa:	f7ff ff50 	bl	800179e <HAL_TIM_PWM_PulseFinishedCallback>
 80018fe:	e7a2      	b.n	8001846 <HAL_TIM_IRQHandler+0xa4>
 8001900:	bd10      	pop	{r4, pc}
	...

08001904 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001904:	4a32      	ldr	r2, [pc, #200]	; (80019d0 <TIM_Base_SetConfig+0xcc>)
  tmpcr1 = TIMx->CR1;
 8001906:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001908:	4290      	cmp	r0, r2
 800190a:	d012      	beq.n	8001932 <TIM_Base_SetConfig+0x2e>
 800190c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001910:	d00f      	beq.n	8001932 <TIM_Base_SetConfig+0x2e>
 8001912:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001916:	4290      	cmp	r0, r2
 8001918:	d00b      	beq.n	8001932 <TIM_Base_SetConfig+0x2e>
 800191a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800191e:	4290      	cmp	r0, r2
 8001920:	d007      	beq.n	8001932 <TIM_Base_SetConfig+0x2e>
 8001922:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8001926:	4290      	cmp	r0, r2
 8001928:	d003      	beq.n	8001932 <TIM_Base_SetConfig+0x2e>
 800192a:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800192e:	4290      	cmp	r0, r2
 8001930:	d115      	bne.n	800195e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001932:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001938:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800193a:	4a25      	ldr	r2, [pc, #148]	; (80019d0 <TIM_Base_SetConfig+0xcc>)
 800193c:	4290      	cmp	r0, r2
 800193e:	d01d      	beq.n	800197c <TIM_Base_SetConfig+0x78>
 8001940:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001944:	d01a      	beq.n	800197c <TIM_Base_SetConfig+0x78>
 8001946:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800194a:	4290      	cmp	r0, r2
 800194c:	d016      	beq.n	800197c <TIM_Base_SetConfig+0x78>
 800194e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001952:	4290      	cmp	r0, r2
 8001954:	d012      	beq.n	800197c <TIM_Base_SetConfig+0x78>
 8001956:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800195a:	4290      	cmp	r0, r2
 800195c:	d00e      	beq.n	800197c <TIM_Base_SetConfig+0x78>
 800195e:	4a1d      	ldr	r2, [pc, #116]	; (80019d4 <TIM_Base_SetConfig+0xd0>)
 8001960:	4290      	cmp	r0, r2
 8001962:	d00b      	beq.n	800197c <TIM_Base_SetConfig+0x78>
 8001964:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001968:	4290      	cmp	r0, r2
 800196a:	d007      	beq.n	800197c <TIM_Base_SetConfig+0x78>
 800196c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001970:	4290      	cmp	r0, r2
 8001972:	d003      	beq.n	800197c <TIM_Base_SetConfig+0x78>
 8001974:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001978:	4290      	cmp	r0, r2
 800197a:	d103      	bne.n	8001984 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800197c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800197e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001982:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001984:	694a      	ldr	r2, [r1, #20]
 8001986:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800198a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800198c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800198e:	688b      	ldr	r3, [r1, #8]
 8001990:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001992:	680b      	ldr	r3, [r1, #0]
 8001994:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <TIM_Base_SetConfig+0xcc>)
 8001998:	4298      	cmp	r0, r3
 800199a:	d013      	beq.n	80019c4 <TIM_Base_SetConfig+0xc0>
 800199c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019a0:	4298      	cmp	r0, r3
 80019a2:	d00f      	beq.n	80019c4 <TIM_Base_SetConfig+0xc0>
 80019a4:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80019a8:	4298      	cmp	r0, r3
 80019aa:	d00b      	beq.n	80019c4 <TIM_Base_SetConfig+0xc0>
 80019ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019b0:	4298      	cmp	r0, r3
 80019b2:	d007      	beq.n	80019c4 <TIM_Base_SetConfig+0xc0>
 80019b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019b8:	4298      	cmp	r0, r3
 80019ba:	d003      	beq.n	80019c4 <TIM_Base_SetConfig+0xc0>
 80019bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019c0:	4298      	cmp	r0, r3
 80019c2:	d101      	bne.n	80019c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019c4:	690b      	ldr	r3, [r1, #16]
 80019c6:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80019c8:	2301      	movs	r3, #1
 80019ca:	6143      	str	r3, [r0, #20]
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40012c00 	.word	0x40012c00
 80019d4:	40014000 	.word	0x40014000

080019d8 <HAL_TIM_Base_Init>:
{ 
 80019d8:	b510      	push	{r4, lr}
  if(htim == NULL)
 80019da:	4604      	mov	r4, r0
 80019dc:	b1a0      	cbz	r0, 8001a08 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80019de:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80019e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019e6:	b91b      	cbnz	r3, 80019f0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80019e8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80019ec:	f001 fd2c 	bl	8003448 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80019f0:	2302      	movs	r3, #2
 80019f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80019f6:	6820      	ldr	r0, [r4, #0]
 80019f8:	1d21      	adds	r1, r4, #4
 80019fa:	f7ff ff83 	bl	8001904 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80019fe:	2301      	movs	r3, #1
 8001a00:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001a04:	2000      	movs	r0, #0
 8001a06:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001a08:	2001      	movs	r0, #1
}
 8001a0a:	bd10      	pop	{r4, pc}

08001a0c <HAL_TIM_PWM_Init>:
{
 8001a0c:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001a0e:	4604      	mov	r4, r0
 8001a10:	b1a0      	cbz	r0, 8001a3c <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001a12:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001a16:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a1a:	b91b      	cbnz	r3, 8001a24 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001a1c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001a20:	f001 fe1a 	bl	8003658 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001a24:	2302      	movs	r3, #2
 8001a26:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001a2a:	6820      	ldr	r0, [r4, #0]
 8001a2c:	1d21      	adds	r1, r4, #4
 8001a2e:	f7ff ff69 	bl	8001904 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001a32:	2301      	movs	r3, #1
 8001a34:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001a38:	2000      	movs	r0, #0
 8001a3a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001a3c:	2001      	movs	r0, #1
}
 8001a3e:	bd10      	pop	{r4, pc}

08001a40 <HAL_TIM_IC_Init>:
{
 8001a40:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001a42:	4604      	mov	r4, r0
 8001a44:	b1a0      	cbz	r0, 8001a70 <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001a46:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001a4a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a4e:	b91b      	cbnz	r3, 8001a58 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001a50:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8001a54:	f001 fd4a 	bl	80034ec <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY; 
 8001a58:	2302      	movs	r3, #2
 8001a5a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001a5e:	6820      	ldr	r0, [r4, #0]
 8001a60:	1d21      	adds	r1, r4, #4
 8001a62:	f7ff ff4f 	bl	8001904 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001a66:	2301      	movs	r3, #1
 8001a68:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001a70:	2001      	movs	r0, #1
}
 8001a72:	bd10      	pop	{r4, pc}

08001a74 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a74:	6a03      	ldr	r3, [r0, #32]
 8001a76:	f023 0301 	bic.w	r3, r3, #1
 8001a7a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a7c:	6a03      	ldr	r3, [r0, #32]
{
 8001a7e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001a80:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001a82:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a84:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001a86:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a8a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001a8e:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001a90:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001a92:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001a96:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001a98:	4d1f      	ldr	r5, [pc, #124]	; (8001b18 <TIM_OC1_SetConfig+0xa4>)
 8001a9a:	42a8      	cmp	r0, r5
 8001a9c:	d013      	beq.n	8001ac6 <TIM_OC1_SetConfig+0x52>
 8001a9e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001aa2:	42a8      	cmp	r0, r5
 8001aa4:	d00f      	beq.n	8001ac6 <TIM_OC1_SetConfig+0x52>
 8001aa6:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001aaa:	42a8      	cmp	r0, r5
 8001aac:	d00b      	beq.n	8001ac6 <TIM_OC1_SetConfig+0x52>
 8001aae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ab2:	42a8      	cmp	r0, r5
 8001ab4:	d007      	beq.n	8001ac6 <TIM_OC1_SetConfig+0x52>
 8001ab6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001aba:	42a8      	cmp	r0, r5
 8001abc:	d003      	beq.n	8001ac6 <TIM_OC1_SetConfig+0x52>
 8001abe:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001ac2:	42a8      	cmp	r0, r5
 8001ac4:	d122      	bne.n	8001b0c <TIM_OC1_SetConfig+0x98>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001ac6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001ac8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001acc:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001ace:	4d12      	ldr	r5, [pc, #72]	; (8001b18 <TIM_OC1_SetConfig+0xa4>)
 8001ad0:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8001ad2:	f023 0304 	bic.w	r3, r3, #4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001ad6:	d013      	beq.n	8001b00 <TIM_OC1_SetConfig+0x8c>
 8001ad8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001adc:	42a8      	cmp	r0, r5
 8001ade:	d00f      	beq.n	8001b00 <TIM_OC1_SetConfig+0x8c>
 8001ae0:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001ae4:	42a8      	cmp	r0, r5
 8001ae6:	d00b      	beq.n	8001b00 <TIM_OC1_SetConfig+0x8c>
 8001ae8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001aec:	42a8      	cmp	r0, r5
 8001aee:	d007      	beq.n	8001b00 <TIM_OC1_SetConfig+0x8c>
 8001af0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001af4:	42a8      	cmp	r0, r5
 8001af6:	d003      	beq.n	8001b00 <TIM_OC1_SetConfig+0x8c>
 8001af8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001afc:	42a8      	cmp	r0, r5
 8001afe:	d105      	bne.n	8001b0c <TIM_OC1_SetConfig+0x98>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001b00:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001b04:	698e      	ldr	r6, [r1, #24]
 8001b06:	694c      	ldr	r4, [r1, #20]
 8001b08:	4334      	orrs	r4, r6
 8001b0a:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b0c:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001b0e:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001b10:	684a      	ldr	r2, [r1, #4]
 8001b12:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001b14:	6203      	str	r3, [r0, #32]
 8001b16:	bd70      	pop	{r4, r5, r6, pc}
 8001b18:	40012c00 	.word	0x40012c00

08001b1c <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b1c:	6a03      	ldr	r3, [r0, #32]
 8001b1e:	f023 0310 	bic.w	r3, r3, #16
 8001b22:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b24:	6a03      	ldr	r3, [r0, #32]
{
 8001b26:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001b28:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001b2a:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b2c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001b2e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001b32:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b36:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001b3a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001b3c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001b40:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001b44:	4d1a      	ldr	r5, [pc, #104]	; (8001bb0 <TIM_OC2_SetConfig+0x94>)
 8001b46:	42a8      	cmp	r0, r5
 8001b48:	d007      	beq.n	8001b5a <TIM_OC2_SetConfig+0x3e>
 8001b4a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001b4e:	42a8      	cmp	r0, r5
 8001b50:	d003      	beq.n	8001b5a <TIM_OC2_SetConfig+0x3e>
 8001b52:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8001b56:	42a8      	cmp	r0, r5
 8001b58:	d10d      	bne.n	8001b76 <TIM_OC2_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001b5a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001b5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001b60:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001b64:	4d12      	ldr	r5, [pc, #72]	; (8001bb0 <TIM_OC2_SetConfig+0x94>)
 8001b66:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8001b68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001b6c:	d012      	beq.n	8001b94 <TIM_OC2_SetConfig+0x78>
 8001b6e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001b72:	42a8      	cmp	r0, r5
 8001b74:	d00e      	beq.n	8001b94 <TIM_OC2_SetConfig+0x78>
 8001b76:	4d0f      	ldr	r5, [pc, #60]	; (8001bb4 <TIM_OC2_SetConfig+0x98>)
 8001b78:	42a8      	cmp	r0, r5
 8001b7a:	d00b      	beq.n	8001b94 <TIM_OC2_SetConfig+0x78>
 8001b7c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b80:	42a8      	cmp	r0, r5
 8001b82:	d007      	beq.n	8001b94 <TIM_OC2_SetConfig+0x78>
 8001b84:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b88:	42a8      	cmp	r0, r5
 8001b8a:	d003      	beq.n	8001b94 <TIM_OC2_SetConfig+0x78>
 8001b8c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001b90:	42a8      	cmp	r0, r5
 8001b92:	d106      	bne.n	8001ba2 <TIM_OC2_SetConfig+0x86>
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001b94:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001b98:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001b9a:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001b9c:	4334      	orrs	r4, r6
 8001b9e:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ba2:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001ba4:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001ba6:	684a      	ldr	r2, [r1, #4]
 8001ba8:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001baa:	6203      	str	r3, [r0, #32]
 8001bac:	bd70      	pop	{r4, r5, r6, pc}
 8001bae:	bf00      	nop
 8001bb0:	40012c00 	.word	0x40012c00
 8001bb4:	40014000 	.word	0x40014000

08001bb8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001bb8:	6a03      	ldr	r3, [r0, #32]
 8001bba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bbe:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001bc0:	6a03      	ldr	r3, [r0, #32]
{
 8001bc2:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001bc4:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001bc6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001bc8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8001bca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001bce:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001bd2:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001bd4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001bd6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001bda:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001bde:	4d1a      	ldr	r5, [pc, #104]	; (8001c48 <TIM_OC3_SetConfig+0x90>)
 8001be0:	42a8      	cmp	r0, r5
 8001be2:	d007      	beq.n	8001bf4 <TIM_OC3_SetConfig+0x3c>
 8001be4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001be8:	42a8      	cmp	r0, r5
 8001bea:	d003      	beq.n	8001bf4 <TIM_OC3_SetConfig+0x3c>
 8001bec:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8001bf0:	42a8      	cmp	r0, r5
 8001bf2:	d10d      	bne.n	8001c10 <TIM_OC3_SetConfig+0x58>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001bf4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001bf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001bfa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001bfe:	4d12      	ldr	r5, [pc, #72]	; (8001c48 <TIM_OC3_SetConfig+0x90>)
 8001c00:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8001c02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001c06:	d012      	beq.n	8001c2e <TIM_OC3_SetConfig+0x76>
 8001c08:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001c0c:	42a8      	cmp	r0, r5
 8001c0e:	d00e      	beq.n	8001c2e <TIM_OC3_SetConfig+0x76>
 8001c10:	4d0e      	ldr	r5, [pc, #56]	; (8001c4c <TIM_OC3_SetConfig+0x94>)
 8001c12:	42a8      	cmp	r0, r5
 8001c14:	d00b      	beq.n	8001c2e <TIM_OC3_SetConfig+0x76>
 8001c16:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c1a:	42a8      	cmp	r0, r5
 8001c1c:	d007      	beq.n	8001c2e <TIM_OC3_SetConfig+0x76>
 8001c1e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c22:	42a8      	cmp	r0, r5
 8001c24:	d003      	beq.n	8001c2e <TIM_OC3_SetConfig+0x76>
 8001c26:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001c2a:	42a8      	cmp	r0, r5
 8001c2c:	d106      	bne.n	8001c3c <TIM_OC3_SetConfig+0x84>

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001c2e:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001c32:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001c34:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001c36:	4334      	orrs	r4, r6
 8001c38:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c3c:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001c3e:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001c40:	684a      	ldr	r2, [r1, #4]
 8001c42:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001c44:	6203      	str	r3, [r0, #32]
 8001c46:	bd70      	pop	{r4, r5, r6, pc}
 8001c48:	40012c00 	.word	0x40012c00
 8001c4c:	40014000 	.word	0x40014000

08001c50 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001c50:	6a03      	ldr	r3, [r0, #32]
 8001c52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c56:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c58:	6a03      	ldr	r3, [r0, #32]
{
 8001c5a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001c5c:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001c5e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c60:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001c62:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001c66:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c6a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001c6e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001c70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001c74:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001c78:	4d10      	ldr	r5, [pc, #64]	; (8001cbc <TIM_OC4_SetConfig+0x6c>)
 8001c7a:	42a8      	cmp	r0, r5
 8001c7c:	d013      	beq.n	8001ca6 <TIM_OC4_SetConfig+0x56>
 8001c7e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001c82:	42a8      	cmp	r0, r5
 8001c84:	d00f      	beq.n	8001ca6 <TIM_OC4_SetConfig+0x56>
 8001c86:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001c8a:	42a8      	cmp	r0, r5
 8001c8c:	d00b      	beq.n	8001ca6 <TIM_OC4_SetConfig+0x56>
 8001c8e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c92:	42a8      	cmp	r0, r5
 8001c94:	d007      	beq.n	8001ca6 <TIM_OC4_SetConfig+0x56>
 8001c96:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c9a:	42a8      	cmp	r0, r5
 8001c9c:	d003      	beq.n	8001ca6 <TIM_OC4_SetConfig+0x56>
 8001c9e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001ca2:	42a8      	cmp	r0, r5
 8001ca4:	d104      	bne.n	8001cb0 <TIM_OC4_SetConfig+0x60>
#else
   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001ca6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001ca8:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001cac:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001cb0:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001cb2:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001cb4:	684a      	ldr	r2, [r1, #4]
 8001cb6:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001cb8:	6203      	str	r3, [r0, #32]
 8001cba:	bd30      	pop	{r4, r5, pc}
 8001cbc:	40012c00 	.word	0x40012c00

08001cc0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8001cc0:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cc2:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001cc4:	4e18      	ldr	r6, [pc, #96]	; (8001d28 <TIM_TI1_SetConfig+0x68>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cc6:	f024 0401 	bic.w	r4, r4, #1
 8001cca:	6204      	str	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001ccc:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 8001cce:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001cd0:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001cd2:	d016      	beq.n	8001d02 <TIM_TI1_SetConfig+0x42>
 8001cd4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001cd8:	d013      	beq.n	8001d02 <TIM_TI1_SetConfig+0x42>
 8001cda:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8001cde:	42b0      	cmp	r0, r6
 8001ce0:	d00f      	beq.n	8001d02 <TIM_TI1_SetConfig+0x42>
 8001ce2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001ce6:	42b0      	cmp	r0, r6
 8001ce8:	d00b      	beq.n	8001d02 <TIM_TI1_SetConfig+0x42>
 8001cea:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 8001cee:	42b0      	cmp	r0, r6
 8001cf0:	d007      	beq.n	8001d02 <TIM_TI1_SetConfig+0x42>
 8001cf2:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8001cf6:	42b0      	cmp	r0, r6
 8001cf8:	d003      	beq.n	8001d02 <TIM_TI1_SetConfig+0x42>
 8001cfa:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 8001cfe:	42b0      	cmp	r0, r6
 8001d00:	d10f      	bne.n	8001d22 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001d02:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8001d06:	4322      	orrs	r2, r4
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001d08:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d0a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001d0e:	b2db      	uxtb	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d10:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001d14:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001d18:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001d1a:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001d1c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001d1e:	6201      	str	r1, [r0, #32]
}
 8001d20:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001d22:	f044 0201 	orr.w	r2, r4, #1
 8001d26:	e7ef      	b.n	8001d08 <TIM_TI1_SetConfig+0x48>
 8001d28:	40012c00 	.word	0x40012c00

08001d2c <HAL_TIM_IC_ConfigChannel>:
{
 8001d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001d2e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001d32:	2b01      	cmp	r3, #1
{
 8001d34:	4604      	mov	r4, r0
 8001d36:	460d      	mov	r5, r1
 8001d38:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001d3c:	d019      	beq.n	8001d72 <HAL_TIM_IC_ConfigChannel+0x46>
 8001d3e:	2301      	movs	r3, #1
 8001d40:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001d44:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  if (Channel == TIM_CHANNEL_1)
 8001d48:	b9a2      	cbnz	r2, 8001d74 <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 8001d4a:	68cb      	ldr	r3, [r1, #12]
 8001d4c:	6820      	ldr	r0, [r4, #0]
 8001d4e:	c906      	ldmia	r1, {r1, r2}
 8001d50:	f7ff ffb6 	bl	8001cc0 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001d54:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001d56:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001d58:	699a      	ldr	r2, [r3, #24]
 8001d5a:	f022 020c 	bic.w	r2, r2, #12
 8001d5e:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001d60:	699a      	ldr	r2, [r3, #24]
 8001d62:	430a      	orrs	r2, r1
 8001d64:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001d66:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001d68:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001d6a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001d6e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 8001d74:	2a04      	cmp	r2, #4
 8001d76:	688e      	ldr	r6, [r1, #8]
 8001d78:	6823      	ldr	r3, [r4, #0]
 8001d7a:	68e8      	ldr	r0, [r5, #12]
 8001d7c:	c982      	ldmia	r1, {r1, r7}
 8001d7e:	d11f      	bne.n	8001dc0 <HAL_TIM_IC_ConfigChannel+0x94>
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d80:	6a1a      	ldr	r2, [r3, #32]
 8001d82:	f022 0210 	bic.w	r2, r2, #16
 8001d86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d88:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 8001d8a:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001d8c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001d90:	ea42 2207 	orr.w	r2, r2, r7, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001d94:	0300      	lsls	r0, r0, #12
 8001d96:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d98:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001d9c:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001d9e:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001da0:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001da4:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001da8:	4301      	orrs	r1, r0

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001daa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001dac:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001dae:	699a      	ldr	r2, [r3, #24]
 8001db0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001db4:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001db6:	699a      	ldr	r2, [r3, #24]
 8001db8:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8001dbc:	619e      	str	r6, [r3, #24]
 8001dbe:	e7d2      	b.n	8001d66 <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 8001dc0:	2a08      	cmp	r2, #8
{
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001dc2:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 8001dc4:	d11c      	bne.n	8001e00 <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001dc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001dcc:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8001dce:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001dd0:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr2 |= TIM_ICSelection;
 8001dd4:	433a      	orrs	r2, r7

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001dd6:	0100      	lsls	r0, r0, #4
 8001dd8:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8001dda:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001dde:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001de0:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001de2:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8001de6:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001dea:	4301      	orrs	r1, r0

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001dec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8001dee:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001df0:	69da      	ldr	r2, [r3, #28]
 8001df2:	f022 020c 	bic.w	r2, r2, #12
 8001df6:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001df8:	69da      	ldr	r2, [r3, #28]
 8001dfa:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001dfc:	61de      	str	r6, [r3, #28]
 8001dfe:	e7b2      	b.n	8001d66 <HAL_TIM_IC_ConfigChannel+0x3a>
{
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001e00:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e04:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001e06:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8001e08:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001e0a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001e0e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001e12:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001e14:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001e18:	b280      	uxth	r0, r0

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001e1a:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001e1c:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001e1e:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001e22:	f425 4220 	bic.w	r2, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001e26:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001e28:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 8001e2a:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001e2c:	69da      	ldr	r2, [r3, #28]
 8001e2e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001e32:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001e34:	69da      	ldr	r2, [r3, #28]
 8001e36:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8001e3a:	e7df      	b.n	8001dfc <HAL_TIM_IC_ConfigChannel+0xd0>

08001e3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001e3c:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8001e3e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e40:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e42:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e46:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001e4a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e4c:	6083      	str	r3, [r0, #8]
 8001e4e:	bd10      	pop	{r4, pc}

08001e50 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001e50:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001e54:	2b01      	cmp	r3, #1
{
 8001e56:	b570      	push	{r4, r5, r6, lr}
 8001e58:	4604      	mov	r4, r0
 8001e5a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001e5e:	d01a      	beq.n	8001e96 <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 8001e60:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001e64:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001e66:	2301      	movs	r3, #1
 8001e68:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001e6c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e6e:	4b52      	ldr	r3, [pc, #328]	; (8001fb8 <HAL_TIM_ConfigClockSource+0x168>)
 8001e70:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8001e72:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001e74:	680b      	ldr	r3, [r1, #0]
 8001e76:	2b40      	cmp	r3, #64	; 0x40
 8001e78:	d075      	beq.n	8001f66 <HAL_TIM_ConfigClockSource+0x116>
 8001e7a:	d818      	bhi.n	8001eae <HAL_TIM_ConfigClockSource+0x5e>
 8001e7c:	2b10      	cmp	r3, #16
 8001e7e:	f000 808f 	beq.w	8001fa0 <HAL_TIM_ConfigClockSource+0x150>
 8001e82:	d809      	bhi.n	8001e98 <HAL_TIM_ConfigClockSource+0x48>
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 8085 	beq.w	8001f94 <HAL_TIM_ConfigClockSource+0x144>
  htim->State = HAL_TIM_STATE_READY;
 8001e8a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001e8c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001e8e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001e92:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001e96:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001e98:	2b20      	cmp	r3, #32
 8001e9a:	f000 8087 	beq.w	8001fac <HAL_TIM_ConfigClockSource+0x15c>
 8001e9e:	2b30      	cmp	r3, #48	; 0x30
 8001ea0:	d1f3      	bne.n	8001e8a <HAL_TIM_ConfigClockSource+0x3a>
   tmpsmcr = TIMx->SMCR;
 8001ea2:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001ea8:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8001eac:	e033      	b.n	8001f16 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8001eae:	2b70      	cmp	r3, #112	; 0x70
 8001eb0:	d033      	beq.n	8001f1a <HAL_TIM_ConfigClockSource+0xca>
 8001eb2:	d81b      	bhi.n	8001eec <HAL_TIM_ConfigClockSource+0x9c>
 8001eb4:	2b50      	cmp	r3, #80	; 0x50
 8001eb6:	d03f      	beq.n	8001f38 <HAL_TIM_ConfigClockSource+0xe8>
 8001eb8:	2b60      	cmp	r3, #96	; 0x60
 8001eba:	d1e6      	bne.n	8001e8a <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001ebc:	684d      	ldr	r5, [r1, #4]
 8001ebe:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ec0:	6a01      	ldr	r1, [r0, #32]
 8001ec2:	f021 0110 	bic.w	r1, r1, #16
 8001ec6:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ec8:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001eca:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ecc:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001ed0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001ed4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ed8:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001edc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001ede:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001ee0:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001ee6:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001eea:	e014      	b.n	8001f16 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8001eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ef0:	d00c      	beq.n	8001f0c <HAL_TIM_ConfigClockSource+0xbc>
 8001ef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ef6:	d1c8      	bne.n	8001e8a <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8001ef8:	68cb      	ldr	r3, [r1, #12]
 8001efa:	684a      	ldr	r2, [r1, #4]
 8001efc:	6889      	ldr	r1, [r1, #8]
 8001efe:	f7ff ff9d 	bl	8001e3c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f02:	6822      	ldr	r2, [r4, #0]
 8001f04:	6893      	ldr	r3, [r2, #8]
 8001f06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f0a:	e013      	b.n	8001f34 <HAL_TIM_ConfigClockSource+0xe4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001f0c:	6883      	ldr	r3, [r0, #8]
 8001f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f12:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 8001f16:	6083      	str	r3, [r0, #8]
 8001f18:	e7b7      	b.n	8001e8a <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8001f1a:	68cb      	ldr	r3, [r1, #12]
 8001f1c:	684a      	ldr	r2, [r1, #4]
 8001f1e:	6889      	ldr	r1, [r1, #8]
 8001f20:	f7ff ff8c 	bl	8001e3c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001f24:	6822      	ldr	r2, [r4, #0]
 8001f26:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f2c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f34:	6093      	str	r3, [r2, #8]
    break;
 8001f36:	e7a8      	b.n	8001e8a <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001f38:	684a      	ldr	r2, [r1, #4]
 8001f3a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001f3c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f3e:	6a05      	ldr	r5, [r0, #32]
 8001f40:	f025 0501 	bic.w	r5, r5, #1
 8001f44:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001f46:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f48:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f50:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001f54:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001f56:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001f58:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001f5a:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001f60:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8001f64:	e7d7      	b.n	8001f16 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001f66:	684a      	ldr	r2, [r1, #4]
 8001f68:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001f6a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f6c:	6a05      	ldr	r5, [r0, #32]
 8001f6e:	f025 0501 	bic.w	r5, r5, #1
 8001f72:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001f74:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f76:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f7e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001f82:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001f84:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001f86:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001f88:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001f8e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8001f92:	e7c0      	b.n	8001f16 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001f94:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001f9a:	f043 0307 	orr.w	r3, r3, #7
 8001f9e:	e7ba      	b.n	8001f16 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001fa0:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001fa6:	f043 0317 	orr.w	r3, r3, #23
 8001faa:	e7b4      	b.n	8001f16 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001fac:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001fb2:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8001fb6:	e7ae      	b.n	8001f16 <HAL_TIM_ConfigClockSource+0xc6>
 8001fb8:	fffe0088 	.word	0xfffe0088

08001fbc <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001fbc:	6a03      	ldr	r3, [r0, #32]
{
 8001fbe:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8001fc0:	2401      	movs	r4, #1
 8001fc2:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001fc4:	ea23 0304 	bic.w	r3, r3, r4
 8001fc8:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001fca:	6a03      	ldr	r3, [r0, #32]
 8001fcc:	408a      	lsls	r2, r1
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	6202      	str	r2, [r0, #32]
 8001fd2:	bd10      	pop	{r4, pc}

08001fd4 <HAL_TIM_PWM_Start>:
{
 8001fd4:	b510      	push	{r4, lr}
 8001fd6:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001fd8:	2201      	movs	r2, #1
 8001fda:	6800      	ldr	r0, [r0, #0]
 8001fdc:	f7ff ffee 	bl	8001fbc <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8001fe0:	6823      	ldr	r3, [r4, #0]
 8001fe2:	4a10      	ldr	r2, [pc, #64]	; (8002024 <HAL_TIM_PWM_Start+0x50>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d013      	beq.n	8002010 <HAL_TIM_PWM_Start+0x3c>
 8001fe8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d00f      	beq.n	8002010 <HAL_TIM_PWM_Start+0x3c>
 8001ff0:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d00b      	beq.n	8002010 <HAL_TIM_PWM_Start+0x3c>
 8001ff8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d007      	beq.n	8002010 <HAL_TIM_PWM_Start+0x3c>
 8002000:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002004:	4293      	cmp	r3, r2
 8002006:	d003      	beq.n	8002010 <HAL_TIM_PWM_Start+0x3c>
 8002008:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800200c:	4293      	cmp	r3, r2
 800200e:	d103      	bne.n	8002018 <HAL_TIM_PWM_Start+0x44>
    __HAL_TIM_MOE_ENABLE(htim);
 8002010:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002012:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002016:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	f042 0201 	orr.w	r2, r2, #1
 800201e:	601a      	str	r2, [r3, #0]
} 
 8002020:	2000      	movs	r0, #0
 8002022:	bd10      	pop	{r4, pc}
 8002024:	40012c00 	.word	0x40012c00

08002028 <HAL_TIM_IC_Start_IT>:
{
 8002028:	b510      	push	{r4, lr}
 800202a:	4604      	mov	r4, r0
  switch (Channel)
 800202c:	290c      	cmp	r1, #12
 800202e:	d80d      	bhi.n	800204c <HAL_TIM_IC_Start_IT+0x24>
 8002030:	e8df f001 	tbb	[pc, r1]
 8002034:	0c0c0c07 	.word	0x0c0c0c07
 8002038:	0c0c0c17 	.word	0x0c0c0c17
 800203c:	0c0c0c1c 	.word	0x0c0c0c1c
 8002040:	21          	.byte	0x21
 8002041:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002042:	6802      	ldr	r2, [r0, #0]
 8002044:	68d3      	ldr	r3, [r2, #12]
 8002046:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800204a:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800204c:	6820      	ldr	r0, [r4, #0]
 800204e:	2201      	movs	r2, #1
 8002050:	f7ff ffb4 	bl	8001fbc <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);  
 8002054:	6822      	ldr	r2, [r4, #0]
 8002056:	6813      	ldr	r3, [r2, #0]
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	6013      	str	r3, [r2, #0]
} 
 800205e:	2000      	movs	r0, #0
 8002060:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002062:	6802      	ldr	r2, [r0, #0]
 8002064:	68d3      	ldr	r3, [r2, #12]
 8002066:	f043 0304 	orr.w	r3, r3, #4
 800206a:	e7ee      	b.n	800204a <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800206c:	6802      	ldr	r2, [r0, #0]
 800206e:	68d3      	ldr	r3, [r2, #12]
 8002070:	f043 0308 	orr.w	r3, r3, #8
 8002074:	e7e9      	b.n	800204a <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002076:	6802      	ldr	r2, [r0, #0]
 8002078:	68d3      	ldr	r3, [r2, #12]
 800207a:	f043 0310 	orr.w	r3, r3, #16
 800207e:	e7e4      	b.n	800204a <HAL_TIM_IC_Start_IT+0x22>

08002080 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002080:	6a03      	ldr	r3, [r0, #32]
 8002082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002086:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002088:	6a03      	ldr	r3, [r0, #32]
{
 800208a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800208c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800208e:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002090:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002092:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002096:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800209a:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800209c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 800209e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80020a2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80020a6:	4d11      	ldr	r5, [pc, #68]	; (80020ec <TIM_OC5_SetConfig+0x6c>)
 80020a8:	42a8      	cmp	r0, r5
 80020aa:	d013      	beq.n	80020d4 <TIM_OC5_SetConfig+0x54>
 80020ac:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80020b0:	42a8      	cmp	r0, r5
 80020b2:	d00f      	beq.n	80020d4 <TIM_OC5_SetConfig+0x54>
 80020b4:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80020b8:	42a8      	cmp	r0, r5
 80020ba:	d00b      	beq.n	80020d4 <TIM_OC5_SetConfig+0x54>
 80020bc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80020c0:	42a8      	cmp	r0, r5
 80020c2:	d007      	beq.n	80020d4 <TIM_OC5_SetConfig+0x54>
 80020c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80020c8:	42a8      	cmp	r0, r5
 80020ca:	d003      	beq.n	80020d4 <TIM_OC5_SetConfig+0x54>
 80020cc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80020d0:	42a8      	cmp	r0, r5
 80020d2:	d104      	bne.n	80020de <TIM_OC5_SetConfig+0x5e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80020d4:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 80020d6:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80020da:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020de:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80020e0:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80020e2:	684a      	ldr	r2, [r1, #4]
 80020e4:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80020e6:	6203      	str	r3, [r0, #32]
 80020e8:	bd30      	pop	{r4, r5, pc}
 80020ea:	bf00      	nop
 80020ec:	40012c00 	.word	0x40012c00

080020f0 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80020f0:	6a03      	ldr	r3, [r0, #32]
 80020f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80020f6:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020f8:	6a03      	ldr	r3, [r0, #32]
{
 80020fa:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80020fc:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80020fe:	6d42      	ldr	r2, [r0, #84]	; 0x54
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002100:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002102:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002106:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800210a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800210e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002110:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002114:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002118:	4d10      	ldr	r5, [pc, #64]	; (800215c <TIM_OC6_SetConfig+0x6c>)
 800211a:	42a8      	cmp	r0, r5
 800211c:	d013      	beq.n	8002146 <TIM_OC6_SetConfig+0x56>
 800211e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002122:	42a8      	cmp	r0, r5
 8002124:	d00f      	beq.n	8002146 <TIM_OC6_SetConfig+0x56>
 8002126:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800212a:	42a8      	cmp	r0, r5
 800212c:	d00b      	beq.n	8002146 <TIM_OC6_SetConfig+0x56>
 800212e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002132:	42a8      	cmp	r0, r5
 8002134:	d007      	beq.n	8002146 <TIM_OC6_SetConfig+0x56>
 8002136:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800213a:	42a8      	cmp	r0, r5
 800213c:	d003      	beq.n	8002146 <TIM_OC6_SetConfig+0x56>
 800213e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002142:	42a8      	cmp	r0, r5
 8002144:	d104      	bne.n	8002150 <TIM_OC6_SetConfig+0x60>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002146:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002148:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800214c:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002150:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002152:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002154:	684a      	ldr	r2, [r1, #4]
 8002156:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002158:	6203      	str	r3, [r0, #32]
 800215a:	bd30      	pop	{r4, r5, pc}
 800215c:	40012c00 	.word	0x40012c00

08002160 <HAL_TIM_PWM_ConfigChannel>:
{
 8002160:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002162:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002166:	2b01      	cmp	r3, #1
{
 8002168:	4604      	mov	r4, r0
 800216a:	460d      	mov	r5, r1
 800216c:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002170:	d010      	beq.n	8002194 <HAL_TIM_PWM_ConfigChannel+0x34>
 8002172:	2301      	movs	r3, #1
  switch (Channel)
 8002174:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8002176:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800217a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 800217e:	d043      	beq.n	8002208 <HAL_TIM_PWM_ConfigChannel+0xa8>
 8002180:	d809      	bhi.n	8002196 <HAL_TIM_PWM_ConfigChannel+0x36>
 8002182:	b1fa      	cbz	r2, 80021c4 <HAL_TIM_PWM_ConfigChannel+0x64>
 8002184:	2a04      	cmp	r2, #4
 8002186:	d02e      	beq.n	80021e6 <HAL_TIM_PWM_ConfigChannel+0x86>
  htim->State = HAL_TIM_STATE_READY;
 8002188:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800218a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800218c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002190:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002194:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8002196:	2a10      	cmp	r2, #16
 8002198:	d047      	beq.n	800222a <HAL_TIM_PWM_ConfigChannel+0xca>
 800219a:	2a14      	cmp	r2, #20
 800219c:	d056      	beq.n	800224c <HAL_TIM_PWM_ConfigChannel+0xec>
 800219e:	2a0c      	cmp	r2, #12
 80021a0:	d1f2      	bne.n	8002188 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80021a2:	6820      	ldr	r0, [r4, #0]
 80021a4:	f7ff fd54 	bl	8001c50 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021a8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80021aa:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021ac:	69da      	ldr	r2, [r3, #28]
 80021ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021b2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80021b4:	69da      	ldr	r2, [r3, #28]
 80021b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80021bc:	69da      	ldr	r2, [r3, #28]
 80021be:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80021c2:	e030      	b.n	8002226 <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021c4:	6820      	ldr	r0, [r4, #0]
 80021c6:	f7ff fc55 	bl	8001a74 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021ca:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80021cc:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021ce:	699a      	ldr	r2, [r3, #24]
 80021d0:	f042 0208 	orr.w	r2, r2, #8
 80021d4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80021d6:	699a      	ldr	r2, [r3, #24]
 80021d8:	f022 0204 	bic.w	r2, r2, #4
 80021dc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80021de:	699a      	ldr	r2, [r3, #24]
 80021e0:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021e2:	619a      	str	r2, [r3, #24]
    break;
 80021e4:	e7d0      	b.n	8002188 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021e6:	6820      	ldr	r0, [r4, #0]
 80021e8:	f7ff fc98 	bl	8001b1c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021ec:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021ee:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021f0:	699a      	ldr	r2, [r3, #24]
 80021f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021f8:	699a      	ldr	r2, [r3, #24]
 80021fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002200:	699a      	ldr	r2, [r3, #24]
 8002202:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002206:	e7ec      	b.n	80021e2 <HAL_TIM_PWM_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002208:	6820      	ldr	r0, [r4, #0]
 800220a:	f7ff fcd5 	bl	8001bb8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800220e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002210:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002212:	69da      	ldr	r2, [r3, #28]
 8002214:	f042 0208 	orr.w	r2, r2, #8
 8002218:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800221a:	69da      	ldr	r2, [r3, #28]
 800221c:	f022 0204 	bic.w	r2, r2, #4
 8002220:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002222:	69da      	ldr	r2, [r3, #28]
 8002224:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002226:	61da      	str	r2, [r3, #28]
    break;
 8002228:	e7ae      	b.n	8002188 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800222a:	6820      	ldr	r0, [r4, #0]
 800222c:	f7ff ff28 	bl	8002080 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002230:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8002232:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002234:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002236:	f042 0208 	orr.w	r2, r2, #8
 800223a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800223c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800223e:	f022 0204 	bic.w	r2, r2, #4
 8002242:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8002244:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002246:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8002248:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 800224a:	e79d      	b.n	8002188 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800224c:	6820      	ldr	r0, [r4, #0]
 800224e:	f7ff ff4f 	bl	80020f0 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002252:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8002254:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002256:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002258:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800225c:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800225e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002260:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002264:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8002266:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002268:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800226c:	e7ec      	b.n	8002248 <HAL_TIM_PWM_ConfigChannel+0xe8>
	...

08002270 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8002270:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002274:	2b01      	cmp	r3, #1
{
 8002276:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8002278:	d020      	beq.n	80022bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  tmpcr2 = htim->Instance->CR2;
 800227a:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800227c:	4d10      	ldr	r5, [pc, #64]	; (80022c0 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
  tmpcr2 = htim->Instance->CR2;
 800227e:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002280:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002282:	42aa      	cmp	r2, r5
 8002284:	d007      	beq.n	8002296 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8002286:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800228a:	42aa      	cmp	r2, r5
 800228c:	d003      	beq.n	8002296 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 800228e:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8002292:	42aa      	cmp	r2, r5
 8002294:	d103      	bne.n	800229e <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002296:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002298:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800229c:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800229e:	680d      	ldr	r5, [r1, #0]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022a0:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80022a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022a6:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 80022a8:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  htim->Instance->CR2 = tmpcr2;
 80022ac:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022ae:	4321      	orrs	r1, r4
  __HAL_UNLOCK(htim);
 80022b0:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 80022b2:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 80022b4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80022b8:	4618      	mov	r0, r3
 80022ba:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80022bc:	2002      	movs	r0, #2
} 
 80022be:	bd30      	pop	{r4, r5, pc}
 80022c0:	40012c00 	.word	0x40012c00

080022c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 80022c4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80022c8:	2b01      	cmp	r3, #1
{
 80022ca:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80022cc:	d03c      	beq.n	8002348 <HAL_TIMEx_ConfigBreakDeadTime+0x84>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80022ce:	68cb      	ldr	r3, [r1, #12]
 80022d0:	688a      	ldr	r2, [r1, #8]
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80022d2:	4c1e      	ldr	r4, [pc, #120]	; (800234c <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80022d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022d8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80022da:	684a      	ldr	r2, [r1, #4]
 80022dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022e0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80022e2:	680a      	ldr	r2, [r1, #0]
 80022e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022e8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80022ea:	690a      	ldr	r2, [r1, #16]
 80022ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022f0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80022f2:	694a      	ldr	r2, [r1, #20]
 80022f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022f8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80022fa:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80022fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002300:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8002302:	698a      	ldr	r2, [r1, #24]
 8002304:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002308:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800230c:	6802      	ldr	r2, [r0, #0]
 800230e:	42a2      	cmp	r2, r4
 8002310:	d007      	beq.n	8002322 <HAL_TIMEx_ConfigBreakDeadTime+0x5e>
 8002312:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8002316:	42a2      	cmp	r2, r4
 8002318:	d003      	beq.n	8002322 <HAL_TIMEx_ConfigBreakDeadTime+0x5e>
 800231a:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 800231e:	42a2      	cmp	r2, r4
 8002320:	d10c      	bne.n	800233c <HAL_TIMEx_ConfigBreakDeadTime+0x78>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8002322:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8002324:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002328:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800232c:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800232e:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002330:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002334:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002336:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800233a:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 800233c:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 800233e:	2300      	movs	r3, #0
 8002340:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8002344:	4618      	mov	r0, r3
 8002346:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8002348:	2002      	movs	r0, #2
}
 800234a:	bd10      	pop	{r4, pc}
 800234c:	40012c00 	.word	0x40012c00

08002350 <HAL_TIMEx_CommutationCallback>:
 8002350:	4770      	bx	lr

08002352 <HAL_TIMEx_BreakCallback>:
 8002352:	4770      	bx	lr

08002354 <HAL_TIMEx_Break2Callback>:
{
 8002354:	4770      	bx	lr

08002356 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002356:	6803      	ldr	r3, [r0, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800235e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	f022 0201 	bic.w	r2, r2, #1
 8002366:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002368:	2320      	movs	r3, #32
 800236a:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 800236e:	4770      	bx	lr

08002370 <HAL_UART_TxCpltCallback>:
 8002370:	4770      	bx	lr

08002372 <HAL_UART_RxCpltCallback>:
 8002372:	4770      	bx	lr

08002374 <HAL_UART_ErrorCallback>:
 8002374:	4770      	bx	lr

08002376 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002376:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002378:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 800237a:	2300      	movs	r3, #0
 800237c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002380:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8002384:	f7ff fff6 	bl	8002374 <HAL_UART_ErrorCallback>
 8002388:	bd08      	pop	{r3, pc}
	...

0800238c <UART_SetConfig>:
{
 800238c:	b538      	push	{r3, r4, r5, lr}
 800238e:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002390:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002392:	6921      	ldr	r1, [r4, #16]
 8002394:	68a2      	ldr	r2, [r4, #8]
 8002396:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002398:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800239a:	430a      	orrs	r2, r1
 800239c:	6961      	ldr	r1, [r4, #20]
 800239e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80023a0:	4977      	ldr	r1, [pc, #476]	; (8002580 <UART_SetConfig+0x1f4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023a2:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80023a4:	4001      	ands	r1, r0
 80023a6:	430a      	orrs	r2, r1
 80023a8:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023aa:	686a      	ldr	r2, [r5, #4]
 80023ac:	68e1      	ldr	r1, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80023ae:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023b0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80023b4:	430a      	orrs	r2, r1
 80023b6:	606a      	str	r2, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80023b8:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80023ba:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80023bc:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80023c0:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80023c2:	430a      	orrs	r2, r1
 80023c4:	60aa      	str	r2, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023c6:	4a6f      	ldr	r2, [pc, #444]	; (8002584 <UART_SetConfig+0x1f8>)
 80023c8:	4295      	cmp	r5, r2
 80023ca:	d112      	bne.n	80023f2 <UART_SetConfig+0x66>
 80023cc:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 80023d0:	496d      	ldr	r1, [pc, #436]	; (8002588 <UART_SetConfig+0x1fc>)
 80023d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023d4:	f002 0203 	and.w	r2, r2, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023dc:	5c8a      	ldrb	r2, [r1, r2]
 80023de:	d066      	beq.n	80024ae <UART_SetConfig+0x122>
    switch (clocksource)
 80023e0:	2a08      	cmp	r2, #8
 80023e2:	d819      	bhi.n	8002418 <UART_SetConfig+0x8c>
 80023e4:	e8df f002 	tbb	[pc, r2]
 80023e8:	189e92c2 	.word	0x189e92c2
 80023ec:	181818a9 	.word	0x181818a9
 80023f0:	ac          	.byte	0xac
 80023f1:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023f2:	4a66      	ldr	r2, [pc, #408]	; (800258c <UART_SetConfig+0x200>)
 80023f4:	4295      	cmp	r5, r2
 80023f6:	d124      	bne.n	8002442 <UART_SetConfig+0xb6>
 80023f8:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 80023fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023fe:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8002402:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002406:	f000 80a0 	beq.w	800254a <UART_SetConfig+0x1be>
 800240a:	d807      	bhi.n	800241c <UART_SetConfig+0x90>
 800240c:	2a00      	cmp	r2, #0
 800240e:	f000 80aa 	beq.w	8002566 <UART_SetConfig+0x1da>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002412:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002416:	d076      	beq.n	8002506 <UART_SetConfig+0x17a>
        ret = HAL_ERROR;
 8002418:	2001      	movs	r0, #1
  return ret;
 800241a:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800241c:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8002420:	f000 8099 	beq.w	8002556 <UART_SetConfig+0x1ca>
 8002424:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8002428:	d1f3      	bne.n	8002412 <UART_SetConfig+0x86>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800242a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800242e:	d179      	bne.n	8002524 <UART_SetConfig+0x198>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002430:	6860      	ldr	r0, [r4, #4]
 8002432:	0843      	lsrs	r3, r0, #1
 8002434:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002438:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800243c:	fbb3 f3f0 	udiv	r3, r3, r0
 8002440:	e054      	b.n	80024ec <UART_SetConfig+0x160>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002442:	4a53      	ldr	r2, [pc, #332]	; (8002590 <UART_SetConfig+0x204>)
 8002444:	4295      	cmp	r5, r2
 8002446:	d10e      	bne.n	8002466 <UART_SetConfig+0xda>
 8002448:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 800244c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800244e:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8002452:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8002456:	d078      	beq.n	800254a <UART_SetConfig+0x1be>
 8002458:	d9d8      	bls.n	800240c <UART_SetConfig+0x80>
 800245a:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 800245e:	d07a      	beq.n	8002556 <UART_SetConfig+0x1ca>
 8002460:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 8002464:	e7e0      	b.n	8002428 <UART_SetConfig+0x9c>
 8002466:	4a4b      	ldr	r2, [pc, #300]	; (8002594 <UART_SetConfig+0x208>)
 8002468:	4295      	cmp	r5, r2
 800246a:	d10e      	bne.n	800248a <UART_SetConfig+0xfe>
 800246c:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8002470:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002472:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8002476:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800247a:	d066      	beq.n	800254a <UART_SetConfig+0x1be>
 800247c:	d9c6      	bls.n	800240c <UART_SetConfig+0x80>
 800247e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8002482:	d068      	beq.n	8002556 <UART_SetConfig+0x1ca>
 8002484:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8002488:	e7ce      	b.n	8002428 <UART_SetConfig+0x9c>
 800248a:	4a43      	ldr	r2, [pc, #268]	; (8002598 <UART_SetConfig+0x20c>)
 800248c:	4295      	cmp	r5, r2
 800248e:	d1c0      	bne.n	8002412 <UART_SetConfig+0x86>
 8002490:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8002494:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002496:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 800249a:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800249e:	d054      	beq.n	800254a <UART_SetConfig+0x1be>
 80024a0:	d9b4      	bls.n	800240c <UART_SetConfig+0x80>
 80024a2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80024a6:	d056      	beq.n	8002556 <UART_SetConfig+0x1ca>
 80024a8:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 80024ac:	e7bc      	b.n	8002428 <UART_SetConfig+0x9c>
    switch (clocksource)
 80024ae:	2a08      	cmp	r2, #8
 80024b0:	d829      	bhi.n	8002506 <UART_SetConfig+0x17a>
 80024b2:	a301      	add	r3, pc, #4	; (adr r3, 80024b8 <UART_SetConfig+0x12c>)
 80024b4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80024b8:	080024dd 	.word	0x080024dd
 80024bc:	08002501 	.word	0x08002501
 80024c0:	08002431 	.word	0x08002431
 80024c4:	08002507 	.word	0x08002507
 80024c8:	08002551 	.word	0x08002551
 80024cc:	08002507 	.word	0x08002507
 80024d0:	08002507 	.word	0x08002507
 80024d4:	08002507 	.word	0x08002507
 80024d8:	0800255d 	.word	0x0800255d
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80024dc:	f7fe ffca 	bl	8001474 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80024e0:	6861      	ldr	r1, [r4, #4]
 80024e2:	084a      	lsrs	r2, r1, #1
 80024e4:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80024e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ec:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80024ee:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 80024f0:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 80024f4:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80024f6:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 80024fa:	4313      	orrs	r3, r2
 80024fc:	60cb      	str	r3, [r1, #12]
 80024fe:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002500:	f7fe ffd0 	bl	80014a4 <HAL_RCC_GetPCLK2Freq>
 8002504:	e7ec      	b.n	80024e0 <UART_SetConfig+0x154>
        ret = HAL_ERROR;
 8002506:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8002508:	2300      	movs	r3, #0
 800250a:	e7f1      	b.n	80024f0 <UART_SetConfig+0x164>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800250c:	f7fe ffca 	bl	80014a4 <HAL_RCC_GetPCLK2Freq>
 8002510:	6863      	ldr	r3, [r4, #4]
 8002512:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002516:	fbb0 f0f3 	udiv	r0, r0, r3
 800251a:	4b1a      	ldr	r3, [pc, #104]	; (8002584 <UART_SetConfig+0x1f8>)
 800251c:	b280      	uxth	r0, r0
 800251e:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002520:	2000      	movs	r0, #0
        break;
 8002522:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002524:	6862      	ldr	r2, [r4, #4]
 8002526:	0853      	lsrs	r3, r2, #1
 8002528:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800252c:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002530:	fbb3 f3f2 	udiv	r3, r3, r2
 8002534:	b29b      	uxth	r3, r3
 8002536:	60eb      	str	r3, [r5, #12]
 8002538:	e7f2      	b.n	8002520 <UART_SetConfig+0x194>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800253a:	f7fe fec5 	bl	80012c8 <HAL_RCC_GetSysClockFreq>
 800253e:	e017      	b.n	8002570 <UART_SetConfig+0x1e4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002540:	6862      	ldr	r2, [r4, #4]
 8002542:	0853      	lsrs	r3, r2, #1
 8002544:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002548:	e7f2      	b.n	8002530 <UART_SetConfig+0x1a4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800254a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800254e:	d1f4      	bne.n	800253a <UART_SetConfig+0x1ae>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002550:	f7fe feba 	bl	80012c8 <HAL_RCC_GetSysClockFreq>
 8002554:	e7c4      	b.n	80024e0 <UART_SetConfig+0x154>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002556:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800255a:	d1f1      	bne.n	8002540 <UART_SetConfig+0x1b4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800255c:	6860      	ldr	r0, [r4, #4]
 800255e:	0843      	lsrs	r3, r0, #1
 8002560:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002564:	e76a      	b.n	800243c <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800256a:	d0b7      	beq.n	80024dc <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800256c:	f7fe ff82 	bl	8001474 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002570:	6863      	ldr	r3, [r4, #4]
 8002572:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002576:	fbb0 f0f3 	udiv	r0, r0, r3
 800257a:	b280      	uxth	r0, r0
 800257c:	60e8      	str	r0, [r5, #12]
 800257e:	e7cf      	b.n	8002520 <UART_SetConfig+0x194>
 8002580:	efff69f3 	.word	0xefff69f3
 8002584:	40013800 	.word	0x40013800
 8002588:	08004270 	.word	0x08004270
 800258c:	40004400 	.word	0x40004400
 8002590:	40004800 	.word	0x40004800
 8002594:	40004c00 	.word	0x40004c00
 8002598:	40005000 	.word	0x40005000

0800259c <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800259c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800259e:	07da      	lsls	r2, r3, #31
{
 80025a0:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80025a2:	d506      	bpl.n	80025b2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80025a4:	6801      	ldr	r1, [r0, #0]
 80025a6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80025a8:	684a      	ldr	r2, [r1, #4]
 80025aa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80025ae:	4322      	orrs	r2, r4
 80025b0:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80025b2:	079c      	lsls	r4, r3, #30
 80025b4:	d506      	bpl.n	80025c4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80025b6:	6801      	ldr	r1, [r0, #0]
 80025b8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80025ba:	684a      	ldr	r2, [r1, #4]
 80025bc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80025c0:	4322      	orrs	r2, r4
 80025c2:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80025c4:	0759      	lsls	r1, r3, #29
 80025c6:	d506      	bpl.n	80025d6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80025c8:	6801      	ldr	r1, [r0, #0]
 80025ca:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80025cc:	684a      	ldr	r2, [r1, #4]
 80025ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025d2:	4322      	orrs	r2, r4
 80025d4:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80025d6:	071a      	lsls	r2, r3, #28
 80025d8:	d506      	bpl.n	80025e8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80025da:	6801      	ldr	r1, [r0, #0]
 80025dc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80025de:	684a      	ldr	r2, [r1, #4]
 80025e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025e4:	4322      	orrs	r2, r4
 80025e6:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80025e8:	06dc      	lsls	r4, r3, #27
 80025ea:	d506      	bpl.n	80025fa <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80025ec:	6801      	ldr	r1, [r0, #0]
 80025ee:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80025f0:	688a      	ldr	r2, [r1, #8]
 80025f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80025f6:	4322      	orrs	r2, r4
 80025f8:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80025fa:	0699      	lsls	r1, r3, #26
 80025fc:	d506      	bpl.n	800260c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80025fe:	6801      	ldr	r1, [r0, #0]
 8002600:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002602:	688a      	ldr	r2, [r1, #8]
 8002604:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002608:	4322      	orrs	r2, r4
 800260a:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800260c:	065a      	lsls	r2, r3, #25
 800260e:	d50f      	bpl.n	8002630 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002610:	6801      	ldr	r1, [r0, #0]
 8002612:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002614:	684a      	ldr	r2, [r1, #4]
 8002616:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800261a:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800261c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002620:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002622:	d105      	bne.n	8002630 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002624:	684a      	ldr	r2, [r1, #4]
 8002626:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002628:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800262c:	4322      	orrs	r2, r4
 800262e:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002630:	061b      	lsls	r3, r3, #24
 8002632:	d506      	bpl.n	8002642 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002634:	6802      	ldr	r2, [r0, #0]
 8002636:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002638:	6853      	ldr	r3, [r2, #4]
 800263a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800263e:	430b      	orrs	r3, r1
 8002640:	6053      	str	r3, [r2, #4]
 8002642:	bd10      	pop	{r4, pc}

08002644 <UART_WaitOnFlagUntilTimeout>:
{
 8002644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002648:	9d06      	ldr	r5, [sp, #24]
 800264a:	4604      	mov	r4, r0
 800264c:	460f      	mov	r7, r1
 800264e:	4616      	mov	r6, r2
 8002650:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002652:	6821      	ldr	r1, [r4, #0]
 8002654:	69ca      	ldr	r2, [r1, #28]
 8002656:	ea37 0302 	bics.w	r3, r7, r2
 800265a:	bf0c      	ite	eq
 800265c:	2201      	moveq	r2, #1
 800265e:	2200      	movne	r2, #0
 8002660:	42b2      	cmp	r2, r6
 8002662:	d002      	beq.n	800266a <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8002664:	2000      	movs	r0, #0
}
 8002666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 800266a:	1c6b      	adds	r3, r5, #1
 800266c:	d0f2      	beq.n	8002654 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800266e:	b99d      	cbnz	r5, 8002698 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002670:	6823      	ldr	r3, [r4, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002678:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	f022 0201 	bic.w	r2, r2, #1
 8002680:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8002682:	2320      	movs	r3, #32
 8002684:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002688:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 800268c:	2300      	movs	r3, #0
 800268e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8002692:	2003      	movs	r0, #3
 8002694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002698:	f7fe fa26 	bl	8000ae8 <HAL_GetTick>
 800269c:	eba0 0008 	sub.w	r0, r0, r8
 80026a0:	4285      	cmp	r5, r0
 80026a2:	d2d6      	bcs.n	8002652 <UART_WaitOnFlagUntilTimeout+0xe>
 80026a4:	e7e4      	b.n	8002670 <UART_WaitOnFlagUntilTimeout+0x2c>

080026a6 <HAL_UART_Transmit>:
{
 80026a6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80026aa:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80026ac:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80026b0:	2b20      	cmp	r3, #32
{
 80026b2:	4604      	mov	r4, r0
 80026b4:	460d      	mov	r5, r1
 80026b6:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80026b8:	d14c      	bne.n	8002754 <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 80026ba:	2900      	cmp	r1, #0
 80026bc:	d048      	beq.n	8002750 <HAL_UART_Transmit+0xaa>
 80026be:	2a00      	cmp	r2, #0
 80026c0:	d046      	beq.n	8002750 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 80026c2:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d044      	beq.n	8002754 <HAL_UART_Transmit+0xae>
 80026ca:	2301      	movs	r3, #1
 80026cc:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026d0:	2300      	movs	r3, #0
 80026d2:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026d4:	2321      	movs	r3, #33	; 0x21
 80026d6:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 80026da:	f7fe fa05 	bl	8000ae8 <HAL_GetTick>
    huart->TxXferSize = Size;
 80026de:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 80026e2:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80026e4:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80026e8:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80026ec:	b292      	uxth	r2, r2
 80026ee:	b962      	cbnz	r2, 800270a <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026f0:	9700      	str	r7, [sp, #0]
 80026f2:	4633      	mov	r3, r6
 80026f4:	2140      	movs	r1, #64	; 0x40
 80026f6:	4620      	mov	r0, r4
 80026f8:	f7ff ffa4 	bl	8002644 <UART_WaitOnFlagUntilTimeout>
 80026fc:	b998      	cbnz	r0, 8002726 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 80026fe:	2320      	movs	r3, #32
 8002700:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8002704:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 8002708:	e00e      	b.n	8002728 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 800270a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800270e:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 8002710:	3b01      	subs	r3, #1
 8002712:	b29b      	uxth	r3, r3
 8002714:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002718:	2200      	movs	r2, #0
 800271a:	4633      	mov	r3, r6
 800271c:	2180      	movs	r1, #128	; 0x80
 800271e:	4620      	mov	r0, r4
 8002720:	f7ff ff90 	bl	8002644 <UART_WaitOnFlagUntilTimeout>
 8002724:	b118      	cbz	r0, 800272e <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 8002726:	2003      	movs	r0, #3
}
 8002728:	b002      	add	sp, #8
 800272a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800272e:	68a3      	ldr	r3, [r4, #8]
 8002730:	6822      	ldr	r2, [r4, #0]
 8002732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002736:	d107      	bne.n	8002748 <HAL_UART_Transmit+0xa2>
 8002738:	6923      	ldr	r3, [r4, #16]
 800273a:	b92b      	cbnz	r3, 8002748 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800273c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002744:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 8002746:	e7cf      	b.n	80026e8 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002748:	782b      	ldrb	r3, [r5, #0]
 800274a:	8513      	strh	r3, [r2, #40]	; 0x28
 800274c:	3501      	adds	r5, #1
 800274e:	e7cb      	b.n	80026e8 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8002750:	2001      	movs	r0, #1
 8002752:	e7e9      	b.n	8002728 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8002754:	2002      	movs	r0, #2
 8002756:	e7e7      	b.n	8002728 <HAL_UART_Transmit+0x82>

08002758 <UART_CheckIdleState>:
{
 8002758:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800275a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800275c:	2600      	movs	r6, #0
 800275e:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8002760:	f7fe f9c2 	bl	8000ae8 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002764:	6823      	ldr	r3, [r4, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800276a:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800276c:	d417      	bmi.n	800279e <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800276e:	6823      	ldr	r3, [r4, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	075b      	lsls	r3, r3, #29
 8002774:	d50a      	bpl.n	800278c <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002776:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	2200      	movs	r2, #0
 800277e:	462b      	mov	r3, r5
 8002780:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002784:	4620      	mov	r0, r4
 8002786:	f7ff ff5d 	bl	8002644 <UART_WaitOnFlagUntilTimeout>
 800278a:	b9a0      	cbnz	r0, 80027b6 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 800278c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800278e:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8002790:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8002794:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8002798:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 800279c:	e00c      	b.n	80027b8 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800279e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	4632      	mov	r2, r6
 80027a6:	4603      	mov	r3, r0
 80027a8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80027ac:	4620      	mov	r0, r4
 80027ae:	f7ff ff49 	bl	8002644 <UART_WaitOnFlagUntilTimeout>
 80027b2:	2800      	cmp	r0, #0
 80027b4:	d0db      	beq.n	800276e <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80027b6:	2003      	movs	r0, #3
}
 80027b8:	b002      	add	sp, #8
 80027ba:	bd70      	pop	{r4, r5, r6, pc}

080027bc <HAL_UART_Init>:
{
 80027bc:	b510      	push	{r4, lr}
  if(huart == NULL)
 80027be:	4604      	mov	r4, r0
 80027c0:	b360      	cbz	r0, 800281c <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 80027c2:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80027c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80027ca:	b91b      	cbnz	r3, 80027d4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80027cc:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 80027d0:	f000 ff94 	bl	80036fc <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80027d4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80027d6:	2324      	movs	r3, #36	; 0x24
 80027d8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80027dc:	6813      	ldr	r3, [r2, #0]
 80027de:	f023 0301 	bic.w	r3, r3, #1
 80027e2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027e4:	4620      	mov	r0, r4
 80027e6:	f7ff fdd1 	bl	800238c <UART_SetConfig>
 80027ea:	2801      	cmp	r0, #1
 80027ec:	d016      	beq.n	800281c <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027f0:	b113      	cbz	r3, 80027f8 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80027f2:	4620      	mov	r0, r4
 80027f4:	f7ff fed2 	bl	800259c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027f8:	6823      	ldr	r3, [r4, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002800:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002808:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002810:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002812:	601a      	str	r2, [r3, #0]
}
 8002814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002818:	f7ff bf9e 	b.w	8002758 <UART_CheckIdleState>
}
 800281c:	2001      	movs	r0, #1
 800281e:	bd10      	pop	{r4, pc}

08002820 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002820:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002824:	2b21      	cmp	r3, #33	; 0x21
 8002826:	d127      	bne.n	8002878 <UART_Transmit_IT+0x58>
  {
    if(huart->TxXferCount == 0U)
 8002828:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800282c:	6802      	ldr	r2, [r0, #0]
 800282e:	b29b      	uxth	r3, r3
 8002830:	b94b      	cbnz	r3, 8002846 <UART_Transmit_IT+0x26>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002832:	6811      	ldr	r1, [r2, #0]
 8002834:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8002838:	6011      	str	r1, [r2, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800283a:	6811      	ldr	r1, [r2, #0]
 800283c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002840:	6011      	str	r1, [r2, #0]
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
      }
      huart->TxXferCount--;

      return HAL_OK;
 8002842:	2000      	movs	r0, #0
 8002844:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002846:	6883      	ldr	r3, [r0, #8]
 8002848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800284c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800284e:	d10e      	bne.n	800286e <UART_Transmit_IT+0x4e>
 8002850:	6901      	ldr	r1, [r0, #16]
 8002852:	b961      	cbnz	r1, 800286e <UART_Transmit_IT+0x4e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002854:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002858:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800285c:	8511      	strh	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800285e:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8002860:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002864:	3b01      	subs	r3, #1
 8002866:	b29b      	uxth	r3, r3
 8002868:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 800286c:	e7e9      	b.n	8002842 <UART_Transmit_IT+0x22>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 800286e:	1c59      	adds	r1, r3, #1
 8002870:	64c1      	str	r1, [r0, #76]	; 0x4c
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	8513      	strh	r3, [r2, #40]	; 0x28
 8002876:	e7f3      	b.n	8002860 <UART_Transmit_IT+0x40>
    }
  }
  else
  {
    return HAL_BUSY;
 8002878:	2002      	movs	r0, #2
  }
}
 800287a:	4770      	bx	lr

0800287c <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800287c:	6801      	ldr	r1, [r0, #0]
{
 800287e:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002880:	680b      	ldr	r3, [r1, #0]
 8002882:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002886:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002888:	2320      	movs	r3, #32
 800288a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 800288e:	f7ff fd6f 	bl	8002370 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8002892:	2000      	movs	r0, #0
 8002894:	bd08      	pop	{r3, pc}

08002896 <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002896:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800289a:	2b22      	cmp	r3, #34	; 0x22
{
 800289c:	b510      	push	{r4, lr}
 800289e:	6803      	ldr	r3, [r0, #0]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028a0:	d129      	bne.n	80028f6 <UART_Receive_IT+0x60>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80028a2:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028a4:	6883      	ldr	r3, [r0, #8]
  uint16_t  uhMask = huart->Mask;
 80028a6:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ae:	ea02 0201 	and.w	r2, r2, r1
 80028b2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80028b4:	d11b      	bne.n	80028ee <UART_Receive_IT+0x58>
 80028b6:	6901      	ldr	r1, [r0, #16]
 80028b8:	b9c9      	cbnz	r1, 80028ee <UART_Receive_IT+0x58>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 80028ba:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr +=2U;
 80028be:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 80028c0:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 80028c4:	3c01      	subs	r4, #1
 80028c6:	b2a4      	uxth	r4, r4
 80028c8:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 80028cc:	b96c      	cbnz	r4, 80028ea <UART_Receive_IT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028ce:	6803      	ldr	r3, [r0, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80028d6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	f022 0201 	bic.w	r2, r2, #1
 80028de:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80028e0:	2320      	movs	r3, #32
 80028e2:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 80028e6:	f7ff fd44 	bl	8002372 <HAL_UART_RxCpltCallback>

      return HAL_OK;
    }

    return HAL_OK;
 80028ea:	2000      	movs	r0, #0
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 80028ec:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80028ee:	1c59      	adds	r1, r3, #1
 80028f0:	6541      	str	r1, [r0, #84]	; 0x54
 80028f2:	701a      	strb	r2, [r3, #0]
 80028f4:	e7e4      	b.n	80028c0 <UART_Receive_IT+0x2a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80028f6:	699a      	ldr	r2, [r3, #24]
 80028f8:	f042 0208 	orr.w	r2, r2, #8
 80028fc:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 80028fe:	2002      	movs	r0, #2
 8002900:	bd10      	pop	{r4, pc}
	...

08002904 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002904:	6802      	ldr	r2, [r0, #0]
 8002906:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002908:	6811      	ldr	r1, [r2, #0]
{
 800290a:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 800290c:	f013 050f 	ands.w	r5, r3, #15
{
 8002910:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8002912:	d107      	bne.n	8002924 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002914:	069e      	lsls	r6, r3, #26
 8002916:	d505      	bpl.n	8002924 <HAL_UART_IRQHandler+0x20>
 8002918:	068e      	lsls	r6, r1, #26
 800291a:	d503      	bpl.n	8002924 <HAL_UART_IRQHandler+0x20>
}
 800291c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002920:	f7ff bfb9 	b.w	8002896 <UART_Receive_IT>
  cr3its = READ_REG(huart->Instance->CR3);
 8002924:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 8002926:	2d00      	cmp	r5, #0
 8002928:	d05c      	beq.n	80029e4 <HAL_UART_IRQHandler+0xe0>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800292a:	f010 0501 	ands.w	r5, r0, #1
 800292e:	d102      	bne.n	8002936 <HAL_UART_IRQHandler+0x32>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8002930:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002934:	d056      	beq.n	80029e4 <HAL_UART_IRQHandler+0xe0>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002936:	07d8      	lsls	r0, r3, #31
 8002938:	d507      	bpl.n	800294a <HAL_UART_IRQHandler+0x46>
 800293a:	05ce      	lsls	r6, r1, #23
 800293c:	d505      	bpl.n	800294a <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 800293e:	2001      	movs	r0, #1
 8002940:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002942:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002944:	f040 0001 	orr.w	r0, r0, #1
 8002948:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800294a:	0798      	lsls	r0, r3, #30
 800294c:	d506      	bpl.n	800295c <HAL_UART_IRQHandler+0x58>
 800294e:	b12d      	cbz	r5, 800295c <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8002950:	2002      	movs	r0, #2
 8002952:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002954:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002956:	f040 0004 	orr.w	r0, r0, #4
 800295a:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800295c:	075e      	lsls	r6, r3, #29
 800295e:	d506      	bpl.n	800296e <HAL_UART_IRQHandler+0x6a>
 8002960:	b12d      	cbz	r5, 800296e <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8002962:	2004      	movs	r0, #4
 8002964:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002966:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002968:	f040 0002 	orr.w	r0, r0, #2
 800296c:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 800296e:	0718      	lsls	r0, r3, #28
 8002970:	d507      	bpl.n	8002982 <HAL_UART_IRQHandler+0x7e>
 8002972:	068e      	lsls	r6, r1, #26
 8002974:	d400      	bmi.n	8002978 <HAL_UART_IRQHandler+0x74>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002976:	b125      	cbz	r5, 8002982 <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8002978:	2008      	movs	r0, #8
 800297a:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800297c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800297e:	4302      	orrs	r2, r0
 8002980:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002982:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002984:	2a00      	cmp	r2, #0
 8002986:	d050      	beq.n	8002a2a <HAL_UART_IRQHandler+0x126>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002988:	0698      	lsls	r0, r3, #26
 800298a:	d504      	bpl.n	8002996 <HAL_UART_IRQHandler+0x92>
 800298c:	068a      	lsls	r2, r1, #26
 800298e:	d502      	bpl.n	8002996 <HAL_UART_IRQHandler+0x92>
        UART_Receive_IT(huart);
 8002990:	4620      	mov	r0, r4
 8002992:	f7ff ff80 	bl	8002896 <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002996:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002998:	071b      	lsls	r3, r3, #28
        UART_EndRxTransfer(huart);
 800299a:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800299c:	d404      	bmi.n	80029a8 <HAL_UART_IRQHandler+0xa4>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800299e:	6823      	ldr	r3, [r4, #0]
 80029a0:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80029a2:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80029a6:	d019      	beq.n	80029dc <HAL_UART_IRQHandler+0xd8>
        UART_EndRxTransfer(huart);
 80029a8:	f7ff fcd5 	bl	8002356 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029ac:	6823      	ldr	r3, [r4, #0]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	0656      	lsls	r6, r2, #25
 80029b2:	d50f      	bpl.n	80029d4 <HAL_UART_IRQHandler+0xd0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029b4:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80029b6:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029bc:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80029be:	b148      	cbz	r0, 80029d4 <HAL_UART_IRQHandler+0xd0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029c0:	4b1a      	ldr	r3, [pc, #104]	; (8002a2c <HAL_UART_IRQHandler+0x128>)
 80029c2:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029c4:	f7fe f8fe 	bl	8000bc4 <HAL_DMA_Abort_IT>
 80029c8:	b378      	cbz	r0, 8002a2a <HAL_UART_IRQHandler+0x126>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029ca:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 80029cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029d0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80029d2:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80029d4:	4620      	mov	r0, r4
 80029d6:	f7ff fccd 	bl	8002374 <HAL_UART_ErrorCallback>
 80029da:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80029dc:	f7ff fcca 	bl	8002374 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e0:	66e5      	str	r5, [r4, #108]	; 0x6c
 80029e2:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80029e4:	02dd      	lsls	r5, r3, #11
 80029e6:	d50e      	bpl.n	8002a06 <HAL_UART_IRQHandler+0x102>
 80029e8:	0246      	lsls	r6, r0, #9
 80029ea:	d50c      	bpl.n	8002a06 <HAL_UART_IRQHandler+0x102>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80029ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80029f0:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 80029f2:	2320      	movs	r3, #32
 80029f4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    HAL_UARTEx_WakeupCallback(huart);
 80029f8:	4620      	mov	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 80029fa:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 80029fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8002a02:	f000 b815 	b.w	8002a30 <HAL_UARTEx_WakeupCallback>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a06:	061d      	lsls	r5, r3, #24
 8002a08:	d506      	bpl.n	8002a18 <HAL_UART_IRQHandler+0x114>
 8002a0a:	0608      	lsls	r0, r1, #24
 8002a0c:	d504      	bpl.n	8002a18 <HAL_UART_IRQHandler+0x114>
    UART_Transmit_IT(huart);
 8002a0e:	4620      	mov	r0, r4
}
 8002a10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_Transmit_IT(huart);
 8002a14:	f7ff bf04 	b.w	8002820 <UART_Transmit_IT>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a18:	065a      	lsls	r2, r3, #25
 8002a1a:	d506      	bpl.n	8002a2a <HAL_UART_IRQHandler+0x126>
 8002a1c:	064b      	lsls	r3, r1, #25
 8002a1e:	d504      	bpl.n	8002a2a <HAL_UART_IRQHandler+0x126>
    UART_EndTransmit_IT(huart);
 8002a20:	4620      	mov	r0, r4
}
 8002a22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_EndTransmit_IT(huart);
 8002a26:	f7ff bf29 	b.w	800287c <UART_EndTransmit_IT>
 8002a2a:	bd70      	pop	{r4, r5, r6, pc}
 8002a2c:	08002377 	.word	0x08002377

08002a30 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002a30:	4770      	bx	lr

08002a32 <DebugLED.part.0>:

void DebugLED(int condition) {
	if (condition == 0) {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	} else if (condition == 1) {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8002a32:	2201      	movs	r2, #1
 8002a34:	2120      	movs	r1, #32
 8002a36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a3a:	f7fe b9bd 	b.w	8000db8 <HAL_GPIO_WritePin>
	...

08002a40 <PrintDistance>:
void PrintDistance(double raw_distance) {
 8002a40:	b570      	push	{r4, r5, r6, lr}
 8002a42:	ec55 4b10 	vmov	r4, r5, d0
	int distance_interger = (int) raw_distance;
 8002a46:	ee10 0a10 	vmov	r0, s0
 8002a4a:	4629      	mov	r1, r5
 8002a4c:	f7fd ffe2 	bl	8000a14 <__aeabi_d2iz>
 8002a50:	4606      	mov	r6, r0
	int distance_float = (int) ((raw_distance - distance_interger) * 100);
 8002a52:	f7fd fd67 	bl	8000524 <__aeabi_i2d>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4620      	mov	r0, r4
 8002a5c:	4629      	mov	r1, r5
 8002a5e:	f7fd fc13 	bl	8000288 <__aeabi_dsub>
 8002a62:	2200      	movs	r2, #0
 8002a64:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <PrintDistance+0x50>)
	sprintf(tosend, "%d.%02d\r\n", distance_interger, distance_float);
 8002a66:	4c0b      	ldr	r4, [pc, #44]	; (8002a94 <PrintDistance+0x54>)
	int distance_float = (int) ((raw_distance - distance_interger) * 100);
 8002a68:	f7fd fdc2 	bl	80005f0 <__aeabi_dmul>
 8002a6c:	f7fd ffd2 	bl	8000a14 <__aeabi_d2iz>
	sprintf(tosend, "%d.%02d\r\n", distance_interger, distance_float);
 8002a70:	4632      	mov	r2, r6
 8002a72:	4603      	mov	r3, r0
 8002a74:	4908      	ldr	r1, [pc, #32]	; (8002a98 <PrintDistance+0x58>)
 8002a76:	4620      	mov	r0, r4
 8002a78:	f000 ffc0 	bl	80039fc <siprintf>
	HAL_UART_Transmit(&huart2, tosend, sizeof(tosend), 0xffff);
 8002a7c:	4621      	mov	r1, r4
 8002a7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a82:	2214      	movs	r2, #20
 8002a84:	4805      	ldr	r0, [pc, #20]	; (8002a9c <PrintDistance+0x5c>)
}
 8002a86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_UART_Transmit(&huart2, tosend, sizeof(tosend), 0xffff);
 8002a8a:	f7ff be0c 	b.w	80026a6 <HAL_UART_Transmit>
 8002a8e:	bf00      	nop
 8002a90:	40590000 	.word	0x40590000
 8002a94:	20000090 	.word	0x20000090
 8002a98:	08004274 	.word	0x08004274
 8002a9c:	20000344 	.word	0x20000344

08002aa0 <DebugLED>:
	if (condition == 0) {
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	b920      	cbnz	r0, 8002aae <DebugLED+0xe>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002aa4:	2120      	movs	r1, #32
 8002aa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aaa:	f7fe b985 	b.w	8000db8 <HAL_GPIO_WritePin>
	} else if (condition == 1) {
 8002aae:	2801      	cmp	r0, #1
 8002ab0:	d101      	bne.n	8002ab6 <DebugLED+0x16>
 8002ab2:	f7ff bfbe 	b.w	8002a32 <DebugLED.part.0>
 8002ab6:	4770      	bx	lr

08002ab8 <MotorSet>:
	} else {
		return;
	}
}

void MotorSet(int RightThrust, int LeftThrust) {
 8002ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (abs(LeftThrust) > 100 || abs(RightThrust) > 100) {
 8002abc:	ea81 75e1 	eor.w	r5, r1, r1, asr #31
 8002ac0:	eba5 75e1 	sub.w	r5, r5, r1, asr #31
 8002ac4:	2d64      	cmp	r5, #100	; 0x64
void MotorSet(int RightThrust, int LeftThrust) {
 8002ac6:	4606      	mov	r6, r0
 8002ac8:	460f      	mov	r7, r1
	if (abs(LeftThrust) > 100 || abs(RightThrust) > 100) {
 8002aca:	dc05      	bgt.n	8002ad8 <MotorSet+0x20>
 8002acc:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
 8002ad0:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
 8002ad4:	2c64      	cmp	r4, #100	; 0x64
 8002ad6:	dd11      	ble.n	8002afc <MotorSet+0x44>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ade:	481e      	ldr	r0, [pc, #120]	; (8002b58 <MotorSet+0xa0>)
 8002ae0:	f7fe f96a 	bl	8000db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002aea:	481c      	ldr	r0, [pc, #112]	; (8002b5c <MotorSet+0xa4>)
 8002aec:	f7fe f964 	bl	8000db8 <HAL_GPIO_WritePin>
		TIM8->CCR3 = 0;
 8002af0:	4b1b      	ldr	r3, [pc, #108]	; (8002b60 <MotorSet+0xa8>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM8->CCR4 = 0;
 8002af6:	641a      	str	r2, [r3, #64]	; 0x40
 8002af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return;
	}
	if (LeftThrust > 0) {
 8002afc:	2900      	cmp	r1, #0
 8002afe:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8002b60 <MotorSet+0xa8>
 8002b02:	dd13      	ble.n	8002b2c <MotorSet+0x74>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8002b04:	2200      	movs	r2, #0
 8002b06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b0a:	4813      	ldr	r0, [pc, #76]	; (8002b58 <MotorSet+0xa0>)
 8002b0c:	f7fe f954 	bl	8000db8 <HAL_GPIO_WritePin>
		TIM8->CCR3 = LeftThrust;
 8002b10:	f8c8 703c 	str.w	r7, [r8, #60]	; 0x3c
	}
	if (LeftThrust <= 0){
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
		TIM8->CCR3 = 100 - (abs(LeftThrust));
	}
	if (RightThrust > 0) {
 8002b14:	2e00      	cmp	r6, #0
 8002b16:	4d12      	ldr	r5, [pc, #72]	; (8002b60 <MotorSet+0xa8>)
 8002b18:	dd13      	ble.n	8002b42 <MotorSet+0x8a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b20:	480e      	ldr	r0, [pc, #56]	; (8002b5c <MotorSet+0xa4>)
 8002b22:	f7fe f949 	bl	8000db8 <HAL_GPIO_WritePin>
		TIM8->CCR4 = RightThrust;
 8002b26:	642e      	str	r6, [r5, #64]	; 0x40
 8002b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b32:	4809      	ldr	r0, [pc, #36]	; (8002b58 <MotorSet+0xa0>)
		TIM8->CCR3 = 100 - (abs(LeftThrust));
 8002b34:	f1c5 0564 	rsb	r5, r5, #100	; 0x64
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8002b38:	f7fe f93e 	bl	8000db8 <HAL_GPIO_WritePin>
		TIM8->CCR3 = 100 - (abs(LeftThrust));
 8002b3c:	f8c8 503c 	str.w	r5, [r8, #60]	; 0x3c
 8002b40:	e7e8      	b.n	8002b14 <MotorSet+0x5c>
	}
	if (RightThrust <= 0){
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8002b42:	2201      	movs	r2, #1
 8002b44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b48:	4804      	ldr	r0, [pc, #16]	; (8002b5c <MotorSet+0xa4>)
		TIM8->CCR4 = 100 - (abs(RightThrust));
 8002b4a:	f1c4 0464 	rsb	r4, r4, #100	; 0x64
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8002b4e:	f7fe f933 	bl	8000db8 <HAL_GPIO_WritePin>
		TIM8->CCR4 = 100 - (abs(RightThrust));
 8002b52:	642c      	str	r4, [r5, #64]	; 0x40
 8002b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b58:	48000400 	.word	0x48000400
 8002b5c:	48000800 	.word	0x48000800
 8002b60:	40013400 	.word	0x40013400

08002b64 <HAL_TIM_IC_CaptureCallback>:
	TIM8->CCR3 = 100;
	TIM8->CCR4 = 100;
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim) {
	if (htim->Instance == TIM2) {
 8002b64:	6803      	ldr	r3, [r0, #0]
 8002b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim) {
 8002b6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002b6c:	4604      	mov	r4, r0
 8002b6e:	4db4      	ldr	r5, [pc, #720]	; (8002e40 <HAL_TIM_IC_CaptureCallback+0x2dc>)
	if (htim->Instance == TIM2) {
 8002b70:	d10a      	bne.n	8002b88 <HAL_TIM_IC_CaptureCallback+0x24>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1) {
 8002b72:	2101      	movs	r1, #1
 8002b74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b78:	f7fe f918 	bl	8000dac <HAL_GPIO_ReadPin>
 8002b7c:	4bb1      	ldr	r3, [pc, #708]	; (8002e44 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 8002b7e:	2801      	cmp	r0, #1
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002b80:	681b      	ldr	r3, [r3, #0]
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1) {
 8002b82:	d149      	bne.n	8002c18 <HAL_TIM_IC_CaptureCallback+0xb4>
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002b84:	2200      	movs	r2, #0
 8002b86:	625a      	str	r2, [r3, #36]	; 0x24
			Front = (int) Frontdistance;
//			PrintDistance(Frontdistance);

		}
	}
	if (htim->Instance == TIM3) {
 8002b88:	6822      	ldr	r2, [r4, #0]
 8002b8a:	4baf      	ldr	r3, [pc, #700]	; (8002e48 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d10a      	bne.n	8002ba6 <HAL_TIM_IC_CaptureCallback+0x42>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 1) {
 8002b90:	2140      	movs	r1, #64	; 0x40
 8002b92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b96:	f7fe f909 	bl	8000dac <HAL_GPIO_ReadPin>
 8002b9a:	4bac      	ldr	r3, [pc, #688]	; (8002e4c <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8002b9c:	2801      	cmp	r0, #1
			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002b9e:	681b      	ldr	r3, [r3, #0]
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 1) {
 8002ba0:	d145      	bne.n	8002c2e <HAL_TIM_IC_CaptureCallback+0xca>
			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	625a      	str	r2, [r3, #36]	; 0x24
//			PrintDistance(FrontLeft);
			double test = (FrontRight-FrontLeft);
//			PrintDistance(test);
		}
	}
	if (htim->Instance == TIM15) {
 8002ba6:	6822      	ldr	r2, [r4, #0]
 8002ba8:	4ba9      	ldr	r3, [pc, #676]	; (8002e50 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d10a      	bne.n	8002bc4 <HAL_TIM_IC_CaptureCallback+0x60>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 1) {
 8002bae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002bb2:	48a8      	ldr	r0, [pc, #672]	; (8002e54 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8002bb4:	f7fe f8fa 	bl	8000dac <HAL_GPIO_ReadPin>
 8002bb8:	4ba7      	ldr	r3, [pc, #668]	; (8002e58 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 8002bba:	2801      	cmp	r0, #1
			__HAL_TIM_SET_COUNTER(&htim15, 0);
 8002bbc:	681b      	ldr	r3, [r3, #0]
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 1) {
 8002bbe:	d142      	bne.n	8002c46 <HAL_TIM_IC_CaptureCallback+0xe2>
			__HAL_TIM_SET_COUNTER(&htim15, 0);
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	625a      	str	r2, [r3, #36]	; 0x24
			double Rightdistance = Rightcnt / (double) 58;
			FrontRight = (int) Rightdistance;
			PrintDistance(Rightdistance);
		}
	}
	if (htim->Instance == TIM4) {
 8002bc4:	6822      	ldr	r2, [r4, #0]
 8002bc6:	4ba5      	ldr	r3, [pc, #660]	; (8002e5c <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d10b      	bne.n	8002be4 <HAL_TIM_IC_CaptureCallback+0x80>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 1) {
 8002bcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002bd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bd4:	f7fe f8ea 	bl	8000dac <HAL_GPIO_ReadPin>
 8002bd8:	4ba1      	ldr	r3, [pc, #644]	; (8002e60 <HAL_TIM_IC_CaptureCallback+0x2fc>)
 8002bda:	2801      	cmp	r0, #1
			__HAL_TIM_SET_COUNTER(&htim4, 0);
 8002bdc:	681b      	ldr	r3, [r3, #0]
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 1) {
 8002bde:	d144      	bne.n	8002c6a <HAL_TIM_IC_CaptureCallback+0x106>
			__HAL_TIM_SET_COUNTER(&htim4, 0);
 8002be0:	2200      	movs	r2, #0
 8002be2:	625a      	str	r2, [r3, #36]	; 0x24
//			PrintDistance(RearRightdistance);
//			PrintDistance(RightSlope);

		}
	}
	if (htim->Instance == TIM16) {
 8002be4:	6822      	ldr	r2, [r4, #0]
 8002be6:	4b9f      	ldr	r3, [pc, #636]	; (8002e64 <HAL_TIM_IC_CaptureCallback+0x300>)
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d10b      	bne.n	8002c04 <HAL_TIM_IC_CaptureCallback+0xa0>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == 1) {
 8002bec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bf4:	f7fe f8da 	bl	8000dac <HAL_GPIO_ReadPin>
 8002bf8:	4b9b      	ldr	r3, [pc, #620]	; (8002e68 <HAL_TIM_IC_CaptureCallback+0x304>)
 8002bfa:	2801      	cmp	r0, #1
			__HAL_TIM_SET_COUNTER(&htim16, 0);
 8002bfc:	681b      	ldr	r3, [r3, #0]
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == 1) {
 8002bfe:	d145      	bne.n	8002c8c <HAL_TIM_IC_CaptureCallback+0x128>
			__HAL_TIM_SET_COUNTER(&htim16, 0);
 8002c00:	2200      	movs	r2, #0
 8002c02:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

//********************************************************************************************
//*************************Tune the following section ****************************************
if(Front<20){
 8002c04:	682b      	ldr	r3, [r5, #0]
 8002c06:	2b13      	cmp	r3, #19
 8002c08:	dc51      	bgt.n	8002cae <HAL_TIM_IC_CaptureCallback+0x14a>
		DebugLED(0);
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	f7ff ff48 	bl	8002aa0 <DebugLED>
		MotorSet(-V4,-V4);
 8002c10:	f06f 0154 	mvn.w	r1, #84	; 0x54
		DebugLED(0);
		MotorSet(V3,V2);
	}else if((FrontLeft-FrontRight)>15){
		DebugLED(0);
		MotorSet(V2,V3);
	}else MotorSet(V3,V3);
 8002c14:	4608      	mov	r0, r1
 8002c16:	e053      	b.n	8002cc0 <HAL_TIM_IC_CaptureCallback+0x15c>
			int Frontcnt = __HAL_TIM_GET_COUNTER(&htim2);
 8002c18:	6a58      	ldr	r0, [r3, #36]	; 0x24
			double Frontdistance = Frontcnt / (double) 58;
 8002c1a:	f7fd fc83 	bl	8000524 <__aeabi_i2d>
 8002c1e:	2200      	movs	r2, #0
 8002c20:	4b92      	ldr	r3, [pc, #584]	; (8002e6c <HAL_TIM_IC_CaptureCallback+0x308>)
 8002c22:	f7fd fe0f 	bl	8000844 <__aeabi_ddiv>
			Front = (int) Frontdistance;
 8002c26:	f7fd fef5 	bl	8000a14 <__aeabi_d2iz>
 8002c2a:	6028      	str	r0, [r5, #0]
 8002c2c:	e7ac      	b.n	8002b88 <HAL_TIM_IC_CaptureCallback+0x24>
			int Leftcnt = __HAL_TIM_GET_COUNTER(&htim3);
 8002c2e:	6a58      	ldr	r0, [r3, #36]	; 0x24
			double Leftdistance = Leftcnt / (double) 58;
 8002c30:	f7fd fc78 	bl	8000524 <__aeabi_i2d>
 8002c34:	4b8d      	ldr	r3, [pc, #564]	; (8002e6c <HAL_TIM_IC_CaptureCallback+0x308>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	f7fd fe04 	bl	8000844 <__aeabi_ddiv>
			FrontLeft = (int) Leftdistance;
 8002c3c:	f7fd feea 	bl	8000a14 <__aeabi_d2iz>
 8002c40:	4b8b      	ldr	r3, [pc, #556]	; (8002e70 <HAL_TIM_IC_CaptureCallback+0x30c>)
 8002c42:	6018      	str	r0, [r3, #0]
 8002c44:	e7af      	b.n	8002ba6 <HAL_TIM_IC_CaptureCallback+0x42>
			int Rightcnt = __HAL_TIM_GET_COUNTER(&htim15);
 8002c46:	6a58      	ldr	r0, [r3, #36]	; 0x24
			double Rightdistance = Rightcnt / (double) 58;
 8002c48:	f7fd fc6c 	bl	8000524 <__aeabi_i2d>
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	4b87      	ldr	r3, [pc, #540]	; (8002e6c <HAL_TIM_IC_CaptureCallback+0x308>)
 8002c50:	f7fd fdf8 	bl	8000844 <__aeabi_ddiv>
 8002c54:	e9cd 0100 	strd	r0, r1, [sp]
			FrontRight = (int) Rightdistance;
 8002c58:	f7fd fedc 	bl	8000a14 <__aeabi_d2iz>
 8002c5c:	4b85      	ldr	r3, [pc, #532]	; (8002e74 <HAL_TIM_IC_CaptureCallback+0x310>)
			PrintDistance(Rightdistance);
 8002c5e:	ed9d 0b00 	vldr	d0, [sp]
			FrontRight = (int) Rightdistance;
 8002c62:	6018      	str	r0, [r3, #0]
			PrintDistance(Rightdistance);
 8002c64:	f7ff feec 	bl	8002a40 <PrintDistance>
 8002c68:	e7ac      	b.n	8002bc4 <HAL_TIM_IC_CaptureCallback+0x60>
			int RearRightcnt = __HAL_TIM_GET_COUNTER(&htim4);
 8002c6a:	6a58      	ldr	r0, [r3, #36]	; 0x24
			double RearRightdistance = RearRightcnt / (double) 58;
 8002c6c:	f7fd fc5a 	bl	8000524 <__aeabi_i2d>
 8002c70:	4b7e      	ldr	r3, [pc, #504]	; (8002e6c <HAL_TIM_IC_CaptureCallback+0x308>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	f7fd fde6 	bl	8000844 <__aeabi_ddiv>
			RearRight = (int) RearRightdistance;
 8002c78:	f7fd fecc 	bl	8000a14 <__aeabi_d2iz>
 8002c7c:	4b7e      	ldr	r3, [pc, #504]	; (8002e78 <HAL_TIM_IC_CaptureCallback+0x314>)
 8002c7e:	6018      	str	r0, [r3, #0]
			RightSlope = (RearRight-FrontRight);
 8002c80:	4b7c      	ldr	r3, [pc, #496]	; (8002e74 <HAL_TIM_IC_CaptureCallback+0x310>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	1ac0      	subs	r0, r0, r3
 8002c86:	4b7d      	ldr	r3, [pc, #500]	; (8002e7c <HAL_TIM_IC_CaptureCallback+0x318>)
 8002c88:	6018      	str	r0, [r3, #0]
 8002c8a:	e7ab      	b.n	8002be4 <HAL_TIM_IC_CaptureCallback+0x80>
			int RearLeftcnt = __HAL_TIM_GET_COUNTER(&htim16);
 8002c8c:	6a58      	ldr	r0, [r3, #36]	; 0x24
			double RearLeftdistance = RearLeftcnt / (double) 58;
 8002c8e:	f7fd fc49 	bl	8000524 <__aeabi_i2d>
 8002c92:	4b76      	ldr	r3, [pc, #472]	; (8002e6c <HAL_TIM_IC_CaptureCallback+0x308>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	f7fd fdd5 	bl	8000844 <__aeabi_ddiv>
			RearLeft = (int) RearLeftdistance;
 8002c9a:	f7fd febb 	bl	8000a14 <__aeabi_d2iz>
 8002c9e:	4b78      	ldr	r3, [pc, #480]	; (8002e80 <HAL_TIM_IC_CaptureCallback+0x31c>)
 8002ca0:	6018      	str	r0, [r3, #0]
			LeftSlope = (RearLeft-FrontLeft);
 8002ca2:	4b73      	ldr	r3, [pc, #460]	; (8002e70 <HAL_TIM_IC_CaptureCallback+0x30c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	1ac0      	subs	r0, r0, r3
 8002ca8:	4b76      	ldr	r3, [pc, #472]	; (8002e84 <HAL_TIM_IC_CaptureCallback+0x320>)
 8002caa:	6018      	str	r0, [r3, #0]
 8002cac:	e7aa      	b.n	8002c04 <HAL_TIM_IC_CaptureCallback+0xa0>
else if(Front>80){
 8002cae:	2b50      	cmp	r3, #80	; 0x50
 8002cb0:	dd2e      	ble.n	8002d10 <HAL_TIM_IC_CaptureCallback+0x1ac>
	if(FrontRight<7) MotorSet(-V1,V1);
 8002cb2:	4b70      	ldr	r3, [pc, #448]	; (8002e74 <HAL_TIM_IC_CaptureCallback+0x310>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2b06      	cmp	r3, #6
 8002cb8:	dc0a      	bgt.n	8002cd0 <HAL_TIM_IC_CaptureCallback+0x16c>
 8002cba:	2146      	movs	r1, #70	; 0x46
 8002cbc:	f06f 0045 	mvn.w	r0, #69	; 0x45
		MotorSet(V4,V4+2);
 8002cc0:	f7ff fefa 	bl	8002ab8 <MotorSet>
}

//*************************Tune the above section ********************************************
//********************************************************************************************

	HAL_TIM_Base_Start_IT(&htim1);
 8002cc4:	4870      	ldr	r0, [pc, #448]	; (8002e88 <HAL_TIM_IC_CaptureCallback+0x324>)
}
 8002cc6:	b003      	add	sp, #12
 8002cc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	HAL_TIM_Base_Start_IT(&htim1);
 8002ccc:	f7fe bd46 	b.w	800175c <HAL_TIM_Base_Start_IT>
	else if(FrontLeft<7) MotorSet(V1,-V1);
 8002cd0:	4b67      	ldr	r3, [pc, #412]	; (8002e70 <HAL_TIM_IC_CaptureCallback+0x30c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2b06      	cmp	r3, #6
 8002cd6:	dc03      	bgt.n	8002ce0 <HAL_TIM_IC_CaptureCallback+0x17c>
 8002cd8:	f06f 0145 	mvn.w	r1, #69	; 0x45
 8002cdc:	2046      	movs	r0, #70	; 0x46
 8002cde:	e7ef      	b.n	8002cc0 <HAL_TIM_IC_CaptureCallback+0x15c>
	else if(RightSlope>9){
 8002ce0:	4b66      	ldr	r3, [pc, #408]	; (8002e7c <HAL_TIM_IC_CaptureCallback+0x318>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2b09      	cmp	r3, #9
 8002ce6:	dd05      	ble.n	8002cf4 <HAL_TIM_IC_CaptureCallback+0x190>
		DebugLED(0);
 8002ce8:	2000      	movs	r0, #0
 8002cea:	f7ff fed9 	bl	8002aa0 <DebugLED>
		MotorSet(V3,V4);
 8002cee:	2155      	movs	r1, #85	; 0x55
		MotorSet(V3,V2);
 8002cf0:	2050      	movs	r0, #80	; 0x50
 8002cf2:	e7e5      	b.n	8002cc0 <HAL_TIM_IC_CaptureCallback+0x15c>
	}else if (LeftSlope >9){
 8002cf4:	4b63      	ldr	r3, [pc, #396]	; (8002e84 <HAL_TIM_IC_CaptureCallback+0x320>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2b09      	cmp	r3, #9
 8002cfa:	dd04      	ble.n	8002d06 <HAL_TIM_IC_CaptureCallback+0x1a2>
 8002cfc:	f7ff fe99 	bl	8002a32 <DebugLED.part.0>
		MotorSet(V4,V3);
 8002d00:	2150      	movs	r1, #80	; 0x50
		MotorSet(V4,V4+2);
 8002d02:	2055      	movs	r0, #85	; 0x55
 8002d04:	e7dc      	b.n	8002cc0 <HAL_TIM_IC_CaptureCallback+0x15c>
		DebugLED(0);
 8002d06:	2000      	movs	r0, #0
 8002d08:	f7ff feca 	bl	8002aa0 <DebugLED>
		MotorSet(V4,V4+2);
 8002d0c:	2157      	movs	r1, #87	; 0x57
 8002d0e:	e7f8      	b.n	8002d02 <HAL_TIM_IC_CaptureCallback+0x19e>
else if(Front>75&&Front<80){
 8002d10:	f1a3 024c 	sub.w	r2, r3, #76	; 0x4c
 8002d14:	2a03      	cmp	r2, #3
 8002d16:	d815      	bhi.n	8002d44 <HAL_TIM_IC_CaptureCallback+0x1e0>
	if(FrontRight<7) MotorSet(-V1,V1);
 8002d18:	4b56      	ldr	r3, [pc, #344]	; (8002e74 <HAL_TIM_IC_CaptureCallback+0x310>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b06      	cmp	r3, #6
 8002d1e:	dc09      	bgt.n	8002d34 <HAL_TIM_IC_CaptureCallback+0x1d0>
 8002d20:	2146      	movs	r1, #70	; 0x46
 8002d22:	f06f 0045 	mvn.w	r0, #69	; 0x45
	else if(FrontLeft<7) MotorSet(V1,-V1);
 8002d26:	f7ff fec7 	bl	8002ab8 <MotorSet>
	DebugLED(0);
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	f7ff feb8 	bl	8002aa0 <DebugLED>
	else MotorSet(0,0);
 8002d30:	2100      	movs	r1, #0
 8002d32:	e76f      	b.n	8002c14 <HAL_TIM_IC_CaptureCallback+0xb0>
	else if(FrontLeft<7) MotorSet(V1,-V1);
 8002d34:	4b4e      	ldr	r3, [pc, #312]	; (8002e70 <HAL_TIM_IC_CaptureCallback+0x30c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b06      	cmp	r3, #6
 8002d3a:	dcf6      	bgt.n	8002d2a <HAL_TIM_IC_CaptureCallback+0x1c6>
 8002d3c:	f06f 0145 	mvn.w	r1, #69	; 0x45
 8002d40:	2046      	movs	r0, #70	; 0x46
 8002d42:	e7f0      	b.n	8002d26 <HAL_TIM_IC_CaptureCallback+0x1c2>
else if(Front>65&&Front<75){
 8002d44:	f1a3 0242 	sub.w	r2, r3, #66	; 0x42
 8002d48:	2a08      	cmp	r2, #8
 8002d4a:	d814      	bhi.n	8002d76 <HAL_TIM_IC_CaptureCallback+0x212>
	if(FrontRight<7) MotorSet(-V1,V1);
 8002d4c:	4b49      	ldr	r3, [pc, #292]	; (8002e74 <HAL_TIM_IC_CaptureCallback+0x310>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b06      	cmp	r3, #6
 8002d52:	ddb2      	ble.n	8002cba <HAL_TIM_IC_CaptureCallback+0x156>
	else if(FrontLeft<7) MotorSet(V1,-V1);
 8002d54:	4b46      	ldr	r3, [pc, #280]	; (8002e70 <HAL_TIM_IC_CaptureCallback+0x30c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b06      	cmp	r3, #6
 8002d5a:	ddbd      	ble.n	8002cd8 <HAL_TIM_IC_CaptureCallback+0x174>
	else if(RightSlope>7){
 8002d5c:	4b47      	ldr	r3, [pc, #284]	; (8002e7c <HAL_TIM_IC_CaptureCallback+0x318>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b07      	cmp	r3, #7
 8002d62:	dcc1      	bgt.n	8002ce8 <HAL_TIM_IC_CaptureCallback+0x184>
	}else if (LeftSlope >7){
 8002d64:	4b47      	ldr	r3, [pc, #284]	; (8002e84 <HAL_TIM_IC_CaptureCallback+0x320>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2b07      	cmp	r3, #7
 8002d6a:	dcc7      	bgt.n	8002cfc <HAL_TIM_IC_CaptureCallback+0x198>
		DebugLED(0);
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	f7ff fe97 	bl	8002aa0 <DebugLED>
		MotorSet(V4,V4+1);
 8002d72:	2156      	movs	r1, #86	; 0x56
 8002d74:	e7c5      	b.n	8002d02 <HAL_TIM_IC_CaptureCallback+0x19e>
else if(Front>60&&Front<65){
 8002d76:	f1a3 023d 	sub.w	r2, r3, #61	; 0x3d
 8002d7a:	2a03      	cmp	r2, #3
 8002d7c:	d80b      	bhi.n	8002d96 <HAL_TIM_IC_CaptureCallback+0x232>
	DebugLED(0);
 8002d7e:	2000      	movs	r0, #0
 8002d80:	f7ff fe8e 	bl	8002aa0 <DebugLED>
	if(FrontRight<7) MotorSet(-V1,V1);
 8002d84:	4b3b      	ldr	r3, [pc, #236]	; (8002e74 <HAL_TIM_IC_CaptureCallback+0x310>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b06      	cmp	r3, #6
 8002d8a:	dd96      	ble.n	8002cba <HAL_TIM_IC_CaptureCallback+0x156>
	else if(FrontLeft<7) MotorSet(V1,-V1);
 8002d8c:	4b38      	ldr	r3, [pc, #224]	; (8002e70 <HAL_TIM_IC_CaptureCallback+0x30c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b06      	cmp	r3, #6
 8002d92:	dda1      	ble.n	8002cd8 <HAL_TIM_IC_CaptureCallback+0x174>
 8002d94:	e7cc      	b.n	8002d30 <HAL_TIM_IC_CaptureCallback+0x1cc>
else if(Front>50&&Front<60){
 8002d96:	f1a3 0233 	sub.w	r2, r3, #51	; 0x33
 8002d9a:	2a08      	cmp	r2, #8
 8002d9c:	d81a      	bhi.n	8002dd4 <HAL_TIM_IC_CaptureCallback+0x270>
	if(FrontRight<7) MotorSet(-V1,V1);
 8002d9e:	4b35      	ldr	r3, [pc, #212]	; (8002e74 <HAL_TIM_IC_CaptureCallback+0x310>)
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	2a06      	cmp	r2, #6
 8002da4:	dd89      	ble.n	8002cba <HAL_TIM_IC_CaptureCallback+0x156>
	else if(FrontLeft<7) MotorSet(V1,-V1);
 8002da6:	4b32      	ldr	r3, [pc, #200]	; (8002e70 <HAL_TIM_IC_CaptureCallback+0x30c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2b06      	cmp	r3, #6
 8002dac:	dd94      	ble.n	8002cd8 <HAL_TIM_IC_CaptureCallback+0x174>
	else if((FrontRight-FrontLeft)>15){
 8002dae:	1ad1      	subs	r1, r2, r3
 8002db0:	290f      	cmp	r1, #15
 8002db2:	dd04      	ble.n	8002dbe <HAL_TIM_IC_CaptureCallback+0x25a>
		DebugLED(0);
 8002db4:	2000      	movs	r0, #0
 8002db6:	f7ff fe73 	bl	8002aa0 <DebugLED>
		MotorSet(V3,V2);
 8002dba:	214b      	movs	r1, #75	; 0x4b
 8002dbc:	e798      	b.n	8002cf0 <HAL_TIM_IC_CaptureCallback+0x18c>
	}else if((FrontLeft-FrontRight)>15){
 8002dbe:	1a9b      	subs	r3, r3, r2
 8002dc0:	2b0f      	cmp	r3, #15
 8002dc2:	dd05      	ble.n	8002dd0 <HAL_TIM_IC_CaptureCallback+0x26c>
		DebugLED(0);
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	f7ff fe6b 	bl	8002aa0 <DebugLED>
		MotorSet(V2,V3);
 8002dca:	2150      	movs	r1, #80	; 0x50
 8002dcc:	204b      	movs	r0, #75	; 0x4b
 8002dce:	e777      	b.n	8002cc0 <HAL_TIM_IC_CaptureCallback+0x15c>
	}else MotorSet(V3,V3);
 8002dd0:	2150      	movs	r1, #80	; 0x50
 8002dd2:	e71f      	b.n	8002c14 <HAL_TIM_IC_CaptureCallback+0xb0>
else if(Front>40&&Front<50){
 8002dd4:	f1a3 0229 	sub.w	r2, r3, #41	; 0x29
 8002dd8:	2a08      	cmp	r2, #8
 8002dda:	d814      	bhi.n	8002e06 <HAL_TIM_IC_CaptureCallback+0x2a2>
	DebugLED(0);
 8002ddc:	2000      	movs	r0, #0
 8002dde:	f7ff fe5f 	bl	8002aa0 <DebugLED>
	if(FrontRight<7) MotorSet(-V1,V1);
 8002de2:	4b24      	ldr	r3, [pc, #144]	; (8002e74 <HAL_TIM_IC_CaptureCallback+0x310>)
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	2a06      	cmp	r2, #6
 8002de8:	f77f af67 	ble.w	8002cba <HAL_TIM_IC_CaptureCallback+0x156>
	else if(FrontLeft<7) MotorSet(V1,-V1);
 8002dec:	4b20      	ldr	r3, [pc, #128]	; (8002e70 <HAL_TIM_IC_CaptureCallback+0x30c>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b06      	cmp	r3, #6
 8002df2:	f77f af71 	ble.w	8002cd8 <HAL_TIM_IC_CaptureCallback+0x174>
	else if((FrontRight-FrontLeft)>10){
 8002df6:	1ad1      	subs	r1, r2, r3
 8002df8:	290a      	cmp	r1, #10
 8002dfa:	dcde      	bgt.n	8002dba <HAL_TIM_IC_CaptureCallback+0x256>
	}else if((FrontLeft-FrontRight)>10){
 8002dfc:	1a9b      	subs	r3, r3, r2
 8002dfe:	2b0a      	cmp	r3, #10
 8002e00:	f77f af60 	ble.w	8002cc4 <HAL_TIM_IC_CaptureCallback+0x160>
 8002e04:	e7e1      	b.n	8002dca <HAL_TIM_IC_CaptureCallback+0x266>
else if(Front>20&&Front<40){
 8002e06:	3b15      	subs	r3, #21
 8002e08:	2b12      	cmp	r3, #18
 8002e0a:	f63f af5b 	bhi.w	8002cc4 <HAL_TIM_IC_CaptureCallback+0x160>
	if(FrontRight<7) MotorSet(-V1,V1);
 8002e0e:	4b19      	ldr	r3, [pc, #100]	; (8002e74 <HAL_TIM_IC_CaptureCallback+0x310>)
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	2a06      	cmp	r2, #6
 8002e14:	f77f af51 	ble.w	8002cba <HAL_TIM_IC_CaptureCallback+0x156>
	else if(FrontLeft<7) MotorSet(V1,-V1);
 8002e18:	4b15      	ldr	r3, [pc, #84]	; (8002e70 <HAL_TIM_IC_CaptureCallback+0x30c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2b06      	cmp	r3, #6
 8002e1e:	f77f af5b 	ble.w	8002cd8 <HAL_TIM_IC_CaptureCallback+0x174>
	else if((FrontRight-FrontLeft)>10){
 8002e22:	1ad1      	subs	r1, r2, r3
 8002e24:	290a      	cmp	r1, #10
 8002e26:	dd31      	ble.n	8002e8c <HAL_TIM_IC_CaptureCallback+0x328>
		DebugLED(0);
 8002e28:	2000      	movs	r0, #0
 8002e2a:	f7ff fe39 	bl	8002aa0 <DebugLED>
		MotorSet(V2,-V2);
 8002e2e:	f06f 014a 	mvn.w	r1, #74	; 0x4a
 8002e32:	204b      	movs	r0, #75	; 0x4b
		MotorSet(-V2,V2);
 8002e34:	f7ff fe40 	bl	8002ab8 <MotorSet>
		DebugLED(0);
 8002e38:	2000      	movs	r0, #0
 8002e3a:	f7ff fe31 	bl	8002aa0 <DebugLED>
 8002e3e:	e741      	b.n	8002cc4 <HAL_TIM_IC_CaptureCallback+0x160>
 8002e40:	200000c0 	.word	0x200000c0
 8002e44:	20000304 	.word	0x20000304
 8002e48:	40000400 	.word	0x40000400
 8002e4c:	200001f8 	.word	0x200001f8
 8002e50:	40014000 	.word	0x40014000
 8002e54:	48000400 	.word	0x48000400
 8002e58:	200001b4 	.word	0x200001b4
 8002e5c:	40000800 	.word	0x40000800
 8002e60:	20000104 	.word	0x20000104
 8002e64:	40014400 	.word	0x40014400
 8002e68:	200003b4 	.word	0x200003b4
 8002e6c:	404d0000 	.word	0x404d0000
 8002e70:	200003f4 	.word	0x200003f4
 8002e74:	200001f4 	.word	0x200001f4
 8002e78:	20000240 	.word	0x20000240
 8002e7c:	200002b4 	.word	0x200002b4
 8002e80:	200000b4 	.word	0x200000b4
 8002e84:	200002b8 	.word	0x200002b8
 8002e88:	200002bc 	.word	0x200002bc
	else if (FrontLeft-FrontRight>10){
 8002e8c:	1a9b      	subs	r3, r3, r2
 8002e8e:	2b0a      	cmp	r3, #10
 8002e90:	f77f af18 	ble.w	8002cc4 <HAL_TIM_IC_CaptureCallback+0x160>
		MotorSet(-V2,V2);
 8002e94:	214b      	movs	r1, #75	; 0x4b
 8002e96:	f06f 004a 	mvn.w	r0, #74	; 0x4a
 8002e9a:	e7cb      	b.n	8002e34 <HAL_TIM_IC_CaptureCallback+0x2d0>

08002e9c <HAL_TIM_PeriodElapsedCallback>:


int tim1Count = 7000;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
	if (htim->Instance == TIM1) {
 8002e9c:	6802      	ldr	r2, [r0, #0]
 8002e9e:	4b15      	ldr	r3, [pc, #84]	; (8002ef4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002ea0:	429a      	cmp	r2, r3
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8002ea2:	b510      	push	{r4, lr}
	if (htim->Instance == TIM1) {
 8002ea4:	d125      	bne.n	8002ef2 <HAL_TIM_PeriodElapsedCallback+0x56>
		if (tim1Count < 7000) {
 8002ea6:	4c14      	ldr	r4, [pc, #80]	; (8002ef8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002ea8:	6823      	ldr	r3, [r4, #0]
 8002eaa:	f641 3257 	movw	r2, #6999	; 0x1b57
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	dc02      	bgt.n	8002eb8 <HAL_TIM_PeriodElapsedCallback+0x1c>
			tim1Count++;
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	6023      	str	r3, [r4, #0]
 8002eb6:	bd10      	pop	{r4, pc}
		} else {
			HAL_TIM_Base_Stop_IT(&htim1);
 8002eb8:	4810      	ldr	r0, [pc, #64]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002eba:	f7fe fc5a 	bl	8001772 <HAL_TIM_Base_Stop_IT>
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0) {
 8002ebe:	2102      	movs	r1, #2
 8002ec0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ec4:	f7fd ff72 	bl	8000dac <HAL_GPIO_ReadPin>
 8002ec8:	b950      	cbnz	r0, 8002ee0 <HAL_TIM_PeriodElapsedCallback+0x44>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8002eca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ece:	2201      	movs	r2, #1
 8002ed0:	2102      	movs	r1, #2
 8002ed2:	f7fd ff71 	bl	8000db8 <HAL_GPIO_WritePin>
				HAL_TIM_Base_Start_IT(&htim1);
 8002ed6:	4809      	ldr	r0, [pc, #36]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x60>)
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);

			}
		}
	}
}
 8002ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				HAL_TIM_Base_Start_IT(&htim1);
 8002edc:	f7fe bc3e 	b.w	800175c <HAL_TIM_Base_Start_IT>
				tim1Count = 0;
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	6022      	str	r2, [r4, #0]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8002ee4:	2102      	movs	r1, #2
 8002ee6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 8002eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8002eee:	f7fd bf63 	b.w	8000db8 <HAL_GPIO_WritePin>
 8002ef2:	bd10      	pop	{r4, pc}
 8002ef4:	40012c00 	.word	0x40012c00
 8002ef8:	20000008 	.word	0x20000008
 8002efc:	200002bc 	.word	0x200002bc

08002f00 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002f00:	b530      	push	{r4, r5, lr}
 8002f02:	b0a7      	sub	sp, #156	; 0x9c
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002f04:	2228      	movs	r2, #40	; 0x28
 8002f06:	2100      	movs	r1, #0
 8002f08:	a806      	add	r0, sp, #24
 8002f0a:	f000 fd6f 	bl	80039ec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002f0e:	2214      	movs	r2, #20
 8002f10:	2100      	movs	r1, #0
 8002f12:	a801      	add	r0, sp, #4
 8002f14:	f000 fd6a 	bl	80039ec <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8002f18:	2258      	movs	r2, #88	; 0x58
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	a810      	add	r0, sp, #64	; 0x40
 8002f1e:	f000 fd65 	bl	80039ec <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f22:	2301      	movs	r3, #1
 8002f24:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f26:	2310      	movs	r3, #16
 8002f28:	930a      	str	r3, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f2e:	2502      	movs	r5, #2
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f30:	930d      	str	r3, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002f32:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002f34:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002f38:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f3a:	9506      	str	r5, [sp, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f3c:	950c      	str	r5, [sp, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002f3e:	f7fd ff41 	bl	8000dc4 <HAL_RCC_OscConfig>
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002f42:	230f      	movs	r3, #15
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f44:	2400      	movs	r4, #0
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002f46:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002f48:	4629      	mov	r1, r5
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002f4e:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f50:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f52:	9502      	str	r5, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f54:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f56:	9405      	str	r4, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002f58:	f7fe f9e2 	bl	8001320 <HAL_RCC_ClockConfig>
		Error_Handler();
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 8002f5c:	4b07      	ldr	r3, [pc, #28]	; (8002f7c <SystemClock_Config+0x7c>)
 8002f5e:	9310      	str	r3, [sp, #64]	; 0x40
	PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
	PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
	PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
	PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
	PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002f60:	a810      	add	r0, sp, #64	; 0x40
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f62:	9412      	str	r4, [sp, #72]	; 0x48
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002f64:	9413      	str	r4, [sp, #76]	; 0x4c
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002f66:	9414      	str	r4, [sp, #80]	; 0x50
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8002f68:	941d      	str	r4, [sp, #116]	; 0x74
	PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8002f6a:	9421      	str	r4, [sp, #132]	; 0x84
	PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8002f6c:	9422      	str	r4, [sp, #136]	; 0x88
	PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 8002f6e:	9420      	str	r4, [sp, #128]	; 0x80
	PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8002f70:	941e      	str	r4, [sp, #120]	; 0x78
	PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8002f72:	941f      	str	r4, [sp, #124]	; 0x7c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002f74:	f7fe faae 	bl	80014d4 <HAL_RCCEx_PeriphCLKConfig>
		Error_Handler();
	}
}
 8002f78:	b027      	add	sp, #156	; 0x9c
 8002f7a:	bd30      	pop	{r4, r5, pc}
 8002f7c:	00f03007 	.word	0x00f03007

08002f80 <main>:
 int main(void) {
 8002f80:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002f84:	b09d      	sub	sp, #116	; 0x74
	HAL_Init();
 8002f86:	f7fd fd91 	bl	8000aac <HAL_Init>
	SystemClock_Config();
 8002f8a:	f7ff ffb9 	bl	8002f00 <SystemClock_Config>
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002f8e:	2214      	movs	r2, #20
 8002f90:	2100      	movs	r1, #0
 8002f92:	a811      	add	r0, sp, #68	; 0x44
 8002f94:	f000 fd2a 	bl	80039ec <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8002f98:	4bb3      	ldr	r3, [pc, #716]	; (8003268 <main+0x2e8>)
	htim1.Instance = TIM1;
 8002f9a:	4eb4      	ldr	r6, [pc, #720]	; (800326c <main+0x2ec>)
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8002f9c:	695a      	ldr	r2, [r3, #20]
	htim8.Instance = TIM8;
 8002f9e:	4db4      	ldr	r5, [pc, #720]	; (8003270 <main+0x2f0>)
	htim3.Instance = TIM3;
 8002fa0:	f8df a2f8 	ldr.w	sl, [pc, #760]	; 800329c <main+0x31c>
	htim4.Instance = TIM4;
 8002fa4:	f8df 92f8 	ldr.w	r9, [pc, #760]	; 80032a0 <main+0x320>
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8002fa8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002fac:	615a      	str	r2, [r3, #20]
 8002fae:	695a      	ldr	r2, [r3, #20]
 8002fb0:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8002fb4:	9203      	str	r2, [sp, #12]
 8002fb6:	9a03      	ldr	r2, [sp, #12]
	;
	__HAL_RCC_GPIOF_CLK_ENABLE()
 8002fb8:	695a      	ldr	r2, [r3, #20]
 8002fba:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002fbe:	615a      	str	r2, [r3, #20]
 8002fc0:	695a      	ldr	r2, [r3, #20]
 8002fc2:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002fc6:	9204      	str	r2, [sp, #16]
 8002fc8:	9a04      	ldr	r2, [sp, #16]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8002fca:	695a      	ldr	r2, [r3, #20]
 8002fcc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002fd0:	615a      	str	r2, [r3, #20]
 8002fd2:	695a      	ldr	r2, [r3, #20]
 8002fd4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002fd8:	9205      	str	r2, [sp, #20]
 8002fda:	9a05      	ldr	r2, [sp, #20]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8002fdc:	695a      	ldr	r2, [r3, #20]
 8002fde:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002fe2:	615a      	str	r2, [r3, #20]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fea:	9306      	str	r3, [sp, #24]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 | LD2_Pin, GPIO_PIN_RESET);
 8002fec:	2200      	movs	r2, #0
 8002fee:	2122      	movs	r1, #34	; 0x22
 8002ff0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8002ff4:	9b06      	ldr	r3, [sp, #24]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 | LD2_Pin, GPIO_PIN_RESET);
 8002ff6:	f7fd fedf 	bl	8000db8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(sleep_GPIO_Port, sleep_Pin, GPIO_PIN_SET);
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	2120      	movs	r1, #32
 8002ffe:	489d      	ldr	r0, [pc, #628]	; (8003274 <main+0x2f4>)
 8003000:	f7fd feda 	bl	8000db8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8003004:	2200      	movs	r2, #0
 8003006:	f44f 7180 	mov.w	r1, #256	; 0x100
 800300a:	489a      	ldr	r0, [pc, #616]	; (8003274 <main+0x2f4>)
 800300c:	f7fd fed4 	bl	8000db8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8003010:	2200      	movs	r2, #0
 8003012:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003016:	4898      	ldr	r0, [pc, #608]	; (8003278 <main+0x2f8>)

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003018:	2400      	movs	r4, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800301a:	f7fd fecd 	bl	8000db8 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = B1_Pin;
 800301e:	f44f 5800 	mov.w	r8, #8192	; 0x2000
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003022:	4b96      	ldr	r3, [pc, #600]	; (800327c <main+0x2fc>)
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003024:	4893      	ldr	r0, [pc, #588]	; (8003274 <main+0x2f4>)
	GPIO_InitStruct.Pin = B1_Pin;
 8003026:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800302a:	a911      	add	r1, sp, #68	; 0x44

	/*Configure GPIO pins : PA1 LD2_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | LD2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800302c:	f04f 0b01 	mov.w	fp, #1
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003030:	9312      	str	r3, [sp, #72]	; 0x48
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003032:	9413      	str	r4, [sp, #76]	; 0x4c
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003034:	f7fd fdea 	bl	8000c0c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_1 | LD2_Pin;
 8003038:	2322      	movs	r3, #34	; 0x22
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800303a:	a911      	add	r1, sp, #68	; 0x44
 800303c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Pin = GPIO_PIN_1 | LD2_Pin;
 8003040:	9311      	str	r3, [sp, #68]	; 0x44
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003042:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003046:	9413      	str	r4, [sp, #76]	; 0x4c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003048:	9414      	str	r4, [sp, #80]	; 0x50
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800304a:	f7fd fddf 	bl	8000c0c <HAL_GPIO_Init>

	/*Configure GPIO pins : sleep_Pin PC8 */
	GPIO_InitStruct.Pin = sleep_Pin | GPIO_PIN_8;
 800304e:	f44f 7390 	mov.w	r3, #288	; 0x120
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003052:	a911      	add	r1, sp, #68	; 0x44
 8003054:	4887      	ldr	r0, [pc, #540]	; (8003274 <main+0x2f4>)
	GPIO_InitStruct.Pin = sleep_Pin | GPIO_PIN_8;
 8003056:	9311      	str	r3, [sp, #68]	; 0x44
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003058:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305c:	9413      	str	r4, [sp, #76]	; 0x4c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800305e:	9414      	str	r4, [sp, #80]	; 0x50
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003060:	f7fd fdd4 	bl	8000c0c <HAL_GPIO_Init>

	/*Configure GPIO pin : PC6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003064:	2340      	movs	r3, #64	; 0x40
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003066:	a911      	add	r1, sp, #68	; 0x44
 8003068:	4882      	ldr	r0, [pc, #520]	; (8003274 <main+0x2f4>)
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 800306a:	9311      	str	r3, [sp, #68]	; 0x44
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800306c:	9412      	str	r4, [sp, #72]	; 0x48
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306e:	9413      	str	r4, [sp, #76]	; 0x4c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003070:	f7fd fdcc 	bl	8000c0c <HAL_GPIO_Init>

	/*Configure GPIO pin : PB8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003074:	f44f 7380 	mov.w	r3, #256	; 0x100
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003078:	a911      	add	r1, sp, #68	; 0x44
 800307a:	487f      	ldr	r0, [pc, #508]	; (8003278 <main+0x2f8>)
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 800307c:	9311      	str	r3, [sp, #68]	; 0x44
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800307e:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003082:	9413      	str	r4, [sp, #76]	; 0x4c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003084:	9414      	str	r4, [sp, #80]	; 0x50
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003086:	f7fd fdc1 	bl	8000c0c <HAL_GPIO_Init>
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800308a:	4621      	mov	r1, r4
 800308c:	2210      	movs	r2, #16
 800308e:	a811      	add	r0, sp, #68	; 0x44
 8003090:	f000 fcac 	bl	80039ec <memset>
	htim1.Init.Prescaler = 71;
 8003094:	4a7a      	ldr	r2, [pc, #488]	; (8003280 <main+0x300>)
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003096:	940a      	str	r4, [sp, #40]	; 0x28
	htim1.Init.Prescaler = 71;
 8003098:	2347      	movs	r3, #71	; 0x47
 800309a:	e886 000c 	stmia.w	r6, {r2, r3}
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800309e:	4630      	mov	r0, r6
	htim1.Init.Period = 10;
 80030a0:	230a      	movs	r3, #10
 80030a2:	60f3      	str	r3, [r6, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80030a4:	940b      	str	r4, [sp, #44]	; 0x2c
 80030a6:	940c      	str	r4, [sp, #48]	; 0x30
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030a8:	60b4      	str	r4, [r6, #8]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030aa:	6134      	str	r4, [r6, #16]
	htim1.Init.RepetitionCounter = 0;
 80030ac:	6174      	str	r4, [r6, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030ae:	61b4      	str	r4, [r6, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80030b0:	f7fe fc92 	bl	80019d8 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80030b8:	a911      	add	r1, sp, #68	; 0x44
 80030ba:	4630      	mov	r0, r6
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030bc:	9311      	str	r3, [sp, #68]	; 0x44
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80030be:	f7fe fec7 	bl	8001e50 <HAL_TIM_ConfigClockSource>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80030c2:	a90a      	add	r1, sp, #40	; 0x28
 80030c4:	4630      	mov	r0, r6
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030c6:	940a      	str	r4, [sp, #40]	; 0x28
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80030c8:	940b      	str	r4, [sp, #44]	; 0x2c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030ca:	940c      	str	r4, [sp, #48]	; 0x30
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80030cc:	f7ff f8d0 	bl	8002270 <HAL_TIMEx_MasterConfigSynchronization>
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80030d0:	2210      	movs	r2, #16
 80030d2:	4621      	mov	r1, r4
 80030d4:	a811      	add	r0, sp, #68	; 0x44
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80030d6:	940a      	str	r4, [sp, #40]	; 0x28
 80030d8:	940b      	str	r4, [sp, #44]	; 0x2c
 80030da:	940c      	str	r4, [sp, #48]	; 0x30
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80030dc:	f000 fc86 	bl	80039ec <memset>
	htim2.Instance = TIM2;
 80030e0:	4b68      	ldr	r3, [pc, #416]	; (8003284 <main+0x304>)
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 80030e2:	9301      	str	r3, [sp, #4]
	htim2.Init.Prescaler = 71;
 80030e4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80030e8:	2247      	movs	r2, #71	; 0x47
 80030ea:	e883 0006 	stmia.w	r3, {r1, r2}
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 80030ee:	4618      	mov	r0, r3
	htim2.Init.Period = 0xffffffff;
 80030f0:	f04f 32ff 	mov.w	r2, #4294967295
 80030f4:	60da      	str	r2, [r3, #12]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030f6:	609c      	str	r4, [r3, #8]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030f8:	611c      	str	r4, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030fa:	619c      	str	r4, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 80030fc:	f7fe fca0 	bl	8001a40 <HAL_TIM_IC_Init>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8003100:	9b01      	ldr	r3, [sp, #4]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003102:	940a      	str	r4, [sp, #40]	; 0x28
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8003104:	a90a      	add	r1, sp, #40	; 0x28
 8003106:	4618      	mov	r0, r3
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003108:	940c      	str	r4, [sp, #48]	; 0x30
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800310a:	f7ff f8b1 	bl	8002270 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800310e:	230a      	movs	r3, #10
 8003110:	9311      	str	r3, [sp, #68]	; 0x44
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8003112:	9b01      	ldr	r3, [sp, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003114:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8003118:	a911      	add	r1, sp, #68	; 0x44
 800311a:	4622      	mov	r2, r4
 800311c:	4618      	mov	r0, r3
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800311e:	9413      	str	r4, [sp, #76]	; 0x4c
	sConfigIC.ICFilter = 0;
 8003120:	9414      	str	r4, [sp, #80]	; 0x50
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8003122:	f7fe fe03 	bl	8001d2c <HAL_TIM_IC_ConfigChannel>
	huart2.Instance = USART2;
 8003126:	4858      	ldr	r0, [pc, #352]	; (8003288 <main+0x308>)
	huart2.Init.BaudRate = 115200;
 8003128:	4a58      	ldr	r2, [pc, #352]	; (800328c <main+0x30c>)
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800312a:	6084      	str	r4, [r0, #8]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800312c:	230c      	movs	r3, #12
	huart2.Init.BaudRate = 115200;
 800312e:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003132:	6143      	str	r3, [r0, #20]
	huart2.Init.BaudRate = 115200;
 8003134:	e880 0084 	stmia.w	r0, {r2, r7}
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003138:	60c4      	str	r4, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800313a:	6104      	str	r4, [r0, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800313c:	6184      	str	r4, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800313e:	61c4      	str	r4, [r0, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003140:	6204      	str	r4, [r0, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003142:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8003144:	f7ff fb3a 	bl	80027bc <HAL_UART_Init>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003148:	221c      	movs	r2, #28
 800314a:	4621      	mov	r1, r4
 800314c:	a80a      	add	r0, sp, #40	; 0x28
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800314e:	9407      	str	r4, [sp, #28]
 8003150:	9408      	str	r4, [sp, #32]
 8003152:	9409      	str	r4, [sp, #36]	; 0x24
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003154:	f000 fc4a 	bl	80039ec <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8003158:	222c      	movs	r2, #44	; 0x2c
 800315a:	4621      	mov	r1, r4
 800315c:	a811      	add	r0, sp, #68	; 0x44
 800315e:	f000 fc45 	bl	80039ec <memset>
	htim8.Init.Prescaler = 71;
 8003162:	484b      	ldr	r0, [pc, #300]	; (8003290 <main+0x310>)
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003164:	60ac      	str	r4, [r5, #8]
	htim8.Init.Prescaler = 71;
 8003166:	2347      	movs	r3, #71	; 0x47
 8003168:	e885 0009 	stmia.w	r5, {r0, r3}
	htim8.Init.Period = 100;
 800316c:	2364      	movs	r3, #100	; 0x64
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 800316e:	4628      	mov	r0, r5
	htim8.Init.Period = 100;
 8003170:	60eb      	str	r3, [r5, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003172:	612c      	str	r4, [r5, #16]
	htim8.Init.RepetitionCounter = 0;
 8003174:	616c      	str	r4, [r5, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003176:	61ac      	str	r4, [r5, #24]
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8003178:	f7fe fc48 	bl	8001a0c <HAL_TIM_PWM_Init>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 800317c:	a907      	add	r1, sp, #28
 800317e:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003180:	9407      	str	r4, [sp, #28]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003182:	9408      	str	r4, [sp, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003184:	9409      	str	r4, [sp, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 8003186:	f7ff f873 	bl	8002270 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800318a:	2260      	movs	r2, #96	; 0x60
 800318c:	920a      	str	r2, [sp, #40]	; 0x28
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3)
 800318e:	a90a      	add	r1, sp, #40	; 0x28
 8003190:	2208      	movs	r2, #8
 8003192:	4628      	mov	r0, r5
	sConfigOC.Pulse = 0;
 8003194:	940b      	str	r4, [sp, #44]	; 0x2c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003196:	940c      	str	r4, [sp, #48]	; 0x30
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003198:	940d      	str	r4, [sp, #52]	; 0x34
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800319a:	940e      	str	r4, [sp, #56]	; 0x38
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800319c:	940f      	str	r4, [sp, #60]	; 0x3c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800319e:	9410      	str	r4, [sp, #64]	; 0x40
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3)
 80031a0:	f7fe ffde 	bl	8002160 <HAL_TIM_PWM_ConfigChannel>
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4)
 80031a4:	220c      	movs	r2, #12
 80031a6:	a90a      	add	r1, sp, #40	; 0x28
 80031a8:	4628      	mov	r0, r5
 80031aa:	f7fe ffd9 	bl	8002160 <HAL_TIM_PWM_ConfigChannel>
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80031ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 80031b2:	a911      	add	r1, sp, #68	; 0x44
 80031b4:	4628      	mov	r0, r5
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80031b6:	9219      	str	r2, [sp, #100]	; 0x64
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80031b8:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80031bc:	9411      	str	r4, [sp, #68]	; 0x44
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80031be:	9412      	str	r4, [sp, #72]	; 0x48
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80031c0:	9413      	str	r4, [sp, #76]	; 0x4c
	sBreakDeadTimeConfig.DeadTime = 0;
 80031c2:	9414      	str	r4, [sp, #80]	; 0x50
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80031c4:	9415      	str	r4, [sp, #84]	; 0x54
	sBreakDeadTimeConfig.BreakFilter = 0;
 80031c6:	9417      	str	r4, [sp, #92]	; 0x5c
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80031c8:	9418      	str	r4, [sp, #96]	; 0x60
	sBreakDeadTimeConfig.Break2Filter = 0;
 80031ca:	941a      	str	r4, [sp, #104]	; 0x68
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80031cc:	941b      	str	r4, [sp, #108]	; 0x6c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 80031ce:	f7ff f879 	bl	80022c4 <HAL_TIMEx_ConfigBreakDeadTime>
	HAL_TIM_MspPostInit(&htim8);
 80031d2:	4628      	mov	r0, r5
 80031d4:	f000 fa54 	bl	8003680 <HAL_TIM_MspPostInit>
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80031d8:	4621      	mov	r1, r4
 80031da:	2210      	movs	r2, #16
 80031dc:	a811      	add	r0, sp, #68	; 0x44
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80031de:	940a      	str	r4, [sp, #40]	; 0x28
 80031e0:	940b      	str	r4, [sp, #44]	; 0x2c
 80031e2:	940c      	str	r4, [sp, #48]	; 0x30
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80031e4:	f000 fc02 	bl	80039ec <memset>
	htim3.Init.Prescaler = 71;
 80031e8:	4a2a      	ldr	r2, [pc, #168]	; (8003294 <main+0x314>)
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031ea:	f8ca 4008 	str.w	r4, [sl, #8]
	htim3.Init.Prescaler = 71;
 80031ee:	2347      	movs	r3, #71	; 0x47
 80031f0:	e88a 000c 	stmia.w	sl, {r2, r3}
	if (HAL_TIM_IC_Init(&htim3) != HAL_OK) {
 80031f4:	4650      	mov	r0, sl
	htim3.Init.Period = 0xffff;
 80031f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031fa:	f8ca 300c 	str.w	r3, [sl, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031fe:	f8ca 4010 	str.w	r4, [sl, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003202:	f8ca 4018 	str.w	r4, [sl, #24]
	if (HAL_TIM_IC_Init(&htim3) != HAL_OK) {
 8003206:	f7fe fc1b 	bl	8001a40 <HAL_TIM_IC_Init>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800320a:	a90a      	add	r1, sp, #40	; 0x28
 800320c:	4650      	mov	r0, sl
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800320e:	940a      	str	r4, [sp, #40]	; 0x28
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003210:	940c      	str	r4, [sp, #48]	; 0x30
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8003212:	f7ff f82d 	bl	8002270 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003216:	230a      	movs	r3, #10
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8003218:	4622      	mov	r2, r4
 800321a:	a911      	add	r1, sp, #68	; 0x44
 800321c:	4650      	mov	r0, sl
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800321e:	9311      	str	r3, [sp, #68]	; 0x44
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003220:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003224:	9413      	str	r4, [sp, #76]	; 0x4c
	sConfigIC.ICFilter = 0;
 8003226:	9414      	str	r4, [sp, #80]	; 0x50
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8003228:	f7fe fd80 	bl	8001d2c <HAL_TIM_IC_ConfigChannel>
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 800322c:	4621      	mov	r1, r4
 800322e:	2210      	movs	r2, #16
 8003230:	a811      	add	r0, sp, #68	; 0x44
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003232:	940a      	str	r4, [sp, #40]	; 0x28
 8003234:	940b      	str	r4, [sp, #44]	; 0x2c
 8003236:	940c      	str	r4, [sp, #48]	; 0x30
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8003238:	f000 fbd8 	bl	80039ec <memset>
	htim4.Init.Prescaler = 71;
 800323c:	4a16      	ldr	r2, [pc, #88]	; (8003298 <main+0x318>)
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800323e:	f8c9 4008 	str.w	r4, [r9, #8]
	htim4.Init.Prescaler = 71;
 8003242:	2347      	movs	r3, #71	; 0x47
 8003244:	e889 000c 	stmia.w	r9, {r2, r3}
	if (HAL_TIM_IC_Init(&htim4) != HAL_OK) {
 8003248:	4648      	mov	r0, r9
	htim4.Init.Period = 0xffff;
 800324a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800324e:	f8c9 300c 	str.w	r3, [r9, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003252:	f8c9 4010 	str.w	r4, [r9, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003256:	f8c9 4018 	str.w	r4, [r9, #24]
	if (HAL_TIM_IC_Init(&htim4) != HAL_OK) {
 800325a:	f7fe fbf1 	bl	8001a40 <HAL_TIM_IC_Init>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800325e:	a90a      	add	r1, sp, #40	; 0x28
 8003260:	4648      	mov	r0, r9
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003262:	940a      	str	r4, [sp, #40]	; 0x28
 8003264:	e01e      	b.n	80032a4 <main+0x324>
 8003266:	bf00      	nop
 8003268:	40021000 	.word	0x40021000
 800326c:	200002bc 	.word	0x200002bc
 8003270:	200000c4 	.word	0x200000c4
 8003274:	48000800 	.word	0x48000800
 8003278:	48000400 	.word	0x48000400
 800327c:	10210000 	.word	0x10210000
 8003280:	40012c00 	.word	0x40012c00
 8003284:	20000304 	.word	0x20000304
 8003288:	20000344 	.word	0x20000344
 800328c:	40004400 	.word	0x40004400
 8003290:	40013400 	.word	0x40013400
 8003294:	40000400 	.word	0x40000400
 8003298:	40000800 	.word	0x40000800
 800329c:	200001f8 	.word	0x200001f8
 80032a0:	20000104 	.word	0x20000104
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032a4:	940c      	str	r4, [sp, #48]	; 0x30
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80032a6:	f7fe ffe3 	bl	8002270 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80032aa:	230a      	movs	r3, #10
	if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 80032ac:	4622      	mov	r2, r4
 80032ae:	a911      	add	r1, sp, #68	; 0x44
 80032b0:	4648      	mov	r0, r9
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80032b2:	9311      	str	r3, [sp, #68]	; 0x44
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80032b4:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80032b8:	9413      	str	r4, [sp, #76]	; 0x4c
	sConfigIC.ICFilter = 0;
 80032ba:	9414      	str	r4, [sp, #80]	; 0x50
	if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 80032bc:	f7fe fd36 	bl	8001d2c <HAL_TIM_IC_ConfigChannel>
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80032c0:	4621      	mov	r1, r4
 80032c2:	2210      	movs	r2, #16
 80032c4:	a811      	add	r0, sp, #68	; 0x44
	htim15.Instance = TIM15;
 80032c6:	f8df 8144 	ldr.w	r8, [pc, #324]	; 800340c <main+0x48c>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80032ca:	940a      	str	r4, [sp, #40]	; 0x28
 80032cc:	940b      	str	r4, [sp, #44]	; 0x2c
 80032ce:	940c      	str	r4, [sp, #48]	; 0x30
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80032d0:	f000 fb8c 	bl	80039ec <memset>
	htim15.Init.Prescaler = 71;
 80032d4:	4a45      	ldr	r2, [pc, #276]	; (80033ec <main+0x46c>)
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032d6:	f8c8 4008 	str.w	r4, [r8, #8]
	htim15.Init.Prescaler = 71;
 80032da:	2347      	movs	r3, #71	; 0x47
 80032dc:	e888 000c 	stmia.w	r8, {r2, r3}
	if (HAL_TIM_IC_Init(&htim15) != HAL_OK) {
 80032e0:	4640      	mov	r0, r8
	htim15.Init.Period = 0xffff;
 80032e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032e6:	f8c8 300c 	str.w	r3, [r8, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032ea:	f8c8 4010 	str.w	r4, [r8, #16]
	htim15.Init.RepetitionCounter = 0;
 80032ee:	f8c8 4014 	str.w	r4, [r8, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032f2:	f8c8 4018 	str.w	r4, [r8, #24]
	if (HAL_TIM_IC_Init(&htim15) != HAL_OK) {
 80032f6:	f7fe fba3 	bl	8001a40 <HAL_TIM_IC_Init>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig)
 80032fa:	a90a      	add	r1, sp, #40	; 0x28
 80032fc:	4640      	mov	r0, r8
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032fe:	940a      	str	r4, [sp, #40]	; 0x28
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003300:	940c      	str	r4, [sp, #48]	; 0x30
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig)
 8003302:	f7fe ffb5 	bl	8002270 <HAL_TIMEx_MasterConfigSynchronization>
	if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1)
 8003306:	a911      	add	r1, sp, #68	; 0x44
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003308:	230a      	movs	r3, #10
	if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1)
 800330a:	4622      	mov	r2, r4
 800330c:	4640      	mov	r0, r8
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800330e:	9311      	str	r3, [sp, #68]	; 0x44
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003310:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003314:	9413      	str	r4, [sp, #76]	; 0x4c
	sConfigIC.ICFilter = 0;
 8003316:	9414      	str	r4, [sp, #80]	; 0x50
	if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1)
 8003318:	f7fe fd08 	bl	8001d2c <HAL_TIM_IC_ConfigChannel>
	huart1.Instance = USART1;
 800331c:	4834      	ldr	r0, [pc, #208]	; (80033f0 <main+0x470>)
 800331e:	4a35      	ldr	r2, [pc, #212]	; (80033f4 <main+0x474>)
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003320:	6084      	str	r4, [r0, #8]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8003322:	230c      	movs	r3, #12
	huart1.Init.BaudRate = 115200;
 8003324:	e880 0084 	stmia.w	r0, {r2, r7}
	huart1.Init.Mode = UART_MODE_TX_RX;
 8003328:	6143      	str	r3, [r0, #20]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800332a:	60c4      	str	r4, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800332c:	6104      	str	r4, [r0, #16]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800332e:	6184      	str	r4, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003330:	61c4      	str	r4, [r0, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003332:	6204      	str	r4, [r0, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003334:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8003336:	f7ff fa41 	bl	80027bc <HAL_UART_Init>
	huart3.Instance = USART3;
 800333a:	482f      	ldr	r0, [pc, #188]	; (80033f8 <main+0x478>)
 800333c:	4a2f      	ldr	r2, [pc, #188]	; (80033fc <main+0x47c>)
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800333e:	6084      	str	r4, [r0, #8]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8003340:	230c      	movs	r3, #12
	huart3.Init.BaudRate = 115200;
 8003342:	e880 0084 	stmia.w	r0, {r2, r7}
	huart3.Init.Mode = UART_MODE_TX_RX;
 8003346:	6143      	str	r3, [r0, #20]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8003348:	60c4      	str	r4, [r0, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800334a:	6104      	str	r4, [r0, #16]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800334c:	6184      	str	r4, [r0, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800334e:	61c4      	str	r4, [r0, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003350:	6204      	str	r4, [r0, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003352:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8003354:	f7ff fa32 	bl	80027bc <HAL_UART_Init>
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8003358:	4621      	mov	r1, r4
 800335a:	2210      	movs	r2, #16
 800335c:	a811      	add	r0, sp, #68	; 0x44
 800335e:	f000 fb45 	bl	80039ec <memset>
	htim16.Instance = TIM16;
 8003362:	4f27      	ldr	r7, [pc, #156]	; (8003400 <main+0x480>)
	htim16.Init.Prescaler = 71;
 8003364:	4a27      	ldr	r2, [pc, #156]	; (8003404 <main+0x484>)
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003366:	60bc      	str	r4, [r7, #8]
	htim16.Init.Prescaler = 71;
 8003368:	2347      	movs	r3, #71	; 0x47
 800336a:	e887 000c 	stmia.w	r7, {r2, r3}
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 800336e:	4638      	mov	r0, r7
	htim16.Init.Period = 0xffff;
 8003370:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003374:	60fb      	str	r3, [r7, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003376:	613c      	str	r4, [r7, #16]
	htim16.Init.RepetitionCounter = 0;
 8003378:	617c      	str	r4, [r7, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800337a:	61bc      	str	r4, [r7, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 800337c:	f7fe fb2c 	bl	80019d8 <HAL_TIM_Base_Init>
	if (HAL_TIM_IC_Init(&htim16) != HAL_OK) {
 8003380:	4638      	mov	r0, r7
 8003382:	f7fe fb5d 	bl	8001a40 <HAL_TIM_IC_Init>
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003386:	230a      	movs	r3, #10
	if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1)
 8003388:	4622      	mov	r2, r4
 800338a:	a911      	add	r1, sp, #68	; 0x44
 800338c:	4638      	mov	r0, r7
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800338e:	9311      	str	r3, [sp, #68]	; 0x44
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003390:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003394:	9413      	str	r4, [sp, #76]	; 0x4c
	sConfigIC.ICFilter = 0;
 8003396:	9414      	str	r4, [sp, #80]	; 0x50
	if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1)
 8003398:	f7fe fcc8 	bl	8001d2c <HAL_TIM_IC_ConfigChannel>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 800339c:	210c      	movs	r1, #12
 800339e:	4628      	mov	r0, r5
 80033a0:	f7fe fe18 	bl	8001fd4 <HAL_TIM_PWM_Start>
	TIM8->CCR4 = 100; //right
 80033a4:	4b18      	ldr	r3, [pc, #96]	; (8003408 <main+0x488>)
 80033a6:	2264      	movs	r2, #100	; 0x64
 80033a8:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80033aa:	2108      	movs	r1, #8
 80033ac:	4628      	mov	r0, r5
 80033ae:	f7fe fe11 	bl	8001fd4 <HAL_TIM_PWM_Start>
	TIM8->CCR3 = 100; //left
 80033b2:	4b15      	ldr	r3, [pc, #84]	; (8003408 <main+0x488>)
 80033b4:	2264      	movs	r2, #100	; 0x64
 80033b6:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80033b8:	9b01      	ldr	r3, [sp, #4]
 80033ba:	4621      	mov	r1, r4
 80033bc:	4618      	mov	r0, r3
 80033be:	f7fe fe33 	bl	8002028 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80033c2:	4621      	mov	r1, r4
 80033c4:	4650      	mov	r0, sl
 80033c6:	f7fe fe2f 	bl	8002028 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80033ca:	4621      	mov	r1, r4
 80033cc:	4648      	mov	r0, r9
 80033ce:	f7fe fe2b 	bl	8002028 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 80033d2:	4621      	mov	r1, r4
 80033d4:	4640      	mov	r0, r8
 80033d6:	f7fe fe27 	bl	8002028 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim16, TIM_CHANNEL_1);
 80033da:	4621      	mov	r1, r4
 80033dc:	4638      	mov	r0, r7
 80033de:	f7fe fe23 	bl	8002028 <HAL_TIM_IC_Start_IT>
	HAL_TIM_Base_Start_IT(&htim1);
 80033e2:	4630      	mov	r0, r6
 80033e4:	f7fe f9ba 	bl	800175c <HAL_TIM_Base_Start_IT>
 80033e8:	e7fe      	b.n	80033e8 <main+0x468>
 80033ea:	bf00      	nop
 80033ec:	40014000 	.word	0x40014000
 80033f0:	20000244 	.word	0x20000244
 80033f4:	40013800 	.word	0x40013800
 80033f8:	20000144 	.word	0x20000144
 80033fc:	40004800 	.word	0x40004800
 8003400:	200003b4 	.word	0x200003b4
 8003404:	40014400 	.word	0x40014400
 8003408:	40013400 	.word	0x40013400
 800340c:	200001b4 	.word	0x200001b4

08003410 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003410:	4b0c      	ldr	r3, [pc, #48]	; (8003444 <HAL_MspInit+0x34>)
{
 8003412:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003414:	699a      	ldr	r2, [r3, #24]
 8003416:	f042 0201 	orr.w	r2, r2, #1
 800341a:	619a      	str	r2, [r3, #24]
 800341c:	699a      	ldr	r2, [r3, #24]
 800341e:	f002 0201 	and.w	r2, r2, #1
 8003422:	9200      	str	r2, [sp, #0]
 8003424:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003426:	69da      	ldr	r2, [r3, #28]
 8003428:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800342c:	61da      	str	r2, [r3, #28]
 800342e:	69db      	ldr	r3, [r3, #28]
 8003430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003434:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003436:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8003438:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800343a:	f7fd fb5b 	bl	8000af4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800343e:	b003      	add	sp, #12
 8003440:	f85d fb04 	ldr.w	pc, [sp], #4
 8003444:	40021000 	.word	0x40021000

08003448 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003448:	b510      	push	{r4, lr}
 800344a:	4604      	mov	r4, r0
 800344c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800344e:	2214      	movs	r2, #20
 8003450:	2100      	movs	r1, #0
 8003452:	a803      	add	r0, sp, #12
 8003454:	f000 faca 	bl	80039ec <memset>
  if(htim_base->Instance==TIM1)
 8003458:	6823      	ldr	r3, [r4, #0]
 800345a:	4a21      	ldr	r2, [pc, #132]	; (80034e0 <HAL_TIM_Base_MspInit+0x98>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d11b      	bne.n	8003498 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003460:	4b20      	ldr	r3, [pc, #128]	; (80034e4 <HAL_TIM_Base_MspInit+0x9c>)
 8003462:	699a      	ldr	r2, [r3, #24]
 8003464:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003468:	619a      	str	r2, [r3, #24]
 800346a:	699b      	ldr	r3, [r3, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800346c:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 800346e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003472:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8003474:	2018      	movs	r0, #24
 8003476:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003478:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800347a:	f7fd fb4d 	bl	8000b18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800347e:	2018      	movs	r0, #24
 8003480:	f7fd fb7e 	bl	8000b80 <HAL_NVIC_EnableIRQ>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003484:	2200      	movs	r2, #0
 8003486:	2019      	movs	r0, #25
 8003488:	4611      	mov	r1, r2
 800348a:	f7fd fb45 	bl	8000b18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800348e:	2019      	movs	r0, #25
 8003490:	f7fd fb76 	bl	8000b80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003494:	b008      	add	sp, #32
 8003496:	bd10      	pop	{r4, pc}
  else if(htim_base->Instance==TIM16)
 8003498:	4a13      	ldr	r2, [pc, #76]	; (80034e8 <HAL_TIM_Base_MspInit+0xa0>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d1fa      	bne.n	8003494 <HAL_TIM_Base_MspInit+0x4c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800349e:	4b11      	ldr	r3, [pc, #68]	; (80034e4 <HAL_TIM_Base_MspInit+0x9c>)
 80034a0:	699a      	ldr	r2, [r3, #24]
 80034a2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80034a6:	619a      	str	r2, [r3, #24]
 80034a8:	699a      	ldr	r2, [r3, #24]
 80034aa:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80034ae:	9201      	str	r2, [sp, #4]
 80034b0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034b2:	695a      	ldr	r2, [r3, #20]
 80034b4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80034b8:	615a      	str	r2, [r3, #20]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c0:	9302      	str	r3, [sp, #8]
 80034c2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80034c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034c8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ca:	2302      	movs	r3, #2
 80034cc:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ce:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80034d0:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80034d6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d8:	f7fd fb98 	bl	8000c0c <HAL_GPIO_Init>
 80034dc:	e7d2      	b.n	8003484 <HAL_TIM_Base_MspInit+0x3c>
 80034de:	bf00      	nop
 80034e0:	40012c00 	.word	0x40012c00
 80034e4:	40021000 	.word	0x40021000
 80034e8:	40014400 	.word	0x40014400

080034ec <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80034ec:	b510      	push	{r4, lr}
 80034ee:	4604      	mov	r4, r0
 80034f0:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034f2:	2214      	movs	r2, #20
 80034f4:	2100      	movs	r1, #0
 80034f6:	a809      	add	r0, sp, #36	; 0x24
 80034f8:	f000 fa78 	bl	80039ec <memset>
  if(htim_ic->Instance==TIM2)
 80034fc:	6823      	ldr	r3, [r4, #0]
 80034fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003502:	d127      	bne.n	8003554 <HAL_TIM_IC_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003504:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003508:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_TIM2_CLK_ENABLE();
 800350a:	69da      	ldr	r2, [r3, #28]
 800350c:	f042 0201 	orr.w	r2, r2, #1
 8003510:	61da      	str	r2, [r3, #28]
 8003512:	69da      	ldr	r2, [r3, #28]
 8003514:	f002 0201 	and.w	r2, r2, #1
 8003518:	9201      	str	r2, [sp, #4]
 800351a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800351c:	695a      	ldr	r2, [r3, #20]
 800351e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003522:	615a      	str	r2, [r3, #20]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352c:	2202      	movs	r2, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800352e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003530:	920a      	str	r2, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003532:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003534:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003538:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800353a:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800353c:	f7fd fb66 	bl	8000c0c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003540:	2200      	movs	r2, #0
 8003542:	201c      	movs	r0, #28
 8003544:	4611      	mov	r1, r2
 8003546:	f7fd fae7 	bl	8000b18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800354a:	201c      	movs	r0, #28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800354c:	f7fd fb18 	bl	8000b80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8003550:	b00e      	add	sp, #56	; 0x38
 8003552:	bd10      	pop	{r4, pc}
  else if(htim_ic->Instance==TIM3)
 8003554:	4a3b      	ldr	r2, [pc, #236]	; (8003644 <HAL_TIM_IC_MspInit+0x158>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d123      	bne.n	80035a2 <HAL_TIM_IC_MspInit+0xb6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800355a:	4b3b      	ldr	r3, [pc, #236]	; (8003648 <HAL_TIM_IC_MspInit+0x15c>)
 800355c:	69da      	ldr	r2, [r3, #28]
 800355e:	f042 0202 	orr.w	r2, r2, #2
 8003562:	61da      	str	r2, [r3, #28]
 8003564:	69da      	ldr	r2, [r3, #28]
 8003566:	f002 0202 	and.w	r2, r2, #2
 800356a:	9203      	str	r2, [sp, #12]
 800356c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800356e:	695a      	ldr	r2, [r3, #20]
 8003570:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003574:	615a      	str	r2, [r3, #20]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357c:	9304      	str	r3, [sp, #16]
 800357e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003580:	2340      	movs	r3, #64	; 0x40
 8003582:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003584:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003586:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003588:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800358c:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800358e:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003590:	f7fd fb3c 	bl	8000c0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003594:	2200      	movs	r2, #0
 8003596:	201d      	movs	r0, #29
 8003598:	4611      	mov	r1, r2
 800359a:	f7fd fabd 	bl	8000b18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800359e:	201d      	movs	r0, #29
 80035a0:	e7d4      	b.n	800354c <HAL_TIM_IC_MspInit+0x60>
  else if(htim_ic->Instance==TIM4)
 80035a2:	4a2a      	ldr	r2, [pc, #168]	; (800364c <HAL_TIM_IC_MspInit+0x160>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d125      	bne.n	80035f4 <HAL_TIM_IC_MspInit+0x108>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80035a8:	4b27      	ldr	r3, [pc, #156]	; (8003648 <HAL_TIM_IC_MspInit+0x15c>)
 80035aa:	69da      	ldr	r2, [r3, #28]
 80035ac:	f042 0204 	orr.w	r2, r2, #4
 80035b0:	61da      	str	r2, [r3, #28]
 80035b2:	69da      	ldr	r2, [r3, #28]
 80035b4:	f002 0204 	and.w	r2, r2, #4
 80035b8:	9205      	str	r2, [sp, #20]
 80035ba:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035bc:	695a      	ldr	r2, [r3, #20]
 80035be:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80035c2:	615a      	str	r2, [r3, #20]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ca:	9306      	str	r3, [sp, #24]
 80035cc:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80035ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80035d2:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d4:	2302      	movs	r3, #2
 80035d6:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035d8:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80035da:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80035e0:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035e2:	f7fd fb13 	bl	8000c0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80035e6:	2200      	movs	r2, #0
 80035e8:	201e      	movs	r0, #30
 80035ea:	4611      	mov	r1, r2
 80035ec:	f7fd fa94 	bl	8000b18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80035f0:	201e      	movs	r0, #30
 80035f2:	e7ab      	b.n	800354c <HAL_TIM_IC_MspInit+0x60>
  else if(htim_ic->Instance==TIM15)
 80035f4:	4a16      	ldr	r2, [pc, #88]	; (8003650 <HAL_TIM_IC_MspInit+0x164>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d1aa      	bne.n	8003550 <HAL_TIM_IC_MspInit+0x64>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80035fa:	4b13      	ldr	r3, [pc, #76]	; (8003648 <HAL_TIM_IC_MspInit+0x15c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035fc:	4815      	ldr	r0, [pc, #84]	; (8003654 <HAL_TIM_IC_MspInit+0x168>)
    __HAL_RCC_TIM15_CLK_ENABLE();
 80035fe:	699a      	ldr	r2, [r3, #24]
 8003600:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003604:	619a      	str	r2, [r3, #24]
 8003606:	699a      	ldr	r2, [r3, #24]
 8003608:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 800360c:	9207      	str	r2, [sp, #28]
 800360e:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003610:	695a      	ldr	r2, [r3, #20]
 8003612:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003616:	615a      	str	r2, [r3, #20]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800361e:	9308      	str	r3, [sp, #32]
 8003620:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003622:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003626:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003628:	2302      	movs	r3, #2
 800362a:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800362c:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 800362e:	2301      	movs	r3, #1
 8003630:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003632:	f7fd faeb 	bl	8000c0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8003636:	2200      	movs	r2, #0
 8003638:	2018      	movs	r0, #24
 800363a:	4611      	mov	r1, r2
 800363c:	f7fd fa6c 	bl	8000b18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8003640:	2018      	movs	r0, #24
 8003642:	e783      	b.n	800354c <HAL_TIM_IC_MspInit+0x60>
 8003644:	40000400 	.word	0x40000400
 8003648:	40021000 	.word	0x40021000
 800364c:	40000800 	.word	0x40000800
 8003650:	40014000 	.word	0x40014000
 8003654:	48000400 	.word	0x48000400

08003658 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM8)
 8003658:	6802      	ldr	r2, [r0, #0]
 800365a:	4b08      	ldr	r3, [pc, #32]	; (800367c <HAL_TIM_PWM_MspInit+0x24>)
 800365c:	429a      	cmp	r2, r3
{
 800365e:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM8)
 8003660:	d10a      	bne.n	8003678 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003662:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8003666:	699a      	ldr	r2, [r3, #24]
 8003668:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800366c:	619a      	str	r2, [r3, #24]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003674:	9301      	str	r3, [sp, #4]
 8003676:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003678:	b002      	add	sp, #8
 800367a:	4770      	bx	lr
 800367c:	40013400 	.word	0x40013400

08003680 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003680:	b530      	push	{r4, r5, lr}
 8003682:	4604      	mov	r4, r0
 8003684:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003686:	2214      	movs	r2, #20
 8003688:	2100      	movs	r1, #0
 800368a:	a803      	add	r0, sp, #12
 800368c:	f000 f9ae 	bl	80039ec <memset>
  if(htim->Instance==TIM8)
 8003690:	6822      	ldr	r2, [r4, #0]
 8003692:	4b17      	ldr	r3, [pc, #92]	; (80036f0 <HAL_TIM_MspPostInit+0x70>)
 8003694:	429a      	cmp	r2, r3
 8003696:	d129      	bne.n	80036ec <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003698:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
    /**TIM8 GPIO Configuration    
    PC9     ------> TIM8_CH4
    PB9     ------> TIM8_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800369c:	f44f 7500 	mov.w	r5, #512	; 0x200
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036a0:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036a2:	4814      	ldr	r0, [pc, #80]	; (80036f4 <HAL_TIM_MspPostInit+0x74>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036a4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80036a8:	615a      	str	r2, [r3, #20]
 80036aa:	695a      	ldr	r2, [r3, #20]
 80036ac:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80036b0:	9201      	str	r2, [sp, #4]
 80036b2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036b4:	695a      	ldr	r2, [r3, #20]
 80036b6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80036ba:	615a      	str	r2, [r3, #20]
 80036bc:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80036be:	9503      	str	r5, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036c4:	9302      	str	r3, [sp, #8]
 80036c6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c8:	2402      	movs	r4, #2
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80036ca:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036cc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80036ce:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d0:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036d2:	f7fd fa9b 	bl	8000c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d6:	2300      	movs	r3, #0
 80036d8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036da:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036dc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 80036de:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036e0:	4805      	ldr	r0, [pc, #20]	; (80036f8 <HAL_TIM_MspPostInit+0x78>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80036e2:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e4:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 80036e6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036e8:	f7fd fa90 	bl	8000c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80036ec:	b009      	add	sp, #36	; 0x24
 80036ee:	bd30      	pop	{r4, r5, pc}
 80036f0:	40013400 	.word	0x40013400
 80036f4:	48000800 	.word	0x48000800
 80036f8:	48000400 	.word	0x48000400

080036fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036fc:	b530      	push	{r4, r5, lr}
 80036fe:	4604      	mov	r4, r0
 8003700:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003702:	2214      	movs	r2, #20
 8003704:	2100      	movs	r1, #0
 8003706:	a807      	add	r0, sp, #28
 8003708:	f000 f970 	bl	80039ec <memset>
  if(huart->Instance==USART1)
 800370c:	6823      	ldr	r3, [r4, #0]
 800370e:	4a41      	ldr	r2, [pc, #260]	; (8003814 <HAL_UART_MspInit+0x118>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d133      	bne.n	800377c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003714:	4b40      	ldr	r3, [pc, #256]	; (8003818 <HAL_UART_MspInit+0x11c>)
    GPIO_InitStruct.Pin = USART1_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(USART1_RX_GPIO_Port, &GPIO_InitStruct);
 8003716:	4841      	ldr	r0, [pc, #260]	; (800381c <HAL_UART_MspInit+0x120>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8003718:	699a      	ldr	r2, [r3, #24]
 800371a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800371e:	619a      	str	r2, [r3, #24]
 8003720:	699a      	ldr	r2, [r3, #24]
 8003722:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003726:	9200      	str	r2, [sp, #0]
 8003728:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800372a:	695a      	ldr	r2, [r3, #20]
 800372c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003730:	615a      	str	r2, [r3, #20]
 8003732:	695a      	ldr	r2, [r3, #20]
 8003734:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8003738:	9201      	str	r2, [sp, #4]
 800373a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800373c:	695a      	ldr	r2, [r3, #20]
 800373e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003742:	615a      	str	r2, [r3, #20]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374a:	9302      	str	r3, [sp, #8]
 800374c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800374e:	2502      	movs	r5, #2
    GPIO_InitStruct.Pin = USART1_RX_Pin;
 8003750:	2310      	movs	r3, #16
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003752:	2407      	movs	r4, #7
    HAL_GPIO_Init(USART1_RX_GPIO_Port, &GPIO_InitStruct);
 8003754:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = USART1_RX_Pin;
 8003756:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003758:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800375a:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_RX_GPIO_Port, &GPIO_InitStruct);
 800375c:	f7fd fa56 	bl	8000c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART1_TX_Pin;
 8003760:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003764:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003766:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003768:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376a:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800376c:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800376e:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8003770:	a907      	add	r1, sp, #28
 8003772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = USART3_TX_Pin|USART3_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003776:	f7fd fa49 	bl	8000c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800377a:	e028      	b.n	80037ce <HAL_UART_MspInit+0xd2>
  else if(huart->Instance==USART2)
 800377c:	4a28      	ldr	r2, [pc, #160]	; (8003820 <HAL_UART_MspInit+0x124>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d127      	bne.n	80037d2 <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003782:	4b25      	ldr	r3, [pc, #148]	; (8003818 <HAL_UART_MspInit+0x11c>)
 8003784:	69da      	ldr	r2, [r3, #28]
 8003786:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800378a:	61da      	str	r2, [r3, #28]
 800378c:	69da      	ldr	r2, [r3, #28]
 800378e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003792:	9203      	str	r2, [sp, #12]
 8003794:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003796:	695a      	ldr	r2, [r3, #20]
 8003798:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800379c:	615a      	str	r2, [r3, #20]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a4:	9304      	str	r3, [sp, #16]
 80037a6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80037a8:	230c      	movs	r3, #12
 80037aa:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ac:	2302      	movs	r3, #2
 80037ae:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037b0:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80037b2:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80037b8:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ba:	f7fd fa27 	bl	8000c0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80037be:	2200      	movs	r2, #0
 80037c0:	2026      	movs	r0, #38	; 0x26
 80037c2:	4611      	mov	r1, r2
 80037c4:	f7fd f9a8 	bl	8000b18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80037c8:	2026      	movs	r0, #38	; 0x26
 80037ca:	f7fd f9d9 	bl	8000b80 <HAL_NVIC_EnableIRQ>
}
 80037ce:	b00d      	add	sp, #52	; 0x34
 80037d0:	bd30      	pop	{r4, r5, pc}
  else if(huart->Instance==USART3)
 80037d2:	4a14      	ldr	r2, [pc, #80]	; (8003824 <HAL_UART_MspInit+0x128>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d1fa      	bne.n	80037ce <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80037d8:	4b0f      	ldr	r3, [pc, #60]	; (8003818 <HAL_UART_MspInit+0x11c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037da:	4813      	ldr	r0, [pc, #76]	; (8003828 <HAL_UART_MspInit+0x12c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80037dc:	69da      	ldr	r2, [r3, #28]
 80037de:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80037e2:	61da      	str	r2, [r3, #28]
 80037e4:	69da      	ldr	r2, [r3, #28]
 80037e6:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80037ea:	9205      	str	r2, [sp, #20]
 80037ec:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ee:	695a      	ldr	r2, [r3, #20]
 80037f0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80037f4:	615a      	str	r2, [r3, #20]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037fc:	9306      	str	r3, [sp, #24]
 80037fe:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = USART3_TX_Pin|USART3_RX_Pin;
 8003800:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003804:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003806:	2302      	movs	r3, #2
 8003808:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800380a:	2307      	movs	r3, #7
 800380c:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800380e:	a907      	add	r1, sp, #28
 8003810:	e7b1      	b.n	8003776 <HAL_UART_MspInit+0x7a>
 8003812:	bf00      	nop
 8003814:	40013800 	.word	0x40013800
 8003818:	40021000 	.word	0x40021000
 800381c:	48000800 	.word	0x48000800
 8003820:	40004400 	.word	0x40004400
 8003824:	40004800 	.word	0x40004800
 8003828:	48000400 	.word	0x48000400

0800382c <NMI_Handler>:
 800382c:	4770      	bx	lr

0800382e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800382e:	e7fe      	b.n	800382e <HardFault_Handler>

08003830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003830:	e7fe      	b.n	8003830 <MemManage_Handler>

08003832 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003832:	e7fe      	b.n	8003832 <BusFault_Handler>

08003834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003834:	e7fe      	b.n	8003834 <UsageFault_Handler>

08003836 <SVC_Handler>:
 8003836:	4770      	bx	lr

08003838 <DebugMon_Handler>:
 8003838:	4770      	bx	lr

0800383a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800383a:	4770      	bx	lr

0800383c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800383c:	f7fd b948 	b.w	8000ad0 <HAL_IncTick>

08003840 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8003840:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003842:	4804      	ldr	r0, [pc, #16]	; (8003854 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8003844:	f7fd ffad 	bl	80017a2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8003848:	4803      	ldr	r0, [pc, #12]	; (8003858 <TIM1_BRK_TIM15_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800384a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim15);
 800384e:	f7fd bfa8 	b.w	80017a2 <HAL_TIM_IRQHandler>
 8003852:	bf00      	nop
 8003854:	200002bc 	.word	0x200002bc
 8003858:	200001b4 	.word	0x200001b4

0800385c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800385c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800385e:	4804      	ldr	r0, [pc, #16]	; (8003870 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003860:	f7fd ff9f 	bl	80017a2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8003864:	4803      	ldr	r0, [pc, #12]	; (8003874 <TIM1_UP_TIM16_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003866:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim16);
 800386a:	f7fd bf9a 	b.w	80017a2 <HAL_TIM_IRQHandler>
 800386e:	bf00      	nop
 8003870:	200002bc 	.word	0x200002bc
 8003874:	200003b4 	.word	0x200003b4

08003878 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003878:	4801      	ldr	r0, [pc, #4]	; (8003880 <TIM2_IRQHandler+0x8>)
 800387a:	f7fd bf92 	b.w	80017a2 <HAL_TIM_IRQHandler>
 800387e:	bf00      	nop
 8003880:	20000304 	.word	0x20000304

08003884 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003884:	4801      	ldr	r0, [pc, #4]	; (800388c <TIM3_IRQHandler+0x8>)
 8003886:	f7fd bf8c 	b.w	80017a2 <HAL_TIM_IRQHandler>
 800388a:	bf00      	nop
 800388c:	200001f8 	.word	0x200001f8

08003890 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003890:	4801      	ldr	r0, [pc, #4]	; (8003898 <TIM4_IRQHandler+0x8>)
 8003892:	f7fd bf86 	b.w	80017a2 <HAL_TIM_IRQHandler>
 8003896:	bf00      	nop
 8003898:	20000104 	.word	0x20000104

0800389c <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800389c:	4801      	ldr	r0, [pc, #4]	; (80038a4 <USART2_IRQHandler+0x8>)
 800389e:	f7ff b831 	b.w	8002904 <HAL_UART_IRQHandler>
 80038a2:	bf00      	nop
 80038a4:	20000344 	.word	0x20000344

080038a8 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80038a8:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80038aa:	4b0a      	ldr	r3, [pc, #40]	; (80038d4 <_sbrk+0x2c>)
 80038ac:	6819      	ldr	r1, [r3, #0]
{
 80038ae:	4602      	mov	r2, r0
	if (heap_end == 0)
 80038b0:	b909      	cbnz	r1, 80038b6 <_sbrk+0xe>
		heap_end = &end;
 80038b2:	4909      	ldr	r1, [pc, #36]	; (80038d8 <_sbrk+0x30>)
 80038b4:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80038b6:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80038b8:	4669      	mov	r1, sp
 80038ba:	4402      	add	r2, r0
 80038bc:	428a      	cmp	r2, r1
 80038be:	d906      	bls.n	80038ce <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80038c0:	f000 f86a 	bl	8003998 <__errno>
 80038c4:	230c      	movs	r3, #12
 80038c6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80038c8:	f04f 30ff 	mov.w	r0, #4294967295
 80038cc:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80038ce:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80038d0:	bd08      	pop	{r3, pc}
 80038d2:	bf00      	nop
 80038d4:	200000a4 	.word	0x200000a4
 80038d8:	200003fc 	.word	0x200003fc

080038dc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038dc:	4915      	ldr	r1, [pc, #84]	; (8003934 <SystemInit+0x58>)
 80038de:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80038e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80038ea:	4b13      	ldr	r3, [pc, #76]	; (8003938 <SystemInit+0x5c>)
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	f042 0201 	orr.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80038f4:	6858      	ldr	r0, [r3, #4]
 80038f6:	4a11      	ldr	r2, [pc, #68]	; (800393c <SystemInit+0x60>)
 80038f8:	4002      	ands	r2, r0
 80038fa:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003902:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003906:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800390e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003916:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8003918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800391a:	f022 020f 	bic.w	r2, r2, #15
 800391e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8003920:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003922:	4a07      	ldr	r2, [pc, #28]	; (8003940 <SystemInit+0x64>)
 8003924:	4002      	ands	r2, r0
 8003926:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003928:	2200      	movs	r2, #0
 800392a:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800392c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003930:	608b      	str	r3, [r1, #8]
 8003932:	4770      	bx	lr
 8003934:	e000ed00 	.word	0xe000ed00
 8003938:	40021000 	.word	0x40021000
 800393c:	f87fc00c 	.word	0xf87fc00c
 8003940:	ff00fccc 	.word	0xff00fccc

08003944 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003944:	f8df d034 	ldr.w	sp, [pc, #52]	; 800397c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003948:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800394a:	e003      	b.n	8003954 <LoopCopyDataInit>

0800394c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800394c:	4b0c      	ldr	r3, [pc, #48]	; (8003980 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800394e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003950:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003952:	3104      	adds	r1, #4

08003954 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003954:	480b      	ldr	r0, [pc, #44]	; (8003984 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003956:	4b0c      	ldr	r3, [pc, #48]	; (8003988 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003958:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800395a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800395c:	d3f6      	bcc.n	800394c <CopyDataInit>
	ldr	r2, =_sbss
 800395e:	4a0b      	ldr	r2, [pc, #44]	; (800398c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003960:	e002      	b.n	8003968 <LoopFillZerobss>

08003962 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003962:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003964:	f842 3b04 	str.w	r3, [r2], #4

08003968 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003968:	4b09      	ldr	r3, [pc, #36]	; (8003990 <LoopForever+0x16>)
	cmp	r2, r3
 800396a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800396c:	d3f9      	bcc.n	8003962 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800396e:	f7ff ffb5 	bl	80038dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003972:	f000 f817 	bl	80039a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003976:	f7ff fb03 	bl	8002f80 <main>

0800397a <LoopForever>:

LoopForever:
    b LoopForever
 800397a:	e7fe      	b.n	800397a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800397c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8003980:	080042d4 	.word	0x080042d4
	ldr	r0, =_sdata
 8003984:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003988:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 800398c:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8003990:	200003fc 	.word	0x200003fc

08003994 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003994:	e7fe      	b.n	8003994 <ADC1_2_IRQHandler>
	...

08003998 <__errno>:
 8003998:	4b01      	ldr	r3, [pc, #4]	; (80039a0 <__errno+0x8>)
 800399a:	6818      	ldr	r0, [r3, #0]
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	20000010 	.word	0x20000010

080039a4 <__libc_init_array>:
 80039a4:	b570      	push	{r4, r5, r6, lr}
 80039a6:	4e0d      	ldr	r6, [pc, #52]	; (80039dc <__libc_init_array+0x38>)
 80039a8:	4c0d      	ldr	r4, [pc, #52]	; (80039e0 <__libc_init_array+0x3c>)
 80039aa:	1ba4      	subs	r4, r4, r6
 80039ac:	10a4      	asrs	r4, r4, #2
 80039ae:	2500      	movs	r5, #0
 80039b0:	42a5      	cmp	r5, r4
 80039b2:	d109      	bne.n	80039c8 <__libc_init_array+0x24>
 80039b4:	4e0b      	ldr	r6, [pc, #44]	; (80039e4 <__libc_init_array+0x40>)
 80039b6:	4c0c      	ldr	r4, [pc, #48]	; (80039e8 <__libc_init_array+0x44>)
 80039b8:	f000 fc3e 	bl	8004238 <_init>
 80039bc:	1ba4      	subs	r4, r4, r6
 80039be:	10a4      	asrs	r4, r4, #2
 80039c0:	2500      	movs	r5, #0
 80039c2:	42a5      	cmp	r5, r4
 80039c4:	d105      	bne.n	80039d2 <__libc_init_array+0x2e>
 80039c6:	bd70      	pop	{r4, r5, r6, pc}
 80039c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039cc:	4798      	blx	r3
 80039ce:	3501      	adds	r5, #1
 80039d0:	e7ee      	b.n	80039b0 <__libc_init_array+0xc>
 80039d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039d6:	4798      	blx	r3
 80039d8:	3501      	adds	r5, #1
 80039da:	e7f2      	b.n	80039c2 <__libc_init_array+0x1e>
 80039dc:	080042cc 	.word	0x080042cc
 80039e0:	080042cc 	.word	0x080042cc
 80039e4:	080042cc 	.word	0x080042cc
 80039e8:	080042d0 	.word	0x080042d0

080039ec <memset>:
 80039ec:	4402      	add	r2, r0
 80039ee:	4603      	mov	r3, r0
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d100      	bne.n	80039f6 <memset+0xa>
 80039f4:	4770      	bx	lr
 80039f6:	f803 1b01 	strb.w	r1, [r3], #1
 80039fa:	e7f9      	b.n	80039f0 <memset+0x4>

080039fc <siprintf>:
 80039fc:	b40e      	push	{r1, r2, r3}
 80039fe:	b500      	push	{lr}
 8003a00:	b09c      	sub	sp, #112	; 0x70
 8003a02:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003a06:	ab1d      	add	r3, sp, #116	; 0x74
 8003a08:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003a0c:	9002      	str	r0, [sp, #8]
 8003a0e:	9006      	str	r0, [sp, #24]
 8003a10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a14:	480a      	ldr	r0, [pc, #40]	; (8003a40 <siprintf+0x44>)
 8003a16:	9104      	str	r1, [sp, #16]
 8003a18:	9107      	str	r1, [sp, #28]
 8003a1a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003a1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a22:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003a26:	6800      	ldr	r0, [r0, #0]
 8003a28:	9301      	str	r3, [sp, #4]
 8003a2a:	a902      	add	r1, sp, #8
 8003a2c:	f000 f866 	bl	8003afc <_svfiprintf_r>
 8003a30:	9b02      	ldr	r3, [sp, #8]
 8003a32:	2200      	movs	r2, #0
 8003a34:	701a      	strb	r2, [r3, #0]
 8003a36:	b01c      	add	sp, #112	; 0x70
 8003a38:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a3c:	b003      	add	sp, #12
 8003a3e:	4770      	bx	lr
 8003a40:	20000010 	.word	0x20000010

08003a44 <__ssputs_r>:
 8003a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a48:	688e      	ldr	r6, [r1, #8]
 8003a4a:	429e      	cmp	r6, r3
 8003a4c:	4682      	mov	sl, r0
 8003a4e:	460c      	mov	r4, r1
 8003a50:	4691      	mov	r9, r2
 8003a52:	4698      	mov	r8, r3
 8003a54:	d835      	bhi.n	8003ac2 <__ssputs_r+0x7e>
 8003a56:	898a      	ldrh	r2, [r1, #12]
 8003a58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a5c:	d031      	beq.n	8003ac2 <__ssputs_r+0x7e>
 8003a5e:	6825      	ldr	r5, [r4, #0]
 8003a60:	6909      	ldr	r1, [r1, #16]
 8003a62:	1a6f      	subs	r7, r5, r1
 8003a64:	6965      	ldr	r5, [r4, #20]
 8003a66:	2302      	movs	r3, #2
 8003a68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a6c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003a70:	f108 0301 	add.w	r3, r8, #1
 8003a74:	443b      	add	r3, r7
 8003a76:	429d      	cmp	r5, r3
 8003a78:	bf38      	it	cc
 8003a7a:	461d      	movcc	r5, r3
 8003a7c:	0553      	lsls	r3, r2, #21
 8003a7e:	d531      	bpl.n	8003ae4 <__ssputs_r+0xa0>
 8003a80:	4629      	mov	r1, r5
 8003a82:	f000 fb39 	bl	80040f8 <_malloc_r>
 8003a86:	4606      	mov	r6, r0
 8003a88:	b950      	cbnz	r0, 8003aa0 <__ssputs_r+0x5c>
 8003a8a:	230c      	movs	r3, #12
 8003a8c:	f8ca 3000 	str.w	r3, [sl]
 8003a90:	89a3      	ldrh	r3, [r4, #12]
 8003a92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a96:	81a3      	strh	r3, [r4, #12]
 8003a98:	f04f 30ff 	mov.w	r0, #4294967295
 8003a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aa0:	463a      	mov	r2, r7
 8003aa2:	6921      	ldr	r1, [r4, #16]
 8003aa4:	f000 fab4 	bl	8004010 <memcpy>
 8003aa8:	89a3      	ldrh	r3, [r4, #12]
 8003aaa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ab2:	81a3      	strh	r3, [r4, #12]
 8003ab4:	6126      	str	r6, [r4, #16]
 8003ab6:	6165      	str	r5, [r4, #20]
 8003ab8:	443e      	add	r6, r7
 8003aba:	1bed      	subs	r5, r5, r7
 8003abc:	6026      	str	r6, [r4, #0]
 8003abe:	60a5      	str	r5, [r4, #8]
 8003ac0:	4646      	mov	r6, r8
 8003ac2:	4546      	cmp	r6, r8
 8003ac4:	bf28      	it	cs
 8003ac6:	4646      	movcs	r6, r8
 8003ac8:	4632      	mov	r2, r6
 8003aca:	4649      	mov	r1, r9
 8003acc:	6820      	ldr	r0, [r4, #0]
 8003ace:	f000 faaa 	bl	8004026 <memmove>
 8003ad2:	68a3      	ldr	r3, [r4, #8]
 8003ad4:	1b9b      	subs	r3, r3, r6
 8003ad6:	60a3      	str	r3, [r4, #8]
 8003ad8:	6823      	ldr	r3, [r4, #0]
 8003ada:	441e      	add	r6, r3
 8003adc:	6026      	str	r6, [r4, #0]
 8003ade:	2000      	movs	r0, #0
 8003ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ae4:	462a      	mov	r2, r5
 8003ae6:	f000 fb65 	bl	80041b4 <_realloc_r>
 8003aea:	4606      	mov	r6, r0
 8003aec:	2800      	cmp	r0, #0
 8003aee:	d1e1      	bne.n	8003ab4 <__ssputs_r+0x70>
 8003af0:	6921      	ldr	r1, [r4, #16]
 8003af2:	4650      	mov	r0, sl
 8003af4:	f000 fab2 	bl	800405c <_free_r>
 8003af8:	e7c7      	b.n	8003a8a <__ssputs_r+0x46>
	...

08003afc <_svfiprintf_r>:
 8003afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b00:	b09d      	sub	sp, #116	; 0x74
 8003b02:	4680      	mov	r8, r0
 8003b04:	9303      	str	r3, [sp, #12]
 8003b06:	898b      	ldrh	r3, [r1, #12]
 8003b08:	061c      	lsls	r4, r3, #24
 8003b0a:	460d      	mov	r5, r1
 8003b0c:	4616      	mov	r6, r2
 8003b0e:	d50f      	bpl.n	8003b30 <_svfiprintf_r+0x34>
 8003b10:	690b      	ldr	r3, [r1, #16]
 8003b12:	b96b      	cbnz	r3, 8003b30 <_svfiprintf_r+0x34>
 8003b14:	2140      	movs	r1, #64	; 0x40
 8003b16:	f000 faef 	bl	80040f8 <_malloc_r>
 8003b1a:	6028      	str	r0, [r5, #0]
 8003b1c:	6128      	str	r0, [r5, #16]
 8003b1e:	b928      	cbnz	r0, 8003b2c <_svfiprintf_r+0x30>
 8003b20:	230c      	movs	r3, #12
 8003b22:	f8c8 3000 	str.w	r3, [r8]
 8003b26:	f04f 30ff 	mov.w	r0, #4294967295
 8003b2a:	e0c5      	b.n	8003cb8 <_svfiprintf_r+0x1bc>
 8003b2c:	2340      	movs	r3, #64	; 0x40
 8003b2e:	616b      	str	r3, [r5, #20]
 8003b30:	2300      	movs	r3, #0
 8003b32:	9309      	str	r3, [sp, #36]	; 0x24
 8003b34:	2320      	movs	r3, #32
 8003b36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b3a:	2330      	movs	r3, #48	; 0x30
 8003b3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b40:	f04f 0b01 	mov.w	fp, #1
 8003b44:	4637      	mov	r7, r6
 8003b46:	463c      	mov	r4, r7
 8003b48:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d13c      	bne.n	8003bca <_svfiprintf_r+0xce>
 8003b50:	ebb7 0a06 	subs.w	sl, r7, r6
 8003b54:	d00b      	beq.n	8003b6e <_svfiprintf_r+0x72>
 8003b56:	4653      	mov	r3, sl
 8003b58:	4632      	mov	r2, r6
 8003b5a:	4629      	mov	r1, r5
 8003b5c:	4640      	mov	r0, r8
 8003b5e:	f7ff ff71 	bl	8003a44 <__ssputs_r>
 8003b62:	3001      	adds	r0, #1
 8003b64:	f000 80a3 	beq.w	8003cae <_svfiprintf_r+0x1b2>
 8003b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b6a:	4453      	add	r3, sl
 8003b6c:	9309      	str	r3, [sp, #36]	; 0x24
 8003b6e:	783b      	ldrb	r3, [r7, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 809c 	beq.w	8003cae <_svfiprintf_r+0x1b2>
 8003b76:	2300      	movs	r3, #0
 8003b78:	f04f 32ff 	mov.w	r2, #4294967295
 8003b7c:	9304      	str	r3, [sp, #16]
 8003b7e:	9307      	str	r3, [sp, #28]
 8003b80:	9205      	str	r2, [sp, #20]
 8003b82:	9306      	str	r3, [sp, #24]
 8003b84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b88:	931a      	str	r3, [sp, #104]	; 0x68
 8003b8a:	2205      	movs	r2, #5
 8003b8c:	7821      	ldrb	r1, [r4, #0]
 8003b8e:	4850      	ldr	r0, [pc, #320]	; (8003cd0 <_svfiprintf_r+0x1d4>)
 8003b90:	f7fc fb26 	bl	80001e0 <memchr>
 8003b94:	1c67      	adds	r7, r4, #1
 8003b96:	9b04      	ldr	r3, [sp, #16]
 8003b98:	b9d8      	cbnz	r0, 8003bd2 <_svfiprintf_r+0xd6>
 8003b9a:	06d9      	lsls	r1, r3, #27
 8003b9c:	bf44      	itt	mi
 8003b9e:	2220      	movmi	r2, #32
 8003ba0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003ba4:	071a      	lsls	r2, r3, #28
 8003ba6:	bf44      	itt	mi
 8003ba8:	222b      	movmi	r2, #43	; 0x2b
 8003baa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003bae:	7822      	ldrb	r2, [r4, #0]
 8003bb0:	2a2a      	cmp	r2, #42	; 0x2a
 8003bb2:	d016      	beq.n	8003be2 <_svfiprintf_r+0xe6>
 8003bb4:	9a07      	ldr	r2, [sp, #28]
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	200a      	movs	r0, #10
 8003bba:	4627      	mov	r7, r4
 8003bbc:	3401      	adds	r4, #1
 8003bbe:	783b      	ldrb	r3, [r7, #0]
 8003bc0:	3b30      	subs	r3, #48	; 0x30
 8003bc2:	2b09      	cmp	r3, #9
 8003bc4:	d951      	bls.n	8003c6a <_svfiprintf_r+0x16e>
 8003bc6:	b1c9      	cbz	r1, 8003bfc <_svfiprintf_r+0x100>
 8003bc8:	e011      	b.n	8003bee <_svfiprintf_r+0xf2>
 8003bca:	2b25      	cmp	r3, #37	; 0x25
 8003bcc:	d0c0      	beq.n	8003b50 <_svfiprintf_r+0x54>
 8003bce:	4627      	mov	r7, r4
 8003bd0:	e7b9      	b.n	8003b46 <_svfiprintf_r+0x4a>
 8003bd2:	4a3f      	ldr	r2, [pc, #252]	; (8003cd0 <_svfiprintf_r+0x1d4>)
 8003bd4:	1a80      	subs	r0, r0, r2
 8003bd6:	fa0b f000 	lsl.w	r0, fp, r0
 8003bda:	4318      	orrs	r0, r3
 8003bdc:	9004      	str	r0, [sp, #16]
 8003bde:	463c      	mov	r4, r7
 8003be0:	e7d3      	b.n	8003b8a <_svfiprintf_r+0x8e>
 8003be2:	9a03      	ldr	r2, [sp, #12]
 8003be4:	1d11      	adds	r1, r2, #4
 8003be6:	6812      	ldr	r2, [r2, #0]
 8003be8:	9103      	str	r1, [sp, #12]
 8003bea:	2a00      	cmp	r2, #0
 8003bec:	db01      	blt.n	8003bf2 <_svfiprintf_r+0xf6>
 8003bee:	9207      	str	r2, [sp, #28]
 8003bf0:	e004      	b.n	8003bfc <_svfiprintf_r+0x100>
 8003bf2:	4252      	negs	r2, r2
 8003bf4:	f043 0302 	orr.w	r3, r3, #2
 8003bf8:	9207      	str	r2, [sp, #28]
 8003bfa:	9304      	str	r3, [sp, #16]
 8003bfc:	783b      	ldrb	r3, [r7, #0]
 8003bfe:	2b2e      	cmp	r3, #46	; 0x2e
 8003c00:	d10e      	bne.n	8003c20 <_svfiprintf_r+0x124>
 8003c02:	787b      	ldrb	r3, [r7, #1]
 8003c04:	2b2a      	cmp	r3, #42	; 0x2a
 8003c06:	f107 0101 	add.w	r1, r7, #1
 8003c0a:	d132      	bne.n	8003c72 <_svfiprintf_r+0x176>
 8003c0c:	9b03      	ldr	r3, [sp, #12]
 8003c0e:	1d1a      	adds	r2, r3, #4
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	9203      	str	r2, [sp, #12]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	bfb8      	it	lt
 8003c18:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c1c:	3702      	adds	r7, #2
 8003c1e:	9305      	str	r3, [sp, #20]
 8003c20:	4c2c      	ldr	r4, [pc, #176]	; (8003cd4 <_svfiprintf_r+0x1d8>)
 8003c22:	7839      	ldrb	r1, [r7, #0]
 8003c24:	2203      	movs	r2, #3
 8003c26:	4620      	mov	r0, r4
 8003c28:	f7fc fada 	bl	80001e0 <memchr>
 8003c2c:	b138      	cbz	r0, 8003c3e <_svfiprintf_r+0x142>
 8003c2e:	2340      	movs	r3, #64	; 0x40
 8003c30:	1b00      	subs	r0, r0, r4
 8003c32:	fa03 f000 	lsl.w	r0, r3, r0
 8003c36:	9b04      	ldr	r3, [sp, #16]
 8003c38:	4303      	orrs	r3, r0
 8003c3a:	9304      	str	r3, [sp, #16]
 8003c3c:	3701      	adds	r7, #1
 8003c3e:	7839      	ldrb	r1, [r7, #0]
 8003c40:	4825      	ldr	r0, [pc, #148]	; (8003cd8 <_svfiprintf_r+0x1dc>)
 8003c42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c46:	2206      	movs	r2, #6
 8003c48:	1c7e      	adds	r6, r7, #1
 8003c4a:	f7fc fac9 	bl	80001e0 <memchr>
 8003c4e:	2800      	cmp	r0, #0
 8003c50:	d035      	beq.n	8003cbe <_svfiprintf_r+0x1c2>
 8003c52:	4b22      	ldr	r3, [pc, #136]	; (8003cdc <_svfiprintf_r+0x1e0>)
 8003c54:	b9fb      	cbnz	r3, 8003c96 <_svfiprintf_r+0x19a>
 8003c56:	9b03      	ldr	r3, [sp, #12]
 8003c58:	3307      	adds	r3, #7
 8003c5a:	f023 0307 	bic.w	r3, r3, #7
 8003c5e:	3308      	adds	r3, #8
 8003c60:	9303      	str	r3, [sp, #12]
 8003c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c64:	444b      	add	r3, r9
 8003c66:	9309      	str	r3, [sp, #36]	; 0x24
 8003c68:	e76c      	b.n	8003b44 <_svfiprintf_r+0x48>
 8003c6a:	fb00 3202 	mla	r2, r0, r2, r3
 8003c6e:	2101      	movs	r1, #1
 8003c70:	e7a3      	b.n	8003bba <_svfiprintf_r+0xbe>
 8003c72:	2300      	movs	r3, #0
 8003c74:	9305      	str	r3, [sp, #20]
 8003c76:	4618      	mov	r0, r3
 8003c78:	240a      	movs	r4, #10
 8003c7a:	460f      	mov	r7, r1
 8003c7c:	3101      	adds	r1, #1
 8003c7e:	783a      	ldrb	r2, [r7, #0]
 8003c80:	3a30      	subs	r2, #48	; 0x30
 8003c82:	2a09      	cmp	r2, #9
 8003c84:	d903      	bls.n	8003c8e <_svfiprintf_r+0x192>
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0ca      	beq.n	8003c20 <_svfiprintf_r+0x124>
 8003c8a:	9005      	str	r0, [sp, #20]
 8003c8c:	e7c8      	b.n	8003c20 <_svfiprintf_r+0x124>
 8003c8e:	fb04 2000 	mla	r0, r4, r0, r2
 8003c92:	2301      	movs	r3, #1
 8003c94:	e7f1      	b.n	8003c7a <_svfiprintf_r+0x17e>
 8003c96:	ab03      	add	r3, sp, #12
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	462a      	mov	r2, r5
 8003c9c:	4b10      	ldr	r3, [pc, #64]	; (8003ce0 <_svfiprintf_r+0x1e4>)
 8003c9e:	a904      	add	r1, sp, #16
 8003ca0:	4640      	mov	r0, r8
 8003ca2:	f3af 8000 	nop.w
 8003ca6:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003caa:	4681      	mov	r9, r0
 8003cac:	d1d9      	bne.n	8003c62 <_svfiprintf_r+0x166>
 8003cae:	89ab      	ldrh	r3, [r5, #12]
 8003cb0:	065b      	lsls	r3, r3, #25
 8003cb2:	f53f af38 	bmi.w	8003b26 <_svfiprintf_r+0x2a>
 8003cb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003cb8:	b01d      	add	sp, #116	; 0x74
 8003cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cbe:	ab03      	add	r3, sp, #12
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	462a      	mov	r2, r5
 8003cc4:	4b06      	ldr	r3, [pc, #24]	; (8003ce0 <_svfiprintf_r+0x1e4>)
 8003cc6:	a904      	add	r1, sp, #16
 8003cc8:	4640      	mov	r0, r8
 8003cca:	f000 f881 	bl	8003dd0 <_printf_i>
 8003cce:	e7ea      	b.n	8003ca6 <_svfiprintf_r+0x1aa>
 8003cd0:	08004296 	.word	0x08004296
 8003cd4:	0800429c 	.word	0x0800429c
 8003cd8:	080042a0 	.word	0x080042a0
 8003cdc:	00000000 	.word	0x00000000
 8003ce0:	08003a45 	.word	0x08003a45

08003ce4 <_printf_common>:
 8003ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ce8:	4691      	mov	r9, r2
 8003cea:	461f      	mov	r7, r3
 8003cec:	688a      	ldr	r2, [r1, #8]
 8003cee:	690b      	ldr	r3, [r1, #16]
 8003cf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	bfb8      	it	lt
 8003cf8:	4613      	movlt	r3, r2
 8003cfa:	f8c9 3000 	str.w	r3, [r9]
 8003cfe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d02:	4606      	mov	r6, r0
 8003d04:	460c      	mov	r4, r1
 8003d06:	b112      	cbz	r2, 8003d0e <_printf_common+0x2a>
 8003d08:	3301      	adds	r3, #1
 8003d0a:	f8c9 3000 	str.w	r3, [r9]
 8003d0e:	6823      	ldr	r3, [r4, #0]
 8003d10:	0699      	lsls	r1, r3, #26
 8003d12:	bf42      	ittt	mi
 8003d14:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003d18:	3302      	addmi	r3, #2
 8003d1a:	f8c9 3000 	strmi.w	r3, [r9]
 8003d1e:	6825      	ldr	r5, [r4, #0]
 8003d20:	f015 0506 	ands.w	r5, r5, #6
 8003d24:	d107      	bne.n	8003d36 <_printf_common+0x52>
 8003d26:	f104 0a19 	add.w	sl, r4, #25
 8003d2a:	68e3      	ldr	r3, [r4, #12]
 8003d2c:	f8d9 2000 	ldr.w	r2, [r9]
 8003d30:	1a9b      	subs	r3, r3, r2
 8003d32:	429d      	cmp	r5, r3
 8003d34:	db29      	blt.n	8003d8a <_printf_common+0xa6>
 8003d36:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003d3a:	6822      	ldr	r2, [r4, #0]
 8003d3c:	3300      	adds	r3, #0
 8003d3e:	bf18      	it	ne
 8003d40:	2301      	movne	r3, #1
 8003d42:	0692      	lsls	r2, r2, #26
 8003d44:	d42e      	bmi.n	8003da4 <_printf_common+0xc0>
 8003d46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d4a:	4639      	mov	r1, r7
 8003d4c:	4630      	mov	r0, r6
 8003d4e:	47c0      	blx	r8
 8003d50:	3001      	adds	r0, #1
 8003d52:	d021      	beq.n	8003d98 <_printf_common+0xb4>
 8003d54:	6823      	ldr	r3, [r4, #0]
 8003d56:	68e5      	ldr	r5, [r4, #12]
 8003d58:	f8d9 2000 	ldr.w	r2, [r9]
 8003d5c:	f003 0306 	and.w	r3, r3, #6
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	bf08      	it	eq
 8003d64:	1aad      	subeq	r5, r5, r2
 8003d66:	68a3      	ldr	r3, [r4, #8]
 8003d68:	6922      	ldr	r2, [r4, #16]
 8003d6a:	bf0c      	ite	eq
 8003d6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d70:	2500      	movne	r5, #0
 8003d72:	4293      	cmp	r3, r2
 8003d74:	bfc4      	itt	gt
 8003d76:	1a9b      	subgt	r3, r3, r2
 8003d78:	18ed      	addgt	r5, r5, r3
 8003d7a:	f04f 0900 	mov.w	r9, #0
 8003d7e:	341a      	adds	r4, #26
 8003d80:	454d      	cmp	r5, r9
 8003d82:	d11b      	bne.n	8003dbc <_printf_common+0xd8>
 8003d84:	2000      	movs	r0, #0
 8003d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	4652      	mov	r2, sl
 8003d8e:	4639      	mov	r1, r7
 8003d90:	4630      	mov	r0, r6
 8003d92:	47c0      	blx	r8
 8003d94:	3001      	adds	r0, #1
 8003d96:	d103      	bne.n	8003da0 <_printf_common+0xbc>
 8003d98:	f04f 30ff 	mov.w	r0, #4294967295
 8003d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003da0:	3501      	adds	r5, #1
 8003da2:	e7c2      	b.n	8003d2a <_printf_common+0x46>
 8003da4:	18e1      	adds	r1, r4, r3
 8003da6:	1c5a      	adds	r2, r3, #1
 8003da8:	2030      	movs	r0, #48	; 0x30
 8003daa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003dae:	4422      	add	r2, r4
 8003db0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003db4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003db8:	3302      	adds	r3, #2
 8003dba:	e7c4      	b.n	8003d46 <_printf_common+0x62>
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	4622      	mov	r2, r4
 8003dc0:	4639      	mov	r1, r7
 8003dc2:	4630      	mov	r0, r6
 8003dc4:	47c0      	blx	r8
 8003dc6:	3001      	adds	r0, #1
 8003dc8:	d0e6      	beq.n	8003d98 <_printf_common+0xb4>
 8003dca:	f109 0901 	add.w	r9, r9, #1
 8003dce:	e7d7      	b.n	8003d80 <_printf_common+0x9c>

08003dd0 <_printf_i>:
 8003dd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003dd4:	4617      	mov	r7, r2
 8003dd6:	7e0a      	ldrb	r2, [r1, #24]
 8003dd8:	b085      	sub	sp, #20
 8003dda:	2a6e      	cmp	r2, #110	; 0x6e
 8003ddc:	4698      	mov	r8, r3
 8003dde:	4606      	mov	r6, r0
 8003de0:	460c      	mov	r4, r1
 8003de2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003de4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003de8:	f000 80bc 	beq.w	8003f64 <_printf_i+0x194>
 8003dec:	d81a      	bhi.n	8003e24 <_printf_i+0x54>
 8003dee:	2a63      	cmp	r2, #99	; 0x63
 8003df0:	d02e      	beq.n	8003e50 <_printf_i+0x80>
 8003df2:	d80a      	bhi.n	8003e0a <_printf_i+0x3a>
 8003df4:	2a00      	cmp	r2, #0
 8003df6:	f000 80c8 	beq.w	8003f8a <_printf_i+0x1ba>
 8003dfa:	2a58      	cmp	r2, #88	; 0x58
 8003dfc:	f000 808a 	beq.w	8003f14 <_printf_i+0x144>
 8003e00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e04:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003e08:	e02a      	b.n	8003e60 <_printf_i+0x90>
 8003e0a:	2a64      	cmp	r2, #100	; 0x64
 8003e0c:	d001      	beq.n	8003e12 <_printf_i+0x42>
 8003e0e:	2a69      	cmp	r2, #105	; 0x69
 8003e10:	d1f6      	bne.n	8003e00 <_printf_i+0x30>
 8003e12:	6821      	ldr	r1, [r4, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003e1a:	d023      	beq.n	8003e64 <_printf_i+0x94>
 8003e1c:	1d11      	adds	r1, r2, #4
 8003e1e:	6019      	str	r1, [r3, #0]
 8003e20:	6813      	ldr	r3, [r2, #0]
 8003e22:	e027      	b.n	8003e74 <_printf_i+0xa4>
 8003e24:	2a73      	cmp	r2, #115	; 0x73
 8003e26:	f000 80b4 	beq.w	8003f92 <_printf_i+0x1c2>
 8003e2a:	d808      	bhi.n	8003e3e <_printf_i+0x6e>
 8003e2c:	2a6f      	cmp	r2, #111	; 0x6f
 8003e2e:	d02a      	beq.n	8003e86 <_printf_i+0xb6>
 8003e30:	2a70      	cmp	r2, #112	; 0x70
 8003e32:	d1e5      	bne.n	8003e00 <_printf_i+0x30>
 8003e34:	680a      	ldr	r2, [r1, #0]
 8003e36:	f042 0220 	orr.w	r2, r2, #32
 8003e3a:	600a      	str	r2, [r1, #0]
 8003e3c:	e003      	b.n	8003e46 <_printf_i+0x76>
 8003e3e:	2a75      	cmp	r2, #117	; 0x75
 8003e40:	d021      	beq.n	8003e86 <_printf_i+0xb6>
 8003e42:	2a78      	cmp	r2, #120	; 0x78
 8003e44:	d1dc      	bne.n	8003e00 <_printf_i+0x30>
 8003e46:	2278      	movs	r2, #120	; 0x78
 8003e48:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003e4c:	496e      	ldr	r1, [pc, #440]	; (8004008 <_printf_i+0x238>)
 8003e4e:	e064      	b.n	8003f1a <_printf_i+0x14a>
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003e56:	1d11      	adds	r1, r2, #4
 8003e58:	6019      	str	r1, [r3, #0]
 8003e5a:	6813      	ldr	r3, [r2, #0]
 8003e5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e60:	2301      	movs	r3, #1
 8003e62:	e0a3      	b.n	8003fac <_printf_i+0x1dc>
 8003e64:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003e68:	f102 0104 	add.w	r1, r2, #4
 8003e6c:	6019      	str	r1, [r3, #0]
 8003e6e:	d0d7      	beq.n	8003e20 <_printf_i+0x50>
 8003e70:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	da03      	bge.n	8003e80 <_printf_i+0xb0>
 8003e78:	222d      	movs	r2, #45	; 0x2d
 8003e7a:	425b      	negs	r3, r3
 8003e7c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003e80:	4962      	ldr	r1, [pc, #392]	; (800400c <_printf_i+0x23c>)
 8003e82:	220a      	movs	r2, #10
 8003e84:	e017      	b.n	8003eb6 <_printf_i+0xe6>
 8003e86:	6820      	ldr	r0, [r4, #0]
 8003e88:	6819      	ldr	r1, [r3, #0]
 8003e8a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003e8e:	d003      	beq.n	8003e98 <_printf_i+0xc8>
 8003e90:	1d08      	adds	r0, r1, #4
 8003e92:	6018      	str	r0, [r3, #0]
 8003e94:	680b      	ldr	r3, [r1, #0]
 8003e96:	e006      	b.n	8003ea6 <_printf_i+0xd6>
 8003e98:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e9c:	f101 0004 	add.w	r0, r1, #4
 8003ea0:	6018      	str	r0, [r3, #0]
 8003ea2:	d0f7      	beq.n	8003e94 <_printf_i+0xc4>
 8003ea4:	880b      	ldrh	r3, [r1, #0]
 8003ea6:	4959      	ldr	r1, [pc, #356]	; (800400c <_printf_i+0x23c>)
 8003ea8:	2a6f      	cmp	r2, #111	; 0x6f
 8003eaa:	bf14      	ite	ne
 8003eac:	220a      	movne	r2, #10
 8003eae:	2208      	moveq	r2, #8
 8003eb0:	2000      	movs	r0, #0
 8003eb2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003eb6:	6865      	ldr	r5, [r4, #4]
 8003eb8:	60a5      	str	r5, [r4, #8]
 8003eba:	2d00      	cmp	r5, #0
 8003ebc:	f2c0 809c 	blt.w	8003ff8 <_printf_i+0x228>
 8003ec0:	6820      	ldr	r0, [r4, #0]
 8003ec2:	f020 0004 	bic.w	r0, r0, #4
 8003ec6:	6020      	str	r0, [r4, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d13f      	bne.n	8003f4c <_printf_i+0x17c>
 8003ecc:	2d00      	cmp	r5, #0
 8003ece:	f040 8095 	bne.w	8003ffc <_printf_i+0x22c>
 8003ed2:	4675      	mov	r5, lr
 8003ed4:	2a08      	cmp	r2, #8
 8003ed6:	d10b      	bne.n	8003ef0 <_printf_i+0x120>
 8003ed8:	6823      	ldr	r3, [r4, #0]
 8003eda:	07da      	lsls	r2, r3, #31
 8003edc:	d508      	bpl.n	8003ef0 <_printf_i+0x120>
 8003ede:	6923      	ldr	r3, [r4, #16]
 8003ee0:	6862      	ldr	r2, [r4, #4]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	bfde      	ittt	le
 8003ee6:	2330      	movle	r3, #48	; 0x30
 8003ee8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003eec:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ef0:	ebae 0305 	sub.w	r3, lr, r5
 8003ef4:	6123      	str	r3, [r4, #16]
 8003ef6:	f8cd 8000 	str.w	r8, [sp]
 8003efa:	463b      	mov	r3, r7
 8003efc:	aa03      	add	r2, sp, #12
 8003efe:	4621      	mov	r1, r4
 8003f00:	4630      	mov	r0, r6
 8003f02:	f7ff feef 	bl	8003ce4 <_printf_common>
 8003f06:	3001      	adds	r0, #1
 8003f08:	d155      	bne.n	8003fb6 <_printf_i+0x1e6>
 8003f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f0e:	b005      	add	sp, #20
 8003f10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f14:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003f18:	493c      	ldr	r1, [pc, #240]	; (800400c <_printf_i+0x23c>)
 8003f1a:	6822      	ldr	r2, [r4, #0]
 8003f1c:	6818      	ldr	r0, [r3, #0]
 8003f1e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003f22:	f100 0504 	add.w	r5, r0, #4
 8003f26:	601d      	str	r5, [r3, #0]
 8003f28:	d001      	beq.n	8003f2e <_printf_i+0x15e>
 8003f2a:	6803      	ldr	r3, [r0, #0]
 8003f2c:	e002      	b.n	8003f34 <_printf_i+0x164>
 8003f2e:	0655      	lsls	r5, r2, #25
 8003f30:	d5fb      	bpl.n	8003f2a <_printf_i+0x15a>
 8003f32:	8803      	ldrh	r3, [r0, #0]
 8003f34:	07d0      	lsls	r0, r2, #31
 8003f36:	bf44      	itt	mi
 8003f38:	f042 0220 	orrmi.w	r2, r2, #32
 8003f3c:	6022      	strmi	r2, [r4, #0]
 8003f3e:	b91b      	cbnz	r3, 8003f48 <_printf_i+0x178>
 8003f40:	6822      	ldr	r2, [r4, #0]
 8003f42:	f022 0220 	bic.w	r2, r2, #32
 8003f46:	6022      	str	r2, [r4, #0]
 8003f48:	2210      	movs	r2, #16
 8003f4a:	e7b1      	b.n	8003eb0 <_printf_i+0xe0>
 8003f4c:	4675      	mov	r5, lr
 8003f4e:	fbb3 f0f2 	udiv	r0, r3, r2
 8003f52:	fb02 3310 	mls	r3, r2, r0, r3
 8003f56:	5ccb      	ldrb	r3, [r1, r3]
 8003f58:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2800      	cmp	r0, #0
 8003f60:	d1f5      	bne.n	8003f4e <_printf_i+0x17e>
 8003f62:	e7b7      	b.n	8003ed4 <_printf_i+0x104>
 8003f64:	6808      	ldr	r0, [r1, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	6949      	ldr	r1, [r1, #20]
 8003f6a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003f6e:	d004      	beq.n	8003f7a <_printf_i+0x1aa>
 8003f70:	1d10      	adds	r0, r2, #4
 8003f72:	6018      	str	r0, [r3, #0]
 8003f74:	6813      	ldr	r3, [r2, #0]
 8003f76:	6019      	str	r1, [r3, #0]
 8003f78:	e007      	b.n	8003f8a <_printf_i+0x1ba>
 8003f7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f7e:	f102 0004 	add.w	r0, r2, #4
 8003f82:	6018      	str	r0, [r3, #0]
 8003f84:	6813      	ldr	r3, [r2, #0]
 8003f86:	d0f6      	beq.n	8003f76 <_printf_i+0x1a6>
 8003f88:	8019      	strh	r1, [r3, #0]
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	6123      	str	r3, [r4, #16]
 8003f8e:	4675      	mov	r5, lr
 8003f90:	e7b1      	b.n	8003ef6 <_printf_i+0x126>
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	1d11      	adds	r1, r2, #4
 8003f96:	6019      	str	r1, [r3, #0]
 8003f98:	6815      	ldr	r5, [r2, #0]
 8003f9a:	6862      	ldr	r2, [r4, #4]
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	4628      	mov	r0, r5
 8003fa0:	f7fc f91e 	bl	80001e0 <memchr>
 8003fa4:	b108      	cbz	r0, 8003faa <_printf_i+0x1da>
 8003fa6:	1b40      	subs	r0, r0, r5
 8003fa8:	6060      	str	r0, [r4, #4]
 8003faa:	6863      	ldr	r3, [r4, #4]
 8003fac:	6123      	str	r3, [r4, #16]
 8003fae:	2300      	movs	r3, #0
 8003fb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fb4:	e79f      	b.n	8003ef6 <_printf_i+0x126>
 8003fb6:	6923      	ldr	r3, [r4, #16]
 8003fb8:	462a      	mov	r2, r5
 8003fba:	4639      	mov	r1, r7
 8003fbc:	4630      	mov	r0, r6
 8003fbe:	47c0      	blx	r8
 8003fc0:	3001      	adds	r0, #1
 8003fc2:	d0a2      	beq.n	8003f0a <_printf_i+0x13a>
 8003fc4:	6823      	ldr	r3, [r4, #0]
 8003fc6:	079b      	lsls	r3, r3, #30
 8003fc8:	d507      	bpl.n	8003fda <_printf_i+0x20a>
 8003fca:	2500      	movs	r5, #0
 8003fcc:	f104 0919 	add.w	r9, r4, #25
 8003fd0:	68e3      	ldr	r3, [r4, #12]
 8003fd2:	9a03      	ldr	r2, [sp, #12]
 8003fd4:	1a9b      	subs	r3, r3, r2
 8003fd6:	429d      	cmp	r5, r3
 8003fd8:	db05      	blt.n	8003fe6 <_printf_i+0x216>
 8003fda:	68e0      	ldr	r0, [r4, #12]
 8003fdc:	9b03      	ldr	r3, [sp, #12]
 8003fde:	4298      	cmp	r0, r3
 8003fe0:	bfb8      	it	lt
 8003fe2:	4618      	movlt	r0, r3
 8003fe4:	e793      	b.n	8003f0e <_printf_i+0x13e>
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	464a      	mov	r2, r9
 8003fea:	4639      	mov	r1, r7
 8003fec:	4630      	mov	r0, r6
 8003fee:	47c0      	blx	r8
 8003ff0:	3001      	adds	r0, #1
 8003ff2:	d08a      	beq.n	8003f0a <_printf_i+0x13a>
 8003ff4:	3501      	adds	r5, #1
 8003ff6:	e7eb      	b.n	8003fd0 <_printf_i+0x200>
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1a7      	bne.n	8003f4c <_printf_i+0x17c>
 8003ffc:	780b      	ldrb	r3, [r1, #0]
 8003ffe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004002:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004006:	e765      	b.n	8003ed4 <_printf_i+0x104>
 8004008:	080042b8 	.word	0x080042b8
 800400c:	080042a7 	.word	0x080042a7

08004010 <memcpy>:
 8004010:	b510      	push	{r4, lr}
 8004012:	1e43      	subs	r3, r0, #1
 8004014:	440a      	add	r2, r1
 8004016:	4291      	cmp	r1, r2
 8004018:	d100      	bne.n	800401c <memcpy+0xc>
 800401a:	bd10      	pop	{r4, pc}
 800401c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004020:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004024:	e7f7      	b.n	8004016 <memcpy+0x6>

08004026 <memmove>:
 8004026:	4288      	cmp	r0, r1
 8004028:	b510      	push	{r4, lr}
 800402a:	eb01 0302 	add.w	r3, r1, r2
 800402e:	d803      	bhi.n	8004038 <memmove+0x12>
 8004030:	1e42      	subs	r2, r0, #1
 8004032:	4299      	cmp	r1, r3
 8004034:	d10c      	bne.n	8004050 <memmove+0x2a>
 8004036:	bd10      	pop	{r4, pc}
 8004038:	4298      	cmp	r0, r3
 800403a:	d2f9      	bcs.n	8004030 <memmove+0xa>
 800403c:	1881      	adds	r1, r0, r2
 800403e:	1ad2      	subs	r2, r2, r3
 8004040:	42d3      	cmn	r3, r2
 8004042:	d100      	bne.n	8004046 <memmove+0x20>
 8004044:	bd10      	pop	{r4, pc}
 8004046:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800404a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800404e:	e7f7      	b.n	8004040 <memmove+0x1a>
 8004050:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004054:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004058:	e7eb      	b.n	8004032 <memmove+0xc>
	...

0800405c <_free_r>:
 800405c:	b538      	push	{r3, r4, r5, lr}
 800405e:	4605      	mov	r5, r0
 8004060:	2900      	cmp	r1, #0
 8004062:	d045      	beq.n	80040f0 <_free_r+0x94>
 8004064:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004068:	1f0c      	subs	r4, r1, #4
 800406a:	2b00      	cmp	r3, #0
 800406c:	bfb8      	it	lt
 800406e:	18e4      	addlt	r4, r4, r3
 8004070:	f000 f8d6 	bl	8004220 <__malloc_lock>
 8004074:	4a1f      	ldr	r2, [pc, #124]	; (80040f4 <_free_r+0x98>)
 8004076:	6813      	ldr	r3, [r2, #0]
 8004078:	4610      	mov	r0, r2
 800407a:	b933      	cbnz	r3, 800408a <_free_r+0x2e>
 800407c:	6063      	str	r3, [r4, #4]
 800407e:	6014      	str	r4, [r2, #0]
 8004080:	4628      	mov	r0, r5
 8004082:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004086:	f000 b8cc 	b.w	8004222 <__malloc_unlock>
 800408a:	42a3      	cmp	r3, r4
 800408c:	d90c      	bls.n	80040a8 <_free_r+0x4c>
 800408e:	6821      	ldr	r1, [r4, #0]
 8004090:	1862      	adds	r2, r4, r1
 8004092:	4293      	cmp	r3, r2
 8004094:	bf04      	itt	eq
 8004096:	681a      	ldreq	r2, [r3, #0]
 8004098:	685b      	ldreq	r3, [r3, #4]
 800409a:	6063      	str	r3, [r4, #4]
 800409c:	bf04      	itt	eq
 800409e:	1852      	addeq	r2, r2, r1
 80040a0:	6022      	streq	r2, [r4, #0]
 80040a2:	6004      	str	r4, [r0, #0]
 80040a4:	e7ec      	b.n	8004080 <_free_r+0x24>
 80040a6:	4613      	mov	r3, r2
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	b10a      	cbz	r2, 80040b0 <_free_r+0x54>
 80040ac:	42a2      	cmp	r2, r4
 80040ae:	d9fa      	bls.n	80040a6 <_free_r+0x4a>
 80040b0:	6819      	ldr	r1, [r3, #0]
 80040b2:	1858      	adds	r0, r3, r1
 80040b4:	42a0      	cmp	r0, r4
 80040b6:	d10b      	bne.n	80040d0 <_free_r+0x74>
 80040b8:	6820      	ldr	r0, [r4, #0]
 80040ba:	4401      	add	r1, r0
 80040bc:	1858      	adds	r0, r3, r1
 80040be:	4282      	cmp	r2, r0
 80040c0:	6019      	str	r1, [r3, #0]
 80040c2:	d1dd      	bne.n	8004080 <_free_r+0x24>
 80040c4:	6810      	ldr	r0, [r2, #0]
 80040c6:	6852      	ldr	r2, [r2, #4]
 80040c8:	605a      	str	r2, [r3, #4]
 80040ca:	4401      	add	r1, r0
 80040cc:	6019      	str	r1, [r3, #0]
 80040ce:	e7d7      	b.n	8004080 <_free_r+0x24>
 80040d0:	d902      	bls.n	80040d8 <_free_r+0x7c>
 80040d2:	230c      	movs	r3, #12
 80040d4:	602b      	str	r3, [r5, #0]
 80040d6:	e7d3      	b.n	8004080 <_free_r+0x24>
 80040d8:	6820      	ldr	r0, [r4, #0]
 80040da:	1821      	adds	r1, r4, r0
 80040dc:	428a      	cmp	r2, r1
 80040de:	bf04      	itt	eq
 80040e0:	6811      	ldreq	r1, [r2, #0]
 80040e2:	6852      	ldreq	r2, [r2, #4]
 80040e4:	6062      	str	r2, [r4, #4]
 80040e6:	bf04      	itt	eq
 80040e8:	1809      	addeq	r1, r1, r0
 80040ea:	6021      	streq	r1, [r4, #0]
 80040ec:	605c      	str	r4, [r3, #4]
 80040ee:	e7c7      	b.n	8004080 <_free_r+0x24>
 80040f0:	bd38      	pop	{r3, r4, r5, pc}
 80040f2:	bf00      	nop
 80040f4:	200000a8 	.word	0x200000a8

080040f8 <_malloc_r>:
 80040f8:	b570      	push	{r4, r5, r6, lr}
 80040fa:	1ccd      	adds	r5, r1, #3
 80040fc:	f025 0503 	bic.w	r5, r5, #3
 8004100:	3508      	adds	r5, #8
 8004102:	2d0c      	cmp	r5, #12
 8004104:	bf38      	it	cc
 8004106:	250c      	movcc	r5, #12
 8004108:	2d00      	cmp	r5, #0
 800410a:	4606      	mov	r6, r0
 800410c:	db01      	blt.n	8004112 <_malloc_r+0x1a>
 800410e:	42a9      	cmp	r1, r5
 8004110:	d903      	bls.n	800411a <_malloc_r+0x22>
 8004112:	230c      	movs	r3, #12
 8004114:	6033      	str	r3, [r6, #0]
 8004116:	2000      	movs	r0, #0
 8004118:	bd70      	pop	{r4, r5, r6, pc}
 800411a:	f000 f881 	bl	8004220 <__malloc_lock>
 800411e:	4a23      	ldr	r2, [pc, #140]	; (80041ac <_malloc_r+0xb4>)
 8004120:	6814      	ldr	r4, [r2, #0]
 8004122:	4621      	mov	r1, r4
 8004124:	b991      	cbnz	r1, 800414c <_malloc_r+0x54>
 8004126:	4c22      	ldr	r4, [pc, #136]	; (80041b0 <_malloc_r+0xb8>)
 8004128:	6823      	ldr	r3, [r4, #0]
 800412a:	b91b      	cbnz	r3, 8004134 <_malloc_r+0x3c>
 800412c:	4630      	mov	r0, r6
 800412e:	f000 f867 	bl	8004200 <_sbrk_r>
 8004132:	6020      	str	r0, [r4, #0]
 8004134:	4629      	mov	r1, r5
 8004136:	4630      	mov	r0, r6
 8004138:	f000 f862 	bl	8004200 <_sbrk_r>
 800413c:	1c43      	adds	r3, r0, #1
 800413e:	d126      	bne.n	800418e <_malloc_r+0x96>
 8004140:	230c      	movs	r3, #12
 8004142:	6033      	str	r3, [r6, #0]
 8004144:	4630      	mov	r0, r6
 8004146:	f000 f86c 	bl	8004222 <__malloc_unlock>
 800414a:	e7e4      	b.n	8004116 <_malloc_r+0x1e>
 800414c:	680b      	ldr	r3, [r1, #0]
 800414e:	1b5b      	subs	r3, r3, r5
 8004150:	d41a      	bmi.n	8004188 <_malloc_r+0x90>
 8004152:	2b0b      	cmp	r3, #11
 8004154:	d90f      	bls.n	8004176 <_malloc_r+0x7e>
 8004156:	600b      	str	r3, [r1, #0]
 8004158:	50cd      	str	r5, [r1, r3]
 800415a:	18cc      	adds	r4, r1, r3
 800415c:	4630      	mov	r0, r6
 800415e:	f000 f860 	bl	8004222 <__malloc_unlock>
 8004162:	f104 000b 	add.w	r0, r4, #11
 8004166:	1d23      	adds	r3, r4, #4
 8004168:	f020 0007 	bic.w	r0, r0, #7
 800416c:	1ac3      	subs	r3, r0, r3
 800416e:	d01b      	beq.n	80041a8 <_malloc_r+0xb0>
 8004170:	425a      	negs	r2, r3
 8004172:	50e2      	str	r2, [r4, r3]
 8004174:	bd70      	pop	{r4, r5, r6, pc}
 8004176:	428c      	cmp	r4, r1
 8004178:	bf0d      	iteet	eq
 800417a:	6863      	ldreq	r3, [r4, #4]
 800417c:	684b      	ldrne	r3, [r1, #4]
 800417e:	6063      	strne	r3, [r4, #4]
 8004180:	6013      	streq	r3, [r2, #0]
 8004182:	bf18      	it	ne
 8004184:	460c      	movne	r4, r1
 8004186:	e7e9      	b.n	800415c <_malloc_r+0x64>
 8004188:	460c      	mov	r4, r1
 800418a:	6849      	ldr	r1, [r1, #4]
 800418c:	e7ca      	b.n	8004124 <_malloc_r+0x2c>
 800418e:	1cc4      	adds	r4, r0, #3
 8004190:	f024 0403 	bic.w	r4, r4, #3
 8004194:	42a0      	cmp	r0, r4
 8004196:	d005      	beq.n	80041a4 <_malloc_r+0xac>
 8004198:	1a21      	subs	r1, r4, r0
 800419a:	4630      	mov	r0, r6
 800419c:	f000 f830 	bl	8004200 <_sbrk_r>
 80041a0:	3001      	adds	r0, #1
 80041a2:	d0cd      	beq.n	8004140 <_malloc_r+0x48>
 80041a4:	6025      	str	r5, [r4, #0]
 80041a6:	e7d9      	b.n	800415c <_malloc_r+0x64>
 80041a8:	bd70      	pop	{r4, r5, r6, pc}
 80041aa:	bf00      	nop
 80041ac:	200000a8 	.word	0x200000a8
 80041b0:	200000ac 	.word	0x200000ac

080041b4 <_realloc_r>:
 80041b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b6:	4607      	mov	r7, r0
 80041b8:	4614      	mov	r4, r2
 80041ba:	460e      	mov	r6, r1
 80041bc:	b921      	cbnz	r1, 80041c8 <_realloc_r+0x14>
 80041be:	4611      	mov	r1, r2
 80041c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80041c4:	f7ff bf98 	b.w	80040f8 <_malloc_r>
 80041c8:	b922      	cbnz	r2, 80041d4 <_realloc_r+0x20>
 80041ca:	f7ff ff47 	bl	800405c <_free_r>
 80041ce:	4625      	mov	r5, r4
 80041d0:	4628      	mov	r0, r5
 80041d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041d4:	f000 f826 	bl	8004224 <_malloc_usable_size_r>
 80041d8:	4284      	cmp	r4, r0
 80041da:	d90f      	bls.n	80041fc <_realloc_r+0x48>
 80041dc:	4621      	mov	r1, r4
 80041de:	4638      	mov	r0, r7
 80041e0:	f7ff ff8a 	bl	80040f8 <_malloc_r>
 80041e4:	4605      	mov	r5, r0
 80041e6:	2800      	cmp	r0, #0
 80041e8:	d0f2      	beq.n	80041d0 <_realloc_r+0x1c>
 80041ea:	4631      	mov	r1, r6
 80041ec:	4622      	mov	r2, r4
 80041ee:	f7ff ff0f 	bl	8004010 <memcpy>
 80041f2:	4631      	mov	r1, r6
 80041f4:	4638      	mov	r0, r7
 80041f6:	f7ff ff31 	bl	800405c <_free_r>
 80041fa:	e7e9      	b.n	80041d0 <_realloc_r+0x1c>
 80041fc:	4635      	mov	r5, r6
 80041fe:	e7e7      	b.n	80041d0 <_realloc_r+0x1c>

08004200 <_sbrk_r>:
 8004200:	b538      	push	{r3, r4, r5, lr}
 8004202:	4c06      	ldr	r4, [pc, #24]	; (800421c <_sbrk_r+0x1c>)
 8004204:	2300      	movs	r3, #0
 8004206:	4605      	mov	r5, r0
 8004208:	4608      	mov	r0, r1
 800420a:	6023      	str	r3, [r4, #0]
 800420c:	f7ff fb4c 	bl	80038a8 <_sbrk>
 8004210:	1c43      	adds	r3, r0, #1
 8004212:	d102      	bne.n	800421a <_sbrk_r+0x1a>
 8004214:	6823      	ldr	r3, [r4, #0]
 8004216:	b103      	cbz	r3, 800421a <_sbrk_r+0x1a>
 8004218:	602b      	str	r3, [r5, #0]
 800421a:	bd38      	pop	{r3, r4, r5, pc}
 800421c:	200003f8 	.word	0x200003f8

08004220 <__malloc_lock>:
 8004220:	4770      	bx	lr

08004222 <__malloc_unlock>:
 8004222:	4770      	bx	lr

08004224 <_malloc_usable_size_r>:
 8004224:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8004228:	2800      	cmp	r0, #0
 800422a:	f1a0 0004 	sub.w	r0, r0, #4
 800422e:	bfbc      	itt	lt
 8004230:	580b      	ldrlt	r3, [r1, r0]
 8004232:	18c0      	addlt	r0, r0, r3
 8004234:	4770      	bx	lr
	...

08004238 <_init>:
 8004238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423a:	bf00      	nop
 800423c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800423e:	bc08      	pop	{r3}
 8004240:	469e      	mov	lr, r3
 8004242:	4770      	bx	lr

08004244 <_fini>:
 8004244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004246:	bf00      	nop
 8004248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800424a:	bc08      	pop	{r3}
 800424c:	469e      	mov	lr, r3
 800424e:	4770      	bx	lr
